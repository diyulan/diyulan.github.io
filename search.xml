<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Sass样式预处理器学习笔记</title>
      <link href="/archives/956f95b6.html"/>
      <url>/archives/956f95b6.html</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ol><li>Sass是一款强化CSS的辅助工具，它在CSS语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能</li><li>sass从第三代开始，放弃了缩进式风格，并且完全向下兼容普通的css代码，这一代的sass也被称为scss</li></ol><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li>我使用的WebStorm编辑器，用它写scss不太理想。第一点输出css文件路径，如何配置，我是真的不懂。第二点安装autoprefixer插件，如何配置，同样不懂，感觉自己有点蠢(´-ω-&#96;)</li><li>换成VSCode吧，安装Live Sass Compiler插件，它是scss预处理器用来编译成css文件，如果你见到两个相同名字的插件，老版本v3.0.0已经停止更新，当前新版本是v5.5.1，总之选最新版的就对了</li><li>另外，再安装个Autoprefixer插件，它是用来辅助Live Sass Compiler插件，帮助你生成兼容前缀，比如万恶的IE，你不需要亲自写兼容前缀了，Autoprefixer插件会帮你做这件事</li><li>两个插件完毕后，开始配置吧，首先打开Live Sass Compiler插件扩展设置<img src="/img/content_sass_setting.webp"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;liveSassCompile.settings.formats&quot;:[</span><br><span class="line">        /*</span><br><span class="line">            nested：嵌套格式</span><br><span class="line">            expanded：展开格式</span><br><span class="line">            compact：紧凑格式</span><br><span class="line">            compressed：压缩格式</span><br><span class="line">        */</span><br><span class="line">        &#123;</span><br><span class="line">            //定制输出css样式(nested、expanded、compact、compressed)</span><br><span class="line">            &quot;format&quot;: &quot;expanded&quot;,</span><br><span class="line">            &quot;extensionName&quot;: &quot;.css&quot;,</span><br><span class="line">            //~是当前路径</span><br><span class="line">            &quot;savePath&quot;: &quot;~/../css&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    //排除目录</span><br><span class="line">    &quot;liveSassCompile.settings.excludeList&quot;: [ </span><br><span class="line">        &quot;**/node_modules/**&quot;,</span><br><span class="line">        &quot;.vscode/**&quot; </span><br><span class="line">    ],</span><br><span class="line">    //是否生成对应的map文件</span><br><span class="line">    &quot;autoprefixer.formatOnSave&quot;: true,</span><br><span class="line">    //是否添加兼容前缀，例如：-webkit-  -moz-等</span><br><span class="line">    &quot;liveSassCompile.settings.autoprefix&quot;: [</span><br><span class="line">        &quot;&gt; 1%&quot;,</span><br><span class="line">        &quot;last 2 versions&quot;</span><br><span class="line">    ],</span><br><span class="line">    //下面这些是VSCode设置出来的，我希望编辑器字体很大，tab缩进2个空格...</span><br><span class="line">    &quot;files.autoSave&quot;: &quot;onFocusChange&quot;,</span><br><span class="line">    &quot;editor.fontSize&quot;: 21,</span><br><span class="line">    &quot;editor.tabSize&quot;: 2,</span><br><span class="line">    &quot;liveSassCompile.settings.compileOnWatch&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>打开Autoprefixer插件扩展设置，勾选这一行Autoprefixer: Format On Save(保存文件时向Css添加兼容前缀)</li><li>测试时，在项目中创建scss、css文件夹，并在scss文件夹内创建test.scss文件，点击最下方菜单栏Watch Sass开始监听文件，test.scss写入样式保存后，看是否生成test.css文件，最后打开看是否有兼容前缀<img src="/img/content_sass_testCode.webp"></li><li>学习过程中，不想见到兼容前缀暂时关闭插件即可</li></ol><h1 id="语法扩展"><a href="#语法扩展" class="headerlink" title="语法扩展"></a>语法扩展</h1><h2 id="选择器嵌套"><a href="#选择器嵌套" class="headerlink" title="选择器嵌套"></a>选择器嵌套</h2><ol><li>scss允许将一套CSS样式嵌套进另一套样式<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#left</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="父选择器"><a href="#父选择器" class="headerlink" title="父选择器"></a>父选择器</h2><ol><li>如果不想写父选择器，可以用&amp;符号替代，自动识别父选择器<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#f08a5d</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f2f2f2</span> solid;</span><br><span class="line">    &amp;-<span class="attribute">left</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">200px</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#left</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f08a5d</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span> <span class="selector-class">.top</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f2f2f2</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span> <span class="selector-class">.top-left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="属性嵌套"><a href="#属性嵌套" class="headerlink" title="属性嵌套"></a>属性嵌套</h2><ol><li>属性嵌套：不错，看起来很直观<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    size: <span class="number">24px</span>;</span><br><span class="line">    family: serif;</span><br><span class="line">    weight: bolder;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: serif;</span><br><span class="line">  <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="占位符选择器-name"><a href="#占位符选择器-name" class="headerlink" title="占位符选择器%name"></a>占位符选择器%name</h2><ol><li>占位符选择器：没有调用占位符时，它是隐藏的，直到使用<code>@extend %name;</code>调用，它才会显示，顺便说一下%后面的名字可以自定义<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">%ulan &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %ulan;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %ulan;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.b</span>, <span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="定义规则"><a href="#定义规则" class="headerlink" title="定义规则"></a>定义规则</h2><ol><li>变量以美元符号($)开头，后面跟变量名</li><li>变量名是不以数字开头的可包含字母、数字、下划线、横线（连接符）</li><li>写法同css，即变量名和值之间用冒号（:）分隔</li><li>变量一定要先定义，后使用</li></ol><h2 id="连接符与下划线"><a href="#连接符与下划线" class="headerlink" title="连接符与下划线"></a>连接符与下划线</h2><ol><li>连接符与下划线定义的同名变量是一样的，建议使用连接符<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$font-size</span>: <span class="number">14px</span>;</span><br><span class="line"><span class="variable">$font_size</span>: <span class="number">16px</span>;</span><br><span class="line"><span class="selector-class">.ulan</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$font-size</span>; <span class="comment">/* 16px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="全局与局部"><a href="#全局与局部" class="headerlink" title="全局与局部"></a>全局与局部</h2><ol><li>全局变量定义在选择器外部，局部变量定义在选择器内部，其他选择器无法访问局部变量<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 全局 */</span></span><br><span class="line"><span class="variable">$p14</span>: <span class="number">14px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ulan</span> &#123;</span><br><span class="line">  <span class="comment">/* 局部 */</span></span><br><span class="line">  <span class="variable">$white</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$white</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$p14</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.jintao</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$white</span>; <span class="comment">/* 报错，变量white未定义 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$p14</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>如果你希望其他选择器能访问局部变量，可以写<code>!global</code><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ulan</span> &#123;</span><br><span class="line">  <span class="variable">$white</span>: <span class="number">#fff</span> !global;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$white</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.jintao</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$white</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="变量值类型"><a href="#变量值类型" class="headerlink" title="变量值类型"></a>变量值类型</h2><ol><li>主要6种数据类型<ul><li>数值：1、2、10px</li><li>字符串：有引号字符串与无引号字符串</li><li>颜色：blue、#fff、rbga(255, 0, 0)</li><li>布尔：true、false</li><li>空值：null</li><li>数组：用空格或逗号作分隔符</li><li>maps：相当于js的object(key1: value1, key2: value2)<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值</span></span><br><span class="line"><span class="variable">$layer-index</span>: <span class="number">10</span>;</span><br><span class="line"><span class="variable">$border-width</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="comment">// 字符串or数组</span></span><br><span class="line"><span class="variable">$font-base-family</span>: <span class="string">&#x27;Microsoft YaHei&#x27;</span>, Helvetica, Sans-Serif;</span><br><span class="line"><span class="comment">// 颜色</span></span><br><span class="line"><span class="variable">$top-bg-color</span>: rgba(<span class="number">255</span>, <span class="number">147</span>, <span class="number">29</span>, <span class="number">0.6</span>);</span><br><span class="line"><span class="comment">// 布尔</span></span><br><span class="line"><span class="variable">$blank-mode</span>: true;</span><br><span class="line"><span class="comment">// 空值</span></span><br><span class="line"><span class="variable">$var</span>: null;</span><br><span class="line"><span class="comment">// maps</span></span><br><span class="line"><span class="variable">$color-map</span>: (color1: <span class="number">#6a2c70</span>, color2: <span class="number">#b83b5e</span>, color3: <span class="number">#f08a5d</span>);</span><br><span class="line"><span class="variable">$fonts</span>: (yahei: <span class="string">&#x27;Microsoft YaHei&#x27;</span>, Helvetica: <span class="string">&#x27;Helvetica&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$blank-mode</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#6a2c70</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#b83b5e</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">content</span>: type-of(<span class="variable">$var</span>) length(<span class="variable">$var</span>);</span><br><span class="line">  <span class="attribute">color</span>: map-get(<span class="variable">$color-map</span>, color2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="comment">// 如果没有sans键，生成的css将忽略空值</span></span><br><span class="line">  <span class="attribute">font</span>: <span class="number">18px</span> bold map-get(<span class="variable">$fonts</span>, <span class="string">&#x27;sans&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#6a2c70</span>;</span><br><span class="line">  <span class="attribute">content</span>: null <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#b83b5e</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">18px</span> bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><ol><li>这个功能有点鸡肋啦，我会使用默认值，通常是担心覆盖掉老样式，但你设置的新样式又用不了；如果是使用老样式直接调用，某天想用新样式了直接覆盖，所以默认值的意义在哪？<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: <span class="number">#333</span>;</span><br><span class="line"><span class="variable">$color</span>: <span class="number">#666</span> !default;</span><br><span class="line"><span class="variable">$p24</span>: <span class="number">24px</span> !default;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;      <span class="comment">// #333</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$p24</span>;    <span class="comment">// 24px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="导入规则"><a href="#导入规则" class="headerlink" title="导入规则"></a>导入规则</h1><h2 id="scss导入方式"><a href="#scss导入方式" class="headerlink" title="scss导入方式"></a>scss导入方式</h2><ol><li>新建<code>_base.scss</code>文件，添加下划线可以防止生成css文件<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$p14</span>: <span class="number">14px</span>;</span><br><span class="line"><span class="variable">$red</span>: <span class="number">#fc5185</span>;</span><br></pre></td></tr></table></figure></li><li>同目录<code>test.scss</code>文件，导入base文件，不添加下划线、后缀名，照样能识别<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;base&quot;</span>;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$p14</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$red</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fc5185</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>作为局部导入，另一边没有导入base文件的选择器，它会报错<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="keyword">@import</span> <span class="string">&quot;base&quot;</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$p14</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$red</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面报错，未定义$p14和$red</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$p14</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$red</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="css导入方式"><a href="#css导入方式" class="headerlink" title="css导入方式"></a>css导入方式</h2><ol><li>以下几种方式，都将作为普通css语句<ul><li>文件后缀名是.css</li><li>文件名以http:&#x2F;&#x2F;开头</li><li>文件名是url()</li><li>@import包含media queries<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;public.css&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;http://xxx.com/xxx&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> url(public);</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;landscape&quot;</span> screen <span class="keyword">and</span> (<span class="attribute">orientation</span>: landscape);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="混合指令-mixin"><a href="#混合指令-mixin" class="headerlink" title="混合指令@mixin"></a>混合指令@mixin</h1><ol><li>第一种用法，通过<code>@mixin name</code>定义重复使用的样式，接着用<code>@include name</code>引入到选择器内，如果name过长建议使用-连接<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> block-ulan &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">96%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">2%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f6f6f6</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> block-ulan;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">96%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">2%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f6f6f6</span> solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>第二种用法，批量传参<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> flex-align(<span class="variable">$aitem</span>) &#123;</span><br><span class="line">  -webkit-box-align: <span class="variable">$aitem</span>;</span><br><span class="line">  -webkit-<span class="attribute">align-items</span>: <span class="variable">$aitem</span>;</span><br><span class="line">  -ms-<span class="attribute">flex</span>-align: <span class="variable">$aitem</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: <span class="variable">$aitem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> flex-align(center);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  -webkit-box-align: center;</span><br><span class="line">  -webkit-<span class="attribute">align-items</span>: center;</span><br><span class="line">  -ms-<span class="attribute">flex</span>-align: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>第三种用法，形参设置默认值，使用参数时建议加上默认值<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> block-padding(<span class="variable">$top</span>: null, <span class="variable">$right</span>: null, <span class="variable">$bottom</span>: null, <span class="variable">$left</span>: <span class="number">40px</span>) &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">$top</span> <span class="variable">$right</span> <span class="variable">$bottom</span> <span class="variable">$left</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> block-padding(<span class="number">10px</span>, <span class="number">20px</span>, <span class="number">30px</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>第四种用法，剩余参数，这里的1指下标项1<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> linear-gradient(<span class="variable">$direction</span>, <span class="variable">$gradients</span>...) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: nth(<span class="variable">$gradients</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">background-image</span>: linear-gradient(<span class="variable">$direction</span>, <span class="variable">$gradients</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> linear-gradient(to right, <span class="number">#ffffd2</span>, <span class="number">#fcbad3</span>, <span class="number">#aa96da</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffd2</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#ffffd2</span>, <span class="number">#fcbad3</span>, <span class="number">#aa96da</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>混入总结<ul><li>mixin是可以重复使用的一组CSS声明</li><li>混合指令可以包含所有的CSS规则，绝大部分scss规则，甚至通过参数功能引入变量，输出多样化的样式</li><li>使用参数时建议加上默认值</li></ul></li></ol><h1 id="继承-extend"><a href="#继承-extend" class="headerlink" title="继承@extend"></a>继承@extend</h1><ol><li>儿子继承父亲样式，由于哥哥已经继承了父亲样式，这时弟弟在去继承哥哥样式，同时拥有两人的样式<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#aa96da</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son-a</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .father;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son-b</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .son-a;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>, <span class="selector-class">.son-a</span>, <span class="selector-class">.son-b</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#aa96da</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son-a</span>, <span class="selector-class">.son-b</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son-b</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>占位符选择器、混合指令、继承，他们三个都能实现同样效果，该如何选择呢？<ul><li>占位符选择器：它适合写公共样式，由于占位符隐藏特性，编译出来的代码量较少</li><li>混合指令：它跟占位符选择器很相似，缺点是编译出来的代码量超多</li><li>继承：它也跟占位符选择器很相似，但会多出一个选择器，编译出来的代码量较少</li><li>总结：父选择器拥有的样式，可以提供给子选择器，毫无疑问用继承；在没有父选择器提供样式情况下，使用占位符选择器，更加合理，实在不行就用混合指令</li></ul></li></ol><h1 id="scss运算符"><a href="#scss运算符" class="headerlink" title="scss运算符"></a>scss运算符</h1><h2 id="等号操作符"><a href="#等号操作符" class="headerlink" title="等号操作符"></a>等号操作符</h2><ol><li>等于写法<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$theme</span>: <span class="number">1</span>;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$theme</span> == <span class="number">1</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;   <span class="comment">// 执行</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>不等于写法，也可以叫取反<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$theme</span>: <span class="string">&quot;black&quot;</span>;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$theme</span> != <span class="string">&quot;black&quot;</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;   <span class="comment">// 执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><ol><li><code>&gt;</code>or<code>&lt;</code>，<code>&gt;=</code>or<code>&lt;=</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$theme: 3;</span><br><span class="line">@if $theme &gt;= 5</span><br></pre></td></tr></table></figure></li></ol><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ol><li>and：逻辑与</li><li>or：逻辑或</li><li>not：逻辑非<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$width</span>: <span class="number">100</span>;</span><br><span class="line"><span class="variable">$height</span>: <span class="number">200</span>;</span><br><span class="line"><span class="variable">$index</span>: <span class="number">10</span>;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$width</span> &gt; <span class="number">50</span> <span class="keyword">and</span> <span class="variable">$height</span> &lt; <span class="number">300</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@if</span> <span class="keyword">not</span> (<span class="variable">$index</span> &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="数字操作符"><a href="#数字操作符" class="headerlink" title="数字操作符"></a>数字操作符</h2><ol><li><p>加运算</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50</span> + <span class="number">20</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50</span> + <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span> + <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20</span> + <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span> + <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span> + <span class="number">10pt</span>;   <span class="comment">// 23.3333333333px</span></span><br><span class="line">  <span class="comment">//width: 20% + 10px;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>减运算</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50</span> - <span class="number">30</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50</span> - <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60%</span> - <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span> - <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span> - <span class="number">20pt</span>;   <span class="comment">// 23.3333333333px</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span> - <span class="number">20</span>;</span><br><span class="line">  <span class="comment">//width: 50px - 10%;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>乘运算</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10</span> * <span class="number">20</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5</span> * <span class="number">10%</span>;</span><br><span class="line">  <span class="comment">//width: 50% * 10%;</span></span><br><span class="line">  <span class="comment">//width: 10px * 20px;</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span> * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>除运算</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="variable">$width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10</span> / <span class="number">5</span>;    <span class="comment">// width: 10/5; 这里识别成斜杠</span></span><br><span class="line">  <span class="attribute">width</span>: (<span class="number">10</span> / <span class="number">5</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span> / <span class="number">10</span>;</span><br><span class="line">  <span class="attribute">width</span>: round(<span class="variable">$number</span>: <span class="number">50</span>) / <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span> / <span class="number">2px</span> + <span class="number">3px</span>;    <span class="comment">// 8px</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span> / <span class="number">2</span> + <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下三种情况&#x2F;将被视为除法运算符</p><ul><li>如果值或值的一部分，是变量或函数的返回值</li><li>如果值被圆括号包裹</li><li>如果值是算数表达式的一部分</li></ul></li><li><p>求余运算</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10</span> % <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50</span> % <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span> % <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span> % <span class="number">7</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span> % <span class="number">7</span>;   <span class="comment">// 1%</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span> % <span class="number">9%</span>;  <span class="comment">// 5%</span></span><br><span class="line">  <span class="comment">//width: 50% % 10px;</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span> % <span class="number">10pt</span>;   <span class="comment">// 50px % 13.3333333333px</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span> + <span class="number">10pt</span>;   <span class="comment">// 10pt == 13.3333333333px</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span> % <span class="number">13.3333333333px</span>;  <span class="comment">// 10.0000000001px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字符串拼接</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;foo&quot;</span> + bar;     <span class="comment">// &quot;foobar&quot;</span></span><br><span class="line">  <span class="attribute">content</span>: foo + <span class="string">&quot;bar&quot;</span>;     <span class="comment">// foobar</span></span><br><span class="line">  <span class="attribute">content</span>: foo + bar;       <span class="comment">// foobar</span></span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;foo&quot;</span> + <span class="string">&quot;bar&quot;</span>;   <span class="comment">// &quot;foobar&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="插值语句"><a href="#插值语句" class="headerlink" title="插值语句"></a>插值语句</h1><ol><li>插值写法<code>#&#123;name&#125;</code>，name通常为变量；用了插值语法不会触发除法运算符<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$font-size</span>: <span class="number">12px</span>;</span><br><span class="line"><span class="variable">$line-height</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: #&#123;<span class="variable">$font-size</span>&#125; / #&#123;<span class="variable">$line-height</span>&#125; Helvetica;  <span class="comment">// font: 13px/30px Helvetica;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>还能设置成属性名、属性值<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$class-name</span>: danger;</span><br><span class="line"><span class="variable">$attr</span>: color;</span><br><span class="line"><span class="selector-tag">a</span>.#&#123;class-name&#125; &#123;</span><br><span class="line">  <span class="attribute">border</span>-#&#123;attr&#125;: <span class="number">#aa96da</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>甚至注释也能办得到<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$author</span>: <span class="string">&#x27;幽蓝&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  这是文件说明部分</span></span><br><span class="line"><span class="comment">  @author: #&#123;$author&#125;   // @author: 幽蓝</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="常见函数的基本使用"><a href="#常见函数的基本使用" class="headerlink" title="常见函数的基本使用"></a>常见函数的基本使用</h1><h2 id="Color-颜色函数"><a href="#Color-颜色函数" class="headerlink" title="Color(颜色函数)"></a>Color(颜色函数)</h2><ol><li>lighten()调亮，darken()调暗，opacify()降低颜色透明度，transparent()使颜色透明度增加，mix()可用来混合两种颜色<ul><li><code>lighten($color, $amount)</code>，$amount的取值在0%～100%之间</li><li><code>darken($color, $amount)</code>，通常使用color.scale()代替该方案</li><li><code>opacify(rgba($color, 0.1), 0.5)</code>，通常使用color.scale()代替该方案<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: <span class="number">#00adb5</span>;</span><br><span class="line"><span class="selector-class">.color01</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.color02</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lighten(<span class="variable">$color</span>, <span class="number">30%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.color03</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: darken(<span class="variable">$color</span>, <span class="number">15%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.color04</span> &#123;</span><br><span class="line">  <span class="comment">// 如果0.1和0.5这两个参数大于1，透明度效果就没了，直接恢复成原本颜色</span></span><br><span class="line">  <span class="attribute">background-color</span>: opacify(rgba(<span class="variable">$color</span>, <span class="number">0.1</span>), <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="String-字符串函数"><a href="#String-字符串函数" class="headerlink" title="String(字符串函数)"></a>String(字符串函数)</h2><ol><li>unquote()去掉引号，str-length()获取字符串长度，quote()向字符串添加引号，str-insert()将内容插入字符串给定位置(0表示字符串的第0项)<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: unquote(<span class="variable">$string</span>: <span class="string">&#x27;#aa96da&#x27;</span>);</span><br><span class="line">  <span class="attribute">z-index</span>: str-length(<span class="string">&#x27;幽蓝/ulan&#x27;</span>);</span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: quote(周杰伦);</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: str-insert(<span class="string">&#x27;七里香&#x27;</span>, <span class="string">&#x27;专辑名：&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#aa96da</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;周杰伦&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;专辑名：七里香&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Math-数值函数"><a href="#Math-数值函数" class="headerlink" title="Math(数值函数)"></a>Math(数值函数)</h2><pre><code>- percentage()将无单元的数值转换为百分比- round()将数字四舍五入为最接近的数字- abs()会返回一个数的绝对值- ceil()将一个数转换成最接近于自己的整数- min()和max()获取几个数字中的最小值或最大值；我的WebStrom编辑器在这里会有点小bug，无法使用变量，换成VSCode可以了- random()返回一个随机数</code></pre><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: percentage(<span class="number">0.3</span>);         <span class="comment">// 30%</span></span><br><span class="line">  <span class="attribute">width</span>: percentage(<span class="number">2px</span> / <span class="number">10px</span>);  <span class="comment">// 0.2 =&gt; 20%</span></span><br><span class="line">  <span class="attribute">width</span>: round(<span class="number">12.3</span>);             <span class="comment">// 12</span></span><br><span class="line">  <span class="attribute">width</span>: round(<span class="number">12.5</span>);             <span class="comment">// 13</span></span><br><span class="line">  <span class="attribute">z-index</span>: abs(<span class="variable">$number</span>: -<span class="number">15</span>);     <span class="comment">// 15</span></span><br><span class="line">  <span class="attribute">z-index</span>: ceil(<span class="number">5.8</span>);             <span class="comment">// 6</span></span><br><span class="line">  <span class="attribute">z-index</span>: max(<span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">3</span>);    <span class="comment">// 8</span></span><br><span class="line">  <span class="attribute">opacity</span>: random();              <span class="comment">// 随机0-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List函数"><a href="#List函数" class="headerlink" title="List函数"></a>List函数</h2><ol><li>length()返回列表长度，index()查询位置，nth()返回列表中的特定项，join()将两个列表连接在一起，append()在列表末尾添加一个值<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: length(<span class="number">12px</span>);                      <span class="comment">// 1</span></span><br><span class="line">  <span class="attribute">z-index</span>: length(<span class="number">12px</span> <span class="number">5px</span> <span class="number">8px</span>);              <span class="comment">// 3</span></span><br><span class="line">  <span class="attribute">z-index</span>: index(a b c d, c);                 <span class="comment">// 3</span></span><br><span class="line">  <span class="attribute">color</span>: nth(<span class="variable">$list</span>: red blue green, <span class="variable">$n</span>: <span class="number">2</span>);   <span class="comment">// blue</span></span><br><span class="line">  <span class="attribute">padding</span>: append(<span class="number">10px</span> <span class="number">20px</span>, <span class="number">30px</span>);           <span class="comment">// 10px 20px 30px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Map函数"><a href="#Map函数" class="headerlink" title="Map函数"></a>Map函数</h2><ol><li>map-get()根据键获取map中的对应值，map-has-key()判断是否有键，map-merge()将两个map合并成一个新的map，map-keys()映射所有键，map-values()映射所有值<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$font-sizes</span>: (<span class="string">&#x27;small&#x27;</span>: <span class="number">12px</span>, <span class="string">&#x27;normal&#x27;</span>: <span class="number">18px</span>, <span class="string">&#x27;large&#x27;</span>: <span class="number">24px</span>);</span><br><span class="line"><span class="variable">$padding</span>: (top: <span class="number">10px</span>, right: <span class="number">20px</span>, bottom: <span class="number">10px</span>, left: <span class="number">30px</span>);</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: map-get(<span class="variable">$font-sizes</span>, <span class="string">&#x27;normal&#x27;</span>);  <span class="comment">// 18px</span></span><br><span class="line">  <span class="keyword">@if</span> map-has-key(<span class="variable">$padding</span>, <span class="string">&#x27;right&#x27;</span>) &#123;</span><br><span class="line">    <span class="attribute">padding-right</span>: map-get(<span class="variable">$padding</span>, <span class="string">&#x27;right&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: map-keys(<span class="variable">$font-sizes</span>) + <span class="string">&#x27; &#x27;</span> + map-values(<span class="variable">$padding</span>) + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&quot;small&quot;, &quot;normal&quot;, &quot;large&quot; 10px, 20px, 10px, 30px&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="选择器函数"><a href="#选择器函数" class="headerlink" title="选择器函数"></a>选择器函数</h2><ol><li>selector-append()可以把一个选择符附加到另一个选择符，selector-unify()将两组选择器合成一个复合选择器<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">content</span>: selector-append(<span class="string">&#x27;.a&#x27;</span>, <span class="string">&#x27;.b&#x27;</span>, <span class="string">&#x27;.c&#x27;</span>) + <span class="string">&#x27;&#x27;</span>;  <span class="comment">// &quot;.a.b.c&quot;</span></span><br><span class="line">  <span class="attribute">content</span>: selector-unify(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;.disabled&#x27;</span>) + <span class="string">&#x27;&#x27;</span>;   <span class="comment">// &quot;a.disabled&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="自检函数"><a href="#自检函数" class="headerlink" title="自检函数"></a>自检函数</h2><ol><li>feature-exists()检查当前scss版本是否存在某个特性，variable-exists()检查当前作用域中是否存在某个变量，mixin-exists()检查某个mixin是否存在<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="keyword">@mixin</span> padding(<span class="variable">$top</span>:<span class="number">0</span>, <span class="variable">$right</span>:<span class="number">0</span>, <span class="variable">$bottom</span>:<span class="number">0</span>, <span class="variable">$left</span>:<span class="number">0</span>) &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">$top</span> <span class="variable">$right</span> <span class="variable">$bottom</span> <span class="variable">$left</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="keyword">@if</span> variable-exists(<span class="attribute">color</span>) &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;$color不存在&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@if</span> mixin-exists(padding) &#123;</span><br><span class="line">    <span class="keyword">@include</span> padding(<span class="variable">$left</span>: <span class="number">10px</span>, <span class="variable">$right</span>: <span class="number">10px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="流程控制指令"><a href="#流程控制指令" class="headerlink" title="流程控制指令"></a>流程控制指令</h1><h2 id="if控制指令"><a href="#if控制指令" class="headerlink" title="@if控制指令"></a>@if控制指令</h2><ol><li>@if()允许你根据条件进行分支，并返回两种可能的其中一种结果</li><li>语法方式同js的if…else if…else</li></ol><h2 id="for指令"><a href="#for指令" class="headerlink" title="@for指令"></a>@for指令</h2><ol><li>@for指令可以在限制的范围内重复输出格式，每次按要求（变量的值）对输出结果做出变动。这个指令包含两种格式：<ul><li><code>@for $var from&lt;start&gt;through&lt;end&gt;</code></li><li><code>@for $var from&lt;start&gt;to&lt;end&gt;</code></li></ul></li><li>through与to的含义<ul><li>使用through时，条件范围包含<start>与<end>的值</li><li>使用to时，条件范围只包含<start>的值，不包含<end>的值</li><li>$var可以是任何变量，比如$ulan；<start>与<end>必须是整数值<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不包含4，也就是说循环3次</span></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> to <span class="number">4</span> &#123;</span><br><span class="line">  <span class="selector-class">.p</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span> * <span class="variable">$i</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aa96da</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#aa96da</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#aa96da</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#aa96da</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="while指令"><a href="#while指令" class="headerlink" title="@while指令"></a>@while指令</h2><ol><li>同js语法没区别，别写成死循环就好<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$column</span>: <span class="number">12</span>;</span><br><span class="line"><span class="variable">$unit</span>: <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">@while</span> (<span class="variable">$column</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="selector-class">.col-sm-</span>#&#123;<span class="variable">$column</span>&#125;&#123;</span><br><span class="line">    <span class="comment">// 下面两种写法效果一样，第二种写法方便修改单位</span></span><br><span class="line">    <span class="comment">// unquote是去除字符串意思</span></span><br><span class="line">    <span class="comment">//width: $column / 12 * 100%;</span></span><br><span class="line">    <span class="attribute">width</span>: unquote(<span class="variable">$string</span>: <span class="variable">$column</span> / <span class="number">12</span> * <span class="number">100</span> + <span class="variable">$unit</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$column</span>: <span class="variable">$column</span> - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.col-sm-12</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-sm-11</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">91.6666666667%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-sm-10</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">83.3333333333%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-sm-9</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-sm-8</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">66.6666666667%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-sm-7</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">58.3333333333%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-sm-6</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-sm-5</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">41.6666666667%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-sm-4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">33.3333333333%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-sm-3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-sm-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">16.6666666667%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-sm-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8.3333333333%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="each指令"><a href="#each指令" class="headerlink" title="@each指令"></a>@each指令</h2><ol><li>参考格式<code>@each $var in &lt;list&gt;</code>，$var可以是任何变量名，比如$lenght或者$name，而<list>是一连串的值，也就是值列表<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$color-list</span>: <span class="number">#ffffd2</span> <span class="number">#fcbad3</span> <span class="number">#aa96da</span> <span class="number">#a8d8ea</span>;</span><br><span class="line"><span class="comment">// 获取列表每项的颜色值</span></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$color</span> in <span class="variable">$color-list</span> &#123;</span><br><span class="line">  <span class="comment">// 用$index存数据，index表示查询$color-list的全部颜色值</span></span><br><span class="line">  <span class="variable">$index</span>: index(<span class="variable">$color-list</span>, <span class="variable">$color</span>);</span><br><span class="line">  <span class="comment">// $index-1这样写会识别成一个变量名</span></span><br><span class="line">  <span class="comment">// $index - 1这样写会识别成减法运算符</span></span><br><span class="line">  <span class="selector-class">.p</span>#&#123;<span class="variable">$index</span> - <span class="number">1</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p0</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffd2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fcbad3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#aa96da</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p3</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a8d8ea</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="function"><a href="#function" class="headerlink" title="@function"></a>@function</h1><ol><li>定义函数<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@function</span> function-name([<span class="variable">$param1</span>, <span class="variable">$param2</span>, ...])&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>@return只允许在@function中使用，并且每个@function必须以@return结束，当遇到@return时，它会立即结束函数并返回其结果<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@function</span> row-cols-width(<span class="variable">$column</span>) &#123;</span><br><span class="line">  <span class="comment">//percentage是用来转换百分比1/1就是100%</span></span><br><span class="line">  <span class="keyword">@return</span> percentage(<span class="number">1</span> / <span class="variable">$column</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">6</span> &#123;</span><br><span class="line">  <span class="selector-class">.row-cols-</span>#&#123;<span class="variable">$i</span>&#125; &gt; * &#123;</span><br><span class="line">    <span class="attribute">width</span>: row-cols-width(<span class="variable">$i</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.row-cols-1</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row-cols-2</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row-cols-3</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">33.3333333333%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row-cols-4</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row-cols-5</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row-cols-6</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">16.6666666667%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>看一些奇淫技巧，按照key进行传参<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@function</span> background-linear-gradient(<span class="variable">$direction</span>, <span class="variable">$start-color</span>, <span class="variable">$end-color</span>: <span class="number">#a8d8ea</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> linear-gradient(<span class="variable">$direction</span>, <span class="variable">$start-color</span>, <span class="variable">$end-color</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  <span class="comment">// 默认参数不说了，都懂，主要看传递参数，位置顺序无所谓，返回结果时自动排序</span></span><br><span class="line">  <span class="attribute">background-image</span>: background-linear-gradient(<span class="variable">$start-color</span>: <span class="number">#aa96da</span>, <span class="variable">$direction</span>: to right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#aa96da</span>, <span class="number">#a8d8ea</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>剩余参数几乎跟js一样，定义方式<code>$name...</code>，同样是放在参数末尾，以…形式接受剩余的参数；我的WebStorm编辑器在这里会有小小bug，<code>width: min($padding...)</code>里面加了变量无法编译，换成VSCode解决了；另外，计算变量最小、最大值要加上…不然会报错<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@function</span> lists(<span class="variable">$ulan</span>...)&#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$ulan</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="variable">$b</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="variable">$c</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="variable">$d</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="variable">$padding</span>: <span class="number">50px</span>, <span class="number">30px</span>, <span class="number">80px</span>, <span class="number">30px</span>;</span><br><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: lists(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>);  <span class="comment">// 10px, 20px, 30px, 40px</span></span><br><span class="line">  <span class="attribute">width</span>: min(<span class="variable">$padding</span>...);        <span class="comment">// 30px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>@mixin和@function区别，@mixin也能通过参数传值，主要用在重复使用上，而@function用于内部计算</li></ol><h1 id="三元条件函数if"><a href="#三元条件函数if" class="headerlink" title="三元条件函数if"></a>三元条件函数if</h1><ol><li>写法<code>if($condition, $if-true, $if-false)</code></li><li>判断$condition，如果条件成立，则返回$if-true的结果，如果条件不成立，则返回$if-false的结果<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$theme</span>: <span class="string">&#x27;light&#x27;</span>;</span><br><span class="line"><span class="selector-class">.p1</span>&#123;</span><br><span class="line">  <span class="keyword">@if</span>(<span class="variable">$theme</span> == <span class="string">&#x27;light&#x27;</span>) &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#aa96da</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#a8d8ea</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p2</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: if(<span class="variable">$theme</span>==<span class="string">&#x27;light&#x27;</span>, <span class="number">#aa96da</span>, <span class="number">#a8d8ea</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#aa96da</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#aa96da</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="use也称作模块"><a href="#use也称作模块" class="headerlink" title="@use也称作模块"></a>@use也称作模块</h1><ol><li>从其他scss样式表加载mixin，function和变量，并将来自多个样式表的css组合在一起，@use加载的样式表被称为”模块”，多次引入只包含一次；@use也可以看作是对@import的增强</li></ol><h2 id="use和-import的区别"><a href="#use和-import的区别" class="headerlink" title="@use和@import的区别"></a>@use和@import的区别</h2><ol><li><p>两者重复引入相同文件，@use首先会报错，给重复文件重新命名，就不会报错，接着看合成文件，不会出现相同样式<br>_test01.scss文件</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test01</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_test02.scss文件</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test02</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>css.scss文件</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@use</span> <span class="string">&quot;test01&quot;</span>;</span><br><span class="line"><span class="comment">// 引入相同文件</span></span><br><span class="line"><span class="keyword">@use</span> <span class="string">&quot;test02&quot;</span> as t2-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">@use</span> <span class="string">&quot;test02&quot;</span> as t2-<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test01</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.test02</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@import不会报错，但合成文件会出现重复样式</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;test01&quot;</span>;</span><br><span class="line"><span class="comment">// 引入相同文件</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;test02&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;test02&quot;</span>;</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test01</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.test02</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.test02</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用方式也不同，@use调用某个文件需要加上某个文件名，@import直接用就完事；由于篇幅太长，就不写了，直接使用其他文件定义好的变量与方法<br>@use写法</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@use</span> <span class="string">&quot;test01&quot;</span>;</span><br><span class="line"><span class="keyword">@use</span> <span class="string">&quot;test02&quot;</span> as t2-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">@use</span> <span class="string">&quot;test02&quot;</span> as t2-<span class="number">2</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: test01.<span class="variable">$font-size</span>;</span><br><span class="line">  <span class="comment">//尽管是同一个文件使用方法，但因为取了别名，允许重复样式出现</span></span><br><span class="line">  <span class="keyword">@include</span> t2-<span class="number">1</span>.base(<span class="number">#fff</span>);   <span class="comment">// color: #fff;</span></span><br><span class="line">  <span class="keyword">@include</span> t2-<span class="number">2</span>.base(<span class="number">#000</span>);   <span class="comment">// color: #000;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@import写法</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;test01&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;test02&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;test02&quot;</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$font-size</span>;</span><br><span class="line">  <span class="keyword">@include</span> base(<span class="number">#fff</span>);   <span class="comment">// color: #fff;</span></span><br><span class="line">  <span class="keyword">@include</span> base(<span class="number">#000</span>);   <span class="comment">// color: #000;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写默认值<code>@use &#39;opinionated&#39; with ($black: #333);</code></p></li></ol><h1 id="forward也称作导出"><a href="#forward也称作导出" class="headerlink" title="@forward也称作导出"></a>@forward也称作导出</h1><ol><li>介绍：通过@forward加载一个模块的成员，并将这些成员当作自己的成员对外暴露出去，类似于es6的export，通常用于跨多个文件组织scss库</li><li>区别：@use和@forward很像，只是@use不能转发，而@forward可以；通常@forward用来整合文件，暴露出去，自身含有样式代码是取不到变量的，最好不要在里边写样式；@use可以在里面写样式</li><li>命名：通常用<code>文件名-*</code>来定义名字，嫌麻烦用简写也可以，使用方式跟@use一样，不再重复写一次了<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@forward &#x27;user/global&#x27; as global-*;</span></span><br><span class="line"><span class="keyword">@forward</span> <span class="string">&#x27;user/global&#x27;</span> as g-*;</span><br></pre></td></tr></table></figure></li><li>@forward和@use同时使用，建议@forward放上面，@use放下面<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@forward</span> <span class="string">&#x27;user/global&#x27;</span> as g-*;</span><br><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;user/global&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>利用hide，可以对部分进行屏蔽<br><code>@forward &quot;src/list&quot; hide list-reset, $horizontal-list-gap</code></li><li>重写默认值，末尾需要带上<code>!default</code><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@forward</span> <span class="string">&#x27;library&#x27;</span> with (</span><br><span class="line">  <span class="variable">$black</span>: <span class="number">#222</span> !default,</span><br><span class="line">  <span class="variable">$border-radius</span>: <span class="number">0.1rem</span> !default</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li>@import、@use、@forward总结<ul><li>@import别用了，你也看到弊端了，它会污染文件</li><li>尽量的使用@use和@forward</li><li>通常用@forward整合转发，这个过程可以屏蔽部分样式，也可以修改默认值</li><li>接着使用@use引入由@forward转发的文件</li></ul></li></ol><h1 id="at-root嵌套规则独立到外层"><a href="#at-root嵌套规则独立到外层" class="headerlink" title="@at-root嵌套规则独立到外层"></a>@at-root嵌套规则独立到外层</h1><ol><li>很单纯地进行了分离，没有任何覆盖和计算，这个功能很微妙，我想多数情况会用不到<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.outside</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: medium;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="keyword">@at-root</span> .inside &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: small;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0.2rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.inside2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: x-small;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>编译后<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.outside</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: medium;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inside</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: small;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0.2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.outside</span> <span class="selector-class">.inside2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: x-small;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>个人体验来说，webstorm写scss不太理想，vscode比较好</li><li>编译时生成兼容前缀，你需要进行配置，没有生效的代码行会以灰色展现</li><li>Autoprefixer插件也能实现生成兼容前缀</li><li>不要忘了，用scss主要是方便维护，尽量写可维护的代码</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>epub电子书制作总结</title>
      <link href="/archives/4c33d5ee.html"/>
      <url>/archives/4c33d5ee.html</url>
      
        <content type="html"><![CDATA[<h1 id="epub简介"><a href="#epub简介" class="headerlink" title="epub简介"></a>epub简介</h1><p>简单点说，epub就是电子书，这个电子书有封面、插图、目录索引，而你只需要一款阅读器打开它。</p><h1 id="对比txt、word、pdf、markdown优势在哪？"><a href="#对比txt、word、pdf、markdown优势在哪？" class="headerlink" title="对比txt、word、pdf、markdown优势在哪？"></a>对比txt、word、pdf、markdown优势在哪？</h1><ol><li>我喜欢把带有封面的电子书放到我的书柜上，但txt、word、markdown没有封面，下面是书柜展示：<img src="/img/cover_epub.webp" alt=""></li><li>也就是说，我想制作带有封面的电子书放到我的书柜上，只剩下pdf、epub选择了；通常我在手机与电脑设备上阅读轻小说，如果是pdf格式的电子书，它在手机上的阅读体验相当糟糕，你需要不停地放大缩小来看每一段文字，请恕我拒绝(´･ω･&#96;)，相反epub在手机设备上体验极好，可以随意设置字体大小，还能看图，就决定用epub来制作电子书了</li></ol><h1 id="电子阅读器"><a href="#电子阅读器" class="headerlink" title="电子阅读器"></a>电子阅读器</h1><ol><li>我喜欢美丽的事物，最好书柜上的图书能展示封面，另外我很讨厌丑的阅读器，目前只用过AppleBooks(苹果设备专有的阅读器)、NeatReader(国人制作全平台epub阅读器)，下面是AppleBooks展示：<img src="/img/content_epub_reader.webp" alt=""></li><li>Sigil和Calibre这两款是制作epub的工具，自然也能读取epub电子书，但它们不适合当书柜，给出的理由是不优雅。我知道看这篇文章的读者，有部分是实用主义（能用就行），你们喜欢什么阅读器就用什么，这点没什么好争议，不就是个阅读器嘛，有啥好争的，爱用啥就用啥</li><li>后面我制作的epub，只会在AppleBooks、NeatReader阅读器上测试</li></ol><h1 id="白嫖的书出了问题与解决方案"><a href="#白嫖的书出了问题与解决方案" class="headerlink" title="白嫖的书出了问题与解决方案"></a>白嫖的书出了问题与解决方案</h1><ol><li>老实说，我不想做epub电子书，喜欢白嫖别人做好的，然而下载的轻小说，在AppleBooks阅读器上好多问题啊，第一个问题是封面模糊，但图片能好好地显示，问题出在哪，我也不懂<img src="/img/content_epub_imgFuzzy.webp" alt=""></li><li>第二个问题是插图无法显示，当你使用Sigil工具打开电子书，你会惊讶的发现存放Images的文件夹只剩下cover（封面），如果是用Calibre工具打开电子书，全部图片都在呢，也就是说，因为兼容性问题而导致Sigil和AppleBooks无法显示插图<img src="/img/content_epub_compatible.webp" alt=""><img src="/img/content_epub_cover.webp" alt="" width="50%" height="50%"></li><li>解决方案是换成NeatReader阅读器，它的兼容性比较好，能正常的显示图片；如果你希望继续在AppleBooks上阅读这本轻小说，只能老老实实手动修改了，当然也存在我不知道的修复工具与方法，这点欢迎大佬指出<img src="/img/content_epub_normal.webp" alt=""></li></ol><h1 id="制作epub电子书"><a href="#制作epub电子书" class="headerlink" title="制作epub电子书"></a>制作epub电子书</h1><ol><li>前面科普完后，终于轮到重头戏登场。个人倾向白嫖，能不自己做就不自己做，除了真的没有或找不到，直到我的收集癖爆发开始制作epub！哦，还有件事忘了说，既然能在线观看，干嘛做这种费力不讨好的事？你知道吗，网上有个称号很适合你们——杠精，只要不违法，别人爱做什么就做什么，关你什么事<blockquote><p>防翻译炎上声明，本总结只讲epub制作经历，不会分享任何自制epub，请大佬们别找我要资源了</p></blockquote></li><li>首先是获取文本和图片，网上有很多教程，这里不细说了，这次做个瑟瑟的epub(滑稽)<img src="/img/content_epub_world.webp" alt=""></li><li>繁体字转换为简体字，个人用word文档来处理，它只会修改文字，而不会修改引号；网上在线转换，可能会把原本「」修改成””<img src="/img/content_epub_changeZh.webp" alt=""></li><li>去除多余空行，如果是用敲代码的编辑器，可以用正则表达式，但考虑到萌新，以word文档举例</li></ol><ul><li>按下Ctrl+H出现查找与替换功能</li><li>查找栏输入^p^p，替换栏输入^p</li><li>上面的意思是把两个段落替换成一个段落</li><li>点击查找 &gt; 点击全部替换</li><li>明明文本有多余空行，为啥却见不到，再点击查找<img src="/img/content_epub_remove.webp" alt=""><img src="/img/content_epub_textResult.webp" alt=""></li></ul><ol start="5"><li>下载安装typora软件，并给它装上Pandoc插件，来说说它们是干嘛的；typora负责创建markdown文件，用来存放word文档中的文字；原本的typora软件没有导出epub功能，而Pandoc插件则是扩展typora导出功能，这样就能把markdown文件转换成epub文件，记得修改下typora的设置<img src="/img/content_epub_typoraSetup.webp" alt=""></li><li>创建markdown文件，名字随意，再把word文档内容Ctrl+C和Ctrl+V粘贴进来，这个过程请不要选”粘贴为纯文本”，它会导致生成的epub中的文字，全部聚在一个p标签内，不方便设置css样式，不清楚p标签和css样式是啥，你可能需要补充点前端知识</li><li>设置下标题，相当于设置epub的目录。输入<code># 简介</code>，typora会以h1标签方式生成标题，如果你不能理解这句话意思，可以到markdown官网查看基本语法，每个h1标签有单独的xhtml页面<img src="/img/content_epub_h1.webp" alt=""></li><li>插入图片，typora与epub中插入图片，本质上是一样，只不过epub插入图片需要前端知识，了解个几分钟就懂了，换成typora只需要拖动图片到相应位置，自动生成图片，当然也可以批量拖动，话说图片真够瑟瑟的啊<img src="/img/content_epub_img.webp" alt=""></li><li>全部搞定后，用typora导出epub，这下能见到每个h1标签对应的xhtml页面<img src="/img/content_epub_page.webp" alt=""></li></ol><h1 id="修改epub电子书"><a href="#修改epub电子书" class="headerlink" title="修改epub电子书"></a>修改epub电子书</h1><ol><li>如果你能忍受瑕疵，其实上面生成的epub也足够了，只不过会缺少封面，目录索引多了些奇奇怪怪文字，还有文字不够美观等问题……这里开始是html+css知识了，估计小白看到这会很懵逼，如果你希望自己做的epub会稍微美一些，可以适当补充html+css知识</li><li>添加封面步骤：工具 &gt; 添加封面 &gt; 选中图片点OK</li><li>如果你没有任何图片，目光移到标题为”图书浏览器”的窗口，就在屏幕最左侧🫲，鼠标右键images添加现有文件</li><li>修改目录索引奇怪的文字，继续看向”图书浏览器”的窗口，打开toc.ncx，删除会让你感到奇怪的标签，比如下面这段，它是你markdown转换epub自带的，删除吧<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;navPoint id=&quot;navPoint-0&quot;&gt;</span><br><span class="line">  &lt;navLabel&gt;</span><br><span class="line">    &lt;text&gt;Untitled.md&lt;/text&gt;</span><br><span class="line">  &lt;/navLabel&gt;</span><br><span class="line">  &lt;content src=&quot;text/title_page.xhtml&quot; /&gt;</span><br><span class="line">&lt;/navPoint&gt;</span><br></pre></td></tr></table></figure></li><li>修改阅读时奇怪的文字，打开title_page.xhtml，删除掉这段废文本；检查其他xhtml，看有没有废文本，有的话继续删，其实彩页也有，既然xhtml生成了，那么h1标签的彩页也可以不要了<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;section epub:type=&quot;titlepage&quot; class=&quot;titlepage&quot;&gt;</span><br><span class="line">  &lt;h1 class=&quot;title&quot;&gt;Untitled.md&lt;/h1&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure></li><li>修改css样式，看向”图书浏览器”的窗口的Styles文件夹，这个文件夹只有一个css文件，打开它在末尾添加下面代码<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">h1&#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">p&#123;</span><br><span class="line">  text-indent: 2em;</span><br><span class="line">&#125;</span><br><span class="line">img&#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>欣赏劳动成果吧^ω^<img src="/img/content_epub_novel01.webp" alt=""><img src="/img/content_epub_novel02.webp" alt=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>uni-app框架学习笔记</title>
      <link href="/archives/3c28277d.html"/>
      <url>/archives/3c28277d.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h1><ol><li>官网介绍：uni-app是一个使用Vue.js开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信&#x2F;支付宝&#x2F;百度&#x2F;头条&#x2F;飞书&#x2F;QQ&#x2F;快手&#x2F;钉钉&#x2F;淘宝）、快应用等多个平台</li><li>uni-app作为跨平台一种解决方案，有预感坑会非常多，了解如何写代码和解决bug即可；官方文档很杂乱，可能是因为杂乱关系，部分文档未能及时更新，没办法保证全部API可以使用；官方推荐的教学视频，也不推荐看，理由是视频录制时间为19～20年，跟现在版本差别很大，硬要看也不是不行，尽量选年份离现在比较近的</li><li>学习前需要的知识点<ul><li>html+css+js</li><li>vue</li><li>微信小程序</li><li>后端（不会也没关系）</li><li>scss（另一个名字sass）</li></ul></li></ol><h1 id="项目规范"><a href="#项目规范" class="headerlink" title="项目规范"></a>项目规范</h1><h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><ol><li>为了实现多端兼容，综合考虑编译速度、运行性能等因素，uni-app约定了如下开发规范<ul><li>页面文件遵循 Vue 单文件组件 (SFC) 规范(opens new window)</li><li>组件标签靠近小程序规范</li><li>接口能力（JS API）靠近微信小程序规范，但需将前缀 wx 替换为 uni</li><li>数据绑定及事件处理同 Vue.js 规范，同时补充了App及页面的生命周期</li><li>为兼容多端运行，建议使用flex布局进行开发</li></ul></li><li>单位rpx，开发以750rpx(100%)为标准</li><li>官方目录规范<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">┌─uniCloud              云空间目录，阿里云为uniCloud-aliyun,腾讯云为uniCloud-tcb</span><br><span class="line">│─components            符合vue组件规范的uni-app组件目录</span><br><span class="line">│  └─comp-a.vue         可复用的a组件</span><br><span class="line">├─hybrid                App端存放本地html文件的目录</span><br><span class="line">├─platforms             存放各平台专用页面的目录</span><br><span class="line">├─pages                 业务页面文件存放的目录</span><br><span class="line">│  ├─index</span><br><span class="line">│  │  └─index.vue       index页面</span><br><span class="line">│  └─list</span><br><span class="line">│     └─list.vue        list页面</span><br><span class="line">├─static                存放应用引用的本地静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此</span><br><span class="line">├─uni_modules           存放[uni_module](/uni_modules)。</span><br><span class="line">├─wxcomponents          存放小程序组件的目录</span><br><span class="line">├─nativeplugins         App原生插件</span><br><span class="line">├─unpackage             非工程代码，一般存放运行或发行的编译结果</span><br><span class="line">├─main.js               Vue初始化入口文件</span><br><span class="line">├─App.vue               应用配置，用来配置App全局样式以及监听 应用生命周期</span><br><span class="line">├─manifest.json         配置应用名称、appid、logo、版本等打包信息</span><br><span class="line">├─pages.json            配置页面路由、导航条、选项卡等页面类信息</span><br><span class="line">└─uni.scss              这里是uni-app内置的常用样式变量 </span><br></pre></td></tr></table></figure></li><li>个人目录规范<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">components  组件目录</span><br><span class="line">  uni-ui  官方ui</span><br><span class="line">  stencil 模版组件</span><br><span class="line">  feature 功能组件</span><br><span class="line">static  资源目录</span><br><span class="line">pages   页面目录</span><br><span class="line">data    测试数据目录</span><br><span class="line">mixins  配置目录</span><br><span class="line">common  公共目录</span><br></pre></td></tr></table></figure></li></ol><h1 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h1><ol><li>新建uni-app项目 &gt; 默认模板 &gt; vue3.0版本</li><li>项目名随意，仅用来学习</li></ol><h2 id="全局样式配置"><a href="#全局样式配置" class="headerlink" title="全局样式配置"></a>全局样式配置</h2><ol><li>项目内新建common文件夹 &gt; css文件夹 &gt; ulan-cms.scss<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ulan-font-size-base</span>: <span class="number">28</span>rpx;</span><br></pre></td></tr></table></figure></li><li>打开uni.scss文件，导入ulan-cms.scss，@表示根目录<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 引入全局样式 */</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;@/common/css/ulan-cms.scss&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>pages&#x2F;index&#x2F;index.vue，<code>&lt;style lang=&quot;scss&quot;&gt;</code>添加scss语法，修改title字体<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.title &#123;</span><br><span class="line">  font-size: $ulan-font-size-base;</span><br><span class="line">  color: #8f8f94;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>运行到浏览器 &gt; Chrome，如果你的写法没问题但报错了，控制台选停止运行，再点击运行</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序学习笔记</title>
      <link href="/archives/3c28277b.html"/>
      <url>/archives/3c28277b.html</url>
      
        <content type="html"><![CDATA[<h1 id="小程序特点"><a href="#小程序特点" class="headerlink" title="小程序特点"></a>小程序特点</h1><ol><li>用户不需要下载安装，点开即用，用完即走，实现用户当前需求的工具</li><li>运行环境不同：网页运行在浏览器环境中，小程序运行在微信环境中</li><li>API不同：小程序无法调用DOM和BOM的API，但小程序可以调用微信环境提供的API，例如：地理位置、扫码、支付</li></ol><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><ol><li>默认项目文件<ul><li>pages：用来存放所有小程序页面，以单独文件夹存在</li><li>utils：用来存放工具性质的模块</li><li>app.js小程序项目的入口文件</li><li>app.json：小程序项目的全局配置文件</li><li>app.wxss：小程序项目的全局样式文件</li><li>project.config.json：项目的配置文件</li><li>sitemap.json：用来配置小程序及其页面是否允许被微信索引</li></ul></li></ol><h1 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a>常用组件</h1><ol><li>view：类似于HTML中的div，是一个块级元素</li><li>block：类似于Vue中的template，是一个占位符</li><li>scroll-view：滚动列表效果</li><li>swiper和swiper-item：轮播图容器组件和轮播图item组件</li><li>text：显示文字，selectable属性实现长按选中文本</li><li>rich-text：通过nodes属性把HTML字符串渲染为对应的UI结构<br><code>&lt;rich-text nodes=&quot;&lt;h1 style=&#39;color:lightcoral;&#39;&gt;标题&lt;/h1&gt;&quot;&gt;&lt;/rich-text&gt;</code></li><li>button：按钮组件，通过open-type属性可以调用微信提供的各种功能</li><li>image：图片组件，mode属性用来指定图片的裁剪和缩放模式；默认宽300px，高240px</li></ol><h1 id="样式介绍"><a href="#样式介绍" class="headerlink" title="样式介绍"></a>样式介绍</h1><h2 id="rpx尺寸单位"><a href="#rpx尺寸单位" class="headerlink" title="rpx尺寸单位"></a>rpx尺寸单位</h2><ol><li>rpx是微信小程序独有的，用来解决屏幕适配的尺寸单位；实现原理rpx把所有设备的屏幕，在宽度上等分为750份（当前屏幕总宽度为750rpx）</li><li>rpx与px之间的单位换算，比如：屏幕宽度为375px，共有750物理像素，等分750rpx<ul><li>750rpx &#x3D; 375px &#x3D; 750物理像素</li><li>1rpx &#x3D; 0.5px &#x3D; 1物理像素</li></ul></li></ol><table><thead><tr><th>设备</th><th>rpx换算px（屏幕宽度&#x2F;750）</th><th>px换算rpx（750&#x2F;屏幕宽度）</th></tr></thead><tbody><tr><td>iPhone5</td><td>1rpx &#x3D; 0.42px</td><td>1px &#x3D; 2.34rpx</td></tr><tr><td>iPhone6</td><td>1rpx &#x3D; 0.5px</td><td>1px &#x3D; 2rpx</td></tr><tr><td>iPhone6 Plus</td><td>1rpx &#x3D; 0.552px</td><td>1px &#x3D; 1.81rpx</td></tr></tbody></table><ol start="3"><li>官方建议：开发微信小程序时，设计师可以用iPhone6作为视觉稿的标准</li></ol><h2 id="导入样式"><a href="#导入样式" class="headerlink" title="导入样式"></a>导入样式</h2><p>例如：根目录下创建common公共样式，然后在index.wxss导入common.wxss<br><img src="/img/content_commonStyle.webp"></p><h2 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a>全局样式</h2><p>根目录有个app.wxss文件，是专门用来写全局样式，不需要导入</p><h2 id="局部样式"><a href="#局部样式" class="headerlink" title="局部样式"></a>局部样式</h2><p>页面的.wxss文件中定义的样式为局部样式，只作用于当前页面</p><h1 id="修改data值"><a href="#修改data值" class="headerlink" title="修改data值"></a>修改data值</h1><p>看起来很像vue，但又有点不一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;数字：&#123;&#123;count&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;button type=&quot;primary&quot; bindtap=&quot;changeCount&quot;&gt;点击修改&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  count: 1</span><br><span class="line">&#125;,</span><br><span class="line">changeCount()&#123;</span><br><span class="line">  this.setData(&#123;</span><br><span class="line">    count: this.data.count + 1</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h1><h2 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h2><ol><li>bindtap：类似于vue中的@click，在微信里与data数据同一层</li><li>bindinput：用来获取输入框中的文本，通过<code>e.detail.value</code>获取文本数据</li></ol><h2 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h2><ol><li>小程序中的事件传参比较特殊，不能在绑定事件同时为事件处理函数传递参数；bindtap属性无法传值，相当于调用名称为btnhandler(123)的事件处理函数<br><code>&lt;button bindtap=&quot;btnhandler(123)&quot;&gt;事件传参&lt;/button&gt;</code></li><li>组件提供data-xxx自定义属性传参，其中xxx表示参数名；info会被解析为参数名，数值2会被解析为参数值<br><code>&lt;button bindtap=&quot;btnHandler&quot; data-info=&quot;&#123;&#123;2&#125;&#125;&quot;&gt;事件传参&lt;/button&gt;</code></li><li>在事件处理函数中，通过<span style="color: red">e.target.dataset.参数名</span>即可获取到具体参数的值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=&quot;primary&quot; bindtap=&quot;btnHandler&quot; data-info=&quot;&#123;&#123;2&#125;&#125;&quot;&gt;事件传参&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">btnHandler(e)&#123;</span><br><span class="line">  console.log(e.target.dataset.info)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="获取文本数据"><a href="#获取文本数据" class="headerlink" title="获取文本数据"></a>获取文本数据</h2><ol><li>bindinput输入文本时触发，通过<code>e.detail.value</code>获取文本数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; bindinput=&quot;inputHandler&quot;/&gt;</span><br><span class="line"></span><br><span class="line">inputHandler(e)&#123;</span><br><span class="line">  console.log(e.detail.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>绑定data数据，输入文本的同时修改data数据；value默认值动态绑定msg，输入文本时触发inputHandler方法，msg修改成文本内容<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value=&quot;&#123;&#123;msg&#125;&#125;&quot; bindinput=&quot;inputHandler&quot;/&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  msg: &#x27;Hi, &#x27;</span><br><span class="line">&#125;,</span><br><span class="line">inputHandler(e)&#123;</span><br><span class="line">  this.setData(&#123;</span><br><span class="line">    msg: e.detail.value</span><br><span class="line">  &#125;)</span><br><span class="line">  console.log(this.data.msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><ol><li>使用<code>wx:if=&quot;&#123;&#123;condition&#125;&#125;&quot;</code>来判断是否需要渲染该代码块<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:if=&quot;&#123;&#123;sex === 1&#125;&#125;&quot;&gt;男&lt;/view&gt;</span><br><span class="line">&lt;view wx:elif=&quot;&#123;&#123;sex === 2&#125;&#125;&quot;&gt;女&lt;/view&gt;</span><br><span class="line">&lt;view wx:else&gt;保密&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li>block标签是占位符，不显示在页面中，实现多个组件显示隐藏<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;block wx:if=&quot;&#123;&#123;true&#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;view&gt;你好&lt;/view&gt;</span><br><span class="line">  &lt;view&gt;幽蓝&lt;/view&gt;</span><br><span class="line">&lt;/block&gt;</span><br></pre></td></tr></table></figure></li><li>hidden属性类似v-show，同样起到显示隐藏效果，它和if区别在于生成原理上不同，if是动态创建或移除元素，hidden是切换样式(display:none&#x2F;block)控制元素显示隐藏，频繁切换hidden性能更好<br><code>&lt;view hidden=&quot;&#123;&#123;true&#125;&#125;&quot;&gt;条件为true隐藏，条件为false显示&lt;/view&gt;</code></li></ol><h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><ol><li>wx:for循环渲染组件，默认item表示项的值，index表示索引<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;brand&#125;&#125;&quot;&gt;</span><br><span class="line">  品牌：&#123;&#123;item&#125;&#125;，索引：&#123;&#123;index&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  brand: [&#x27;苹果&#x27;, &#x27;华为&#x27;, &#x27;小米&#x27;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改默认item、index名字<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;brand&#125;&#125;&quot; wx:for-item=&quot;value&quot; wx:for-index=&quot;i&quot;&gt;</span><br><span class="line">  品牌：&#123;&#123;value&#125;&#125;，索引：&#123;&#123;i&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li>wx:key用来提高wx:for渲染性能，vue中不写:key会报错，小程序中不写wx:key会报警告<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;brand&#125;&#125;&quot; wx:key=&quot;index&quot;&gt;</span><br><span class="line">  品牌：&#123;&#123;item.name&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  brand: [</span><br><span class="line">    &#123;name: &#x27;华为&#x27;&#125;,</span><br><span class="line">    &#123;name: &#x27;小米&#x27;&#125;,</span><br><span class="line">    &#123;name: &#x27;魅族&#x27;&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h1><h2 id="app-json"><a href="#app-json" class="headerlink" title="app.json"></a>app.json</h2><ol><li>根目录app.json文件是小程序的全局配置文件，常用配置项：<ul><li>pages：记录当前小程序所有页面的存放路径</li><li>window：全局设置小程序窗口的外观</li><li>tabBar：设置小程序底部的tabBar效果</li><li>style：是否启动新版的组件样式</li></ul></li></ol><h2 id="window常用配置项"><a href="#window常用配置项" class="headerlink" title="window常用配置项"></a>window常用配置项</h2><table><thead><tr><th>属性名</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>navigationBarTitleText</td><td>Weixin</td><td>导航栏标题文字内容</td></tr><tr><td>navigationBarBackgroundColor</td><td>#fff</td><td>导航栏背景颜色</td></tr><tr><td>navigationBarTextStyle</td><td>black</td><td>导航栏标题颜色，仅支持black &#x2F; white</td></tr><tr><td>backgroundColor</td><td>#fff</td><td>下拉窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>dark</td><td>下拉loading的样式，仅支持dark &#x2F; light</td></tr><tr><td>enablePullDownRefresh</td><td>false</td><td>是否全局开启下拉刷新</td></tr><tr><td>onReachBottomDistance</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位为px</td></tr></tbody></table><h2 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h2><ol><li><p>tabBar用于多页面快速切换，类似早期智能手机的底部栏，有返回、首页、后台等按钮；tabBar中只能配置2～5tab页签；渲染顶部tabBar时，不显示icon，只显示文本</p></li><li><p>tabBar6个组成部分</p><ul><li>backgroundColor：tabBar的背景色</li><li>borderStyle：tabBar上边框的颜色</li><li>selectedIconPath：选中时的图片路径</li><li>iconPath：未选中时的图片路径</li><li>selectedColor：tab上的文字选中时的颜色</li><li>color：tab上文字的默认（未选中）颜色</li></ul></li><li><p>tabBar配置项</p><table><thead><tr><th>属性名</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>position</td><td>bottom</td><td>tabBar的位置，仅支持bottom &#x2F; top</td></tr><tr><td>borderStyle</td><td>black</td><td>tabBar的上边框的颜色，仅支持black &#x2F; white</td></tr><tr><td>color</td><td></td><td>tab上文字的默认（未选中）颜色</td></tr><tr><td>selectedColor</td><td></td><td>tab上文字选中时颜色</td></tr><tr><td>backgroundColor</td><td></td><td>tabBar的背景色</td></tr><tr><td>list</td><td></td><td>必填，标签页的列表，2～5个tab页签</td></tr></tbody></table></li><li><p>tab项配置选项</p><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>position</td><td>必填，页面路径，页面必须在pages中预先定义</td></tr><tr><td>borderStyle</td><td>必填，tab上显示的文字</td></tr><tr><td>color</td><td>未选中时的图标路径；当postion为top时，不显示icon</td></tr><tr><td>selectedColor</td><td>选中时的图标路径；当postion为top时，不显示icon</td></tr></tbody></table></li><li><p>tabBar写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;pages&quot;:[</span><br><span class="line">    &quot;pages/index/index&quot;,</span><br><span class="line">    &quot;pages/test/test&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;tabBar&quot;: &#123;</span><br><span class="line">    &quot;list&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;pagePath&quot;: &quot;pages/index/index&quot;,</span><br><span class="line">        &quot;text&quot;: &quot;index&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;pagePath&quot;: &quot;pages/test/test&quot;,</span><br><span class="line">        &quot;text&quot;: &quot;test&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tabBar想要展示的页面，必须放在pages数组内的顶部，否则会显示失败</p></blockquote></li></ol><h1 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h1><ol><li>页面配置个人称它为局部配置，新生成的页面，文件夹自带.json文件，它是当前页面设置局部配置的地方</li><li>常用配置项<table><thead><tr><th>属性名</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>#000</td><td>当前页面导航栏背景颜色，如#000</td></tr><tr><td>navigationBarTextStyle</td><td>black</td><td>当前页面导航栏标题颜色，仅支持black&#x2F;white</td></tr><tr><td>navigationBarTitleText</td><td></td><td>当前页面导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>#fff</td><td>当前页面下拉窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>dark</td><td>当前页面下拉loading的样式，仅支持dark&#x2F;light</td></tr><tr><td>enablePullDownRefresh</td><td>false</td><td>是否为当前页面开启下拉刷新的效果</td></tr><tr><td>onReachBottomDistance</td><td>50</td><td>页面上拉触底时间触发时距页面底部距离，单位为px</td></tr></tbody></table></li></ol><h1 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h1><h2 id="网络数据请求的限制"><a href="#网络数据请求的限制" class="headerlink" title="网络数据请求的限制"></a>网络数据请求的限制</h2><ol><li>出于安全性方面的考虑，小程序官方对数据接口的请求做出如下两个限制：<ul><li>只能请求HTTPS类型的接口</li><li>必须将接口的域名添加到信任列表中</li></ul></li><li>配置request合法域名：登入微信小程序管理后台 &gt; 开发 &gt; 开发设置 &gt; 服务器域名 &gt; 修改request<ul><li>域名只支持https协议</li><li>域名不能使用IP地址或localhost</li><li>域名必须经过ICP备案</li><li>服务器域名一个月内最多可申请5次修改</li></ul></li></ol><h2 id="发送get请求"><a href="#发送get请求" class="headerlink" title="发送get请求"></a>发送get请求</h2><p>调用微信小程序提供的wx.request()方法，示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wx.request(&#123;</span><br><span class="line">  url: &#x27;https://www.xxxxx.com/api/get&#x27;, // 请求的接口地址，必须基于https协议</span><br><span class="line">  method: &#x27;GET&#x27;,</span><br><span class="line">  data: &#123; // 发送到服务器的数据</span><br><span class="line">    name: &#x27;ulan&#x27;,</span><br><span class="line">    age: 9</span><br><span class="line">  &#125;,</span><br><span class="line">  success: (res) =&gt; &#123; // 请求成功之后的回调函数</span><br><span class="line">    console.log(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="发送post请求"><a href="#发送post请求" class="headerlink" title="发送post请求"></a>发送post请求</h2><p>修改上面method为post请求即可<code>method: &#39;POST&#39;</code></p><h2 id="页面刚加载时请求数据"><a href="#页面刚加载时请求数据" class="headerlink" title="页面刚加载时请求数据"></a>页面刚加载时请求数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 生命周期函数，监听页面加载</span><br><span class="line">onLoad()&#123;</span><br><span class="line">  this.getInfo()</span><br><span class="line">  this.postInfo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getInfo()&#123;...&#125;</span><br><span class="line">postInfo()&#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="关于跨域和Ajax"><a href="#关于跨域和Ajax" class="headerlink" title="关于跨域和Ajax"></a>关于跨域和Ajax</h2><ol><li>跨域问题只存在于浏览器，由于小程序宿主环境是微信客户端，所以小程序不存在跨域问题</li><li>Ajax的核心依赖于浏览器中的XMLHttpRequest这个对象，由于小程序宿主环境是微信客户端，所以小程序不能叫做”发起Ajax请求”，而是叫做”发起网络数据请求”。</li></ol><h1 id="页面导航"><a href="#页面导航" class="headerlink" title="页面导航"></a>页面导航</h1><ol><li>声明式导航：声明一个<navigator>导航组件，点击<navigator>组件实现页面跳转</li><li>编程式导航：调用小程序的导航API</li></ol><h2 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a>声明式导航</h2><ol><li>navigator组件跳转到指定的tabBar页面时，需要指定url属性和open-type属性<ul><li>url表示要跳转的页面的地址，必须以&#x2F;开头</li><li>open-type表示跳转的方式，必须为switchTab<br><code>&lt;navigator url=&quot;/pages/index/index&quot; open-type=&quot;switchTab&quot;&gt;导航到主页面&lt;/navigator&gt;</code></li></ul></li><li>navigator组件跳转到非tabBar页面，操作跟上面相同，只不过open-type需要改成navigate<br><code>&lt;navigator url=&quot;/pages/log/log&quot; open-type=&quot;navigate&quot;&gt;导航到log页面&lt;/navigator&gt;</code><blockquote><p>为了简便，导航到非tabBar页面，open-type&#x3D;”navigate”属性可以省略</p></blockquote></li><li>navigator后退页面，open-type指定navigateBack，delta后退的层级<br><code>&lt;navigator open-type=&quot;bavigateBack&quot; delta=&quot;1&quot;&gt;后退&lt;/navigator&gt;</code><blockquote><p>为了简便，如果只是后退到上一页面，可以省略delta属性，因为默认值就是1</p></blockquote></li></ol><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><ol><li>wx.switchTab方法的属性<ul><li>url：需要跳转的tabBar页面路径，路径后不能带参数</li><li>success：接口调用成功的回调函数</li><li>fail：接口调用失败的回调函数</li><li>complete：接口调用结束的回调函数（成功、失败都会执行）</li></ul></li></ol><p>1.1 导航到tabBar页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button bindtap=&quot;gotoIndex&quot;&gt;跳转到主页&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">gotoIndex()&#123;</span><br><span class="line">  wx.switchTab(&#123;</span><br><span class="line">    url: &#x27;/pages/index/index&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>wx.navigateTo方法的属性<ul><li>url：需要跳转的tabBar页面路径，路径后不能带参数</li><li>success：接口调用成功的回调函数</li><li>fail：接口调用失败的回调函数</li><li>complete：接口调用结束的回调函数（成功、失败都会执行）</li></ul></li></ol><p>2.1 导航到非tabBar页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button bindtap=&quot;gotoLog&quot;&gt;跳转到log页面&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">gotoLog()&#123;</span><br><span class="line">  wx.navigateTo(&#123;</span><br><span class="line">    url: &#x27;/pages/log/log&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>wx.navigateBack方法的属性<ul><li>delta：默认值1，返回的页面数，如果delta大于现有页面数，则返回到首页</li><li>success：接口调用成功的回调函数</li><li>fail：接口调用失败的回调函数</li><li>complete：接口调用结束的回调函数（成功、失败都会执行）</li></ul></li></ol><p>3.1 后退导航</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;button bindtap=&quot;gotoBack&quot;&gt;后退&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">gotoBack()&#123;</span><br><span class="line">  wx.navigateBack()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导航传参"><a href="#导航传参" class="headerlink" title="导航传参"></a>导航传参</h2><ol><li><p>声明式导航传参</p><ul><li>参数与路径之间使用?分隔</li><li>参数键与参数值用&#x3D;相连</li><li>不同参数用&amp;分隔<br><code>&lt;navigator url=&quot;/pages/index/index?name=ulan&amp;age=9&quot;&gt;跳转到主页面&lt;/navigator&gt;</code><br>说明：跳转到主页面，通过?分隔参数，传递name和age</li></ul></li><li><p>编程式导航传参：调用wx.navigateTo()方法跳转页面携带参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button bindtap=&quot;gotoIndex&quot;&gt;跳转到主页面&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">gotoIndex()&#123;</span><br><span class="line">  wx.navigateTo(&#123;</span><br><span class="line">    url: &#x27;/pages/index/index?name=ulan&amp;age=9&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>onLoad事件接收参数，options用来接收参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  // 用来存放参数</span><br><span class="line">  query: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 生命周期函数——监听页面加载</span><br><span class="line">onLoad(options)&#123;</span><br><span class="line">  console.log(options)  // &#123;name: &quot;ulan&quot;, age: 9&#125;</span><br><span class="line">  this.setData(&#123;</span><br><span class="line">    query: options</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="页面事件"><a href="#页面事件" class="headerlink" title="页面事件"></a>页面事件</h1><h2 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h2><ol><li><p>启动下拉刷新两种方式</p><ul><li>全局：app.json的window节点，将enablePullDownRefresh设置为true</li><li>局部：页面的.json配置文件中，将enablePullDownRefresh设置为true<blockquote><p>实际开发中，推荐使用第2种方式，为需要的页面单独开启下拉刷新</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;usingComponents&quot;: &#123;&#125;,</span><br><span class="line">  &quot;enablePullDownRefresh&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>全局或局部.json配置文件中，通过backgroundColor和backgroundTextStyle来配置样式</p><ul><li>backgroundColor：窗口的背景颜色，仅支持16进制的颜色值</li><li>backgroundTextStyle：loading的样式，仅支持dark和light<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;usingComponents&quot;: &#123;&#125;,</span><br><span class="line">  &quot;enablePullDownRefresh&quot;: true,</span><br><span class="line">  &quot;backgroundColor&quot;: &quot;#efefef&quot;,</span><br><span class="line">  &quot;backgroundTextStyle&quot;: &quot;dark&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>onPullDownRefresh监听页面的下拉刷新事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;数字：&#123;&#123;count&#125;&#125;&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  count: 9</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 页面相关事件处理函数，监听用户下拉动作</span><br><span class="line">onPullDownRefresh()&#123;</span><br><span class="line">  this.setData(&#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当处理完下拉刷新后，loading效果会一直显示，不会主动消失。调用wx.stopPullDownRefresh()可以停止当前页面的下拉刷新。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onPullDownRefresh()&#123;</span><br><span class="line">  this.setData(&#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  // 放在最后，当上面指令完成后，停止刷新效果</span><br><span class="line">  wx.stopPullDownRefresh()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="上拉触底"><a href="#上拉触底" class="headerlink" title="上拉触底"></a>上拉触底</h2><ol><li>上拉触底是移动端专有名词，通过手指在屏幕上的上拉滑动操作，加载更多数据的行为</li><li>onReachBottom()监听当前页面的上拉触底事件，想看到效果，最好页面很长有滚动条<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onReachBottom()&#123;</span><br><span class="line">  console.log(&#x27;触发了上拉触底的事件&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>默认触底距离是50px，容易频繁触发上拉触底事件，可在全局或页面的.json配置文件中，通过onReachBottomDistance属性配置上拉触底距离<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;usingComponents&quot;: &#123;&#125;,</span><br><span class="line">  &quot;onReachBottomDistance&quot;: 150</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="生命周期分类"><a href="#生命周期分类" class="headerlink" title="生命周期分类"></a>生命周期分类</h2><ol><li>应用生命周期函数<ul><li>onLauch(options){}：小程序初始化完成时，全局只触发一次</li><li>onShow(options){}：小程序启动或从后台进入前台显示时触发</li><li>onHide(){}：小程序从前台进入后台时触发</li></ul></li><li>页面生命周期函数<ul><li>onLoad(options){}：监听页面加载，一个页面只调用一次</li><li>onSHow(){}：监听页面显示</li><li>onReady(){}：监听页面初次渲染完成，一个页面只调用一次</li><li>onHide(){}：监听页面隐藏</li><li>onUnload(){}：监听页面卸载，一个页面只调用一次</li></ul></li></ol><h1 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h1><h2 id="组件的引用方式"><a href="#组件的引用方式" class="headerlink" title="组件的引用方式"></a>组件的引用方式</h2><ol><li>组件的引用方式分两种：<ul><li>局部引用：只能在当前被引用的页面内使用</li><li>全局引用：可以在每个小程序页面中使用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 在页面的.json文件中，引入组件</span><br><span class="line">&#123;</span><br><span class="line">  &quot;usingComponents&quot;: &#123;</span><br><span class="line">    &quot;my-test&quot;: &quot;/components/test/test&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在页面的.wxml文件中，使用组件</span><br><span class="line">&lt;my-test&gt;&lt;/my-test&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="组件和页面的不同点"><a href="#组件和页面的不同点" class="headerlink" title="组件和页面的不同点"></a>组件和页面的不同点</h2><ol><li>组件的.json文件中需要声明<code>&quot;component&quot;: true</code>属性</li><li>组件的.js文件中调用的是<code>Component()</code>函数</li><li>组件的事件处理函数需要定义到<code>methods</code>节点中</li></ol><h2 id="组件样式隔离"><a href="#组件样式隔离" class="headerlink" title="组件样式隔离"></a>组件样式隔离</h2><ol><li>组件样式隔离：组件A的样式不会影响到组件B，同样不会影响到页面，反之页面的样式不会影响到其他组件</li><li>只有class选择器具有隔离效果，其他选择器不受样式隔离的影响</li></ol><h2 id="data数据、methods方法"><a href="#data数据、methods方法" class="headerlink" title="data数据、methods方法"></a>data数据、methods方法</h2><ol><li>定义data数据和methods方法，类似vue写法呢<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 事件处理函数</span><br><span class="line">    addCount()&#123;</span><br><span class="line">      this.setData(&#123; count: this.data.count + 1 &#125;)</span><br><span class="line">      // 调用自定义方法</span><br><span class="line">      this._showCount()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 自定义方法建议以_开头</span><br><span class="line">    _showCount()&#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: &#x27;count值为：&#x27; + this.data.count,</span><br><span class="line">        icon: &#x27;none&#x27;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="properties接收传递数据"><a href="#properties接收传递数据" class="headerlink" title="properties接收传递数据"></a>properties接收传递数据</h2><ol><li>properties用来接收外界传递到组件中的数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  // 属性定义</span><br><span class="line">  properties: &#123;</span><br><span class="line">    max: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      // 属性默认值</span><br><span class="line">      value: 10</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 如果传递max为9，默认值10会被覆盖</span><br><span class="line">&lt;my-test max=&quot;9&quot;&gt;&lt;/my-test&gt;</span><br></pre></td></tr></table></figure></li><li>data和properties，两者数据都存在同一个对象上，且都是可读可写，为了更好管理数据，咱们人为给它们进行区分<ul><li>data更倾向于存储组件的私有数据</li><li>properties更倾向于存储外界传递到组件中的数据<br><code>console.log(this.data === this.properties)  // true</code></li></ul></li></ol><h2 id="observers数据监听器"><a href="#observers数据监听器" class="headerlink" title="observers数据监听器"></a>observers数据监听器</h2><ol><li>observers用来监听和响应任何属性和数据字段的变化，从而执行特定的操作；类似于vue中的watch侦听器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 组件的UI结构</span><br><span class="line">&lt;view&gt;&#123;&#123;n1&#125;&#125; + &#123;&#123;n2&#125;&#125; = &#123;&#123;sum&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;button size=&quot;mini&quot; bindtap=&quot;addN1&quot;&gt;n1自增&lt;/button&gt;</span><br><span class="line">&lt;button size=&quot;mini&quot; bindtap=&quot;addN2&quot;&gt;n2自增&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">Component(&#123;</span><br><span class="line">  data: &#123; n1: 0, n2: 0, sum: 0 &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addN1()&#123; this.setData(&#123; n1: this.data.n1 + 1 &#125;)&#125;,</span><br><span class="line">    addN2()&#123; this.setData(&#123; n2: this.data.n2 + 1 &#125;)&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 数据监听节点</span><br><span class="line">  observers: &#123;</span><br><span class="line">    &#x27;n1, n2&#x27;(n1, n2)&#123;</span><br><span class="line">      this.setData(&#123; sum: n1 + n2 &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>如果某个对象需要被监听的属性太多，可以使用通配符**来监听对象中所以属性的变化<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    rgb: &#123;</span><br><span class="line">      r: 0,</span><br><span class="line">      g: 0,</span><br><span class="line">      b: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    fullColor: &#x27;0, 0, 0&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  observers: &#123;</span><br><span class="line">    &#x27;rgb.**&#x27;(obj)&#123;</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        fullColor: `$&#123;obj.r&#125;, $&#123;obj.g&#125;, $&#123;obj.b&#125;`</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="纯数据字段"><a href="#纯数据字段" class="headerlink" title="纯数据字段"></a>纯数据字段</h2><ol><li>有些情况下，某些data中的字段（包括setData设置的字段）既不会展示在界面上，也不会传递给其他组件，仅仅在当前组件内部使用</li><li>此时，可以指定这样的数据字段为”纯数据字段”，它们将仅仅被记录在this.data中，而不参与任何界面渲染过程，这样有助于提升页面更新性能<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    // 将rgb改造为以_开头的纯数据字段</span><br><span class="line">    _rgb: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  // 指定所有_开头的数据字段为纯数据字段</span><br><span class="line">  observers: &#123;</span><br><span class="line">    pureDataPattern: /^_/</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h2><ol><li>组件全部生命周期函数<ul><li>created：组件刚创建好时执行</li><li>attached：组件被挂载到页面未渲染时执行</li><li>ready：组件渲染完成后执行</li><li>moved：组件移动到另一个位置时执行</li><li>detached：组件被删除时执行</li><li>error：组件报错时执行</li></ul></li><li>created：此时还不能调用setData，通常给组件的this添加一些自定义的属性字段</li><li>attached：此时this.data已被初始化完毕，可以进行一些初始化工作（例如发送请求，获取初始数据）</li><li>detached：退出一个页面时，触发组件的detached生命周期函数；适合做一些清理性质的工作<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  lifetimes: &#123;</span><br><span class="line">    created()&#123;&#125;,</span><br><span class="line">    attached()&#123;&#125;,</span><br><span class="line">    detached()&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="组件所在的页面生命周期"><a href="#组件所在的页面生命周期" class="headerlink" title="组件所在的页面生命周期"></a>组件所在的页面生命周期</h2><ol><li>自定义组件的行为依赖于页面状态的变化，此时就需要用到组件所在页面的生命周期</li><li>比如你有两个页面，分别是主页和log页，主页设置好show和hide，默认进入主页执行show生命周期函数，切换到log页执行hide生命周期函数<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  pageLifetimes: &#123;</span><br><span class="line">    show()&#123;&#125;, // 页面被展示</span><br><span class="line">    hide()&#123;&#125;, // 页面被隐藏</span><br><span class="line">    resize(size)&#123;&#125;  //页面尺寸变化</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h2><ol><li>换个思维来理解，组件插槽类似于电源插座，不确定你以后会使用什么电子设备，总之先占个坑</li><li>默认每个组件只允许使用一个<slot>进行占位，默认只支持单个插槽<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 组件导入后，取名为my-test</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;view&gt;这是组件的内部节点&lt;/view&gt;</span><br><span class="line">  &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">// index.wxml页面</span><br><span class="line">&lt;my-test&gt;</span><br><span class="line">  &lt;view&gt;这是插入到组件slot中的内容&lt;/view&gt;</span><br><span class="line">&lt;/my-test&gt;</span><br></pre></td></tr></table></figure></li><li>启用多个插槽<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 组件的.js文件</span><br><span class="line">Component(&#123;</span><br><span class="line">  options: &#123;</span><br><span class="line">    multipleSlots: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>自定义插槽，我希望不同插槽显示不同内容，可以使用name属性命名，引入时使用slot属性<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 组件导入后，取名为my-test</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;view&gt;这是组件的内部节点&lt;/view&gt;</span><br><span class="line">  &lt;slot name=&quot;ulan&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;slot name=&quot;jintao&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">// index.wxml页面</span><br><span class="line">&lt;my-test&gt;</span><br><span class="line">  &lt;view&gt;这是插入到组件slot中的内容&lt;/view&gt;</span><br><span class="line">  &lt;view slot=&quot;ulan&quot;&gt;我是ulan&lt;/view&gt;</span><br><span class="line">  &lt;view slot=&quot;jintao&quot;&gt;我的朋友金涛&lt;/view&gt;</span><br><span class="line">&lt;/my-test&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h2><ol><li>父子组件通信的3种方式<ul><li>属性绑定：用于父组件向子组件的指定属性设置数据，仅能设置JSON兼容的数据</li><li>事件绑定：用于子组件向父组件传递数据，可以传递任意数据</li><li>获取组件实例：父组件通过this.selectComponent()获取子组件实例对象，可以直接访问子组件的任意数据和方法</li></ul></li><li>属性绑定<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// index页面的.js文件</span><br><span class="line">data: &#123;</span><br><span class="line">  count: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// index页面的.wxml文件，通过属性给my-test子组件传递数据</span><br><span class="line">&lt;view&gt;父组件的count值：&#123;&#123;count&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;my-test count=&quot;&#123;&#123;count&#125;&#125;&quot;&gt;&lt;/my-test&gt;</span><br><span class="line"></span><br><span class="line">// test子组件的.js文件，设置默认值9</span><br><span class="line">properties: &#123;</span><br><span class="line">  count: &#123;</span><br><span class="line">    type: Number,</span><br><span class="line">    value: 9</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// test子组件的.wxml文件，由于接受父组件传递的数据，这里count显示为0</span><br><span class="line">&lt;view&gt;子组件接受的count值：&#123;&#123;count&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li>事件绑定<ul><li>在父组件的js中，定义一个函数，这个函数即将通过自定义事件的形式，传递给子组件</li><li>在父组件的wxml中，通过自定义事件的形式，将步骤1中定义的函数引用，传递给子组件</li><li>在子组件的js中，通过调用<code>this.triggerEvent(&#39;自定义事件名称&#39;, &#123; 参数对象 &#125;)</code>，将数据发送到父组件</li><li>在父组件的js中，通过e.detail获取到子组件传递过来的数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 第一步index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  // 自定义事件，接收子组件传递过来的数据，并修改count</span><br><span class="line">  syncCount(e)&#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      count: e.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 第二步index.wxml，这个bind:sync表示自定义事件，名称叫sync</span><br><span class="line">&lt;view&gt;父组件的count值：&#123;&#123;count&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;my-test count=&quot;&#123;&#123;count&#125;&#125;&quot; bind:sync=&quot;syncCount&quot;&gt;&lt;/my-test&gt;</span><br><span class="line"></span><br><span class="line">// 第三步test.js</span><br><span class="line">Component(&#123;</span><br><span class="line">  properties: &#123;</span><br><span class="line">    count: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      value: 9</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 添加点击+1事件</span><br><span class="line">    addCount()&#123;</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        count: this.properties.count + 1</span><br><span class="line">      &#125;)</span><br><span class="line">      // 触发自定义事件，将数值同步给父组件</span><br><span class="line">      this.triggerEvent(&#x27;sync&#x27;, &#123; value: this.properties.count &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 第四步test.wxml，点击+1后，会修改count值，接着触发自定义事件</span><br><span class="line">&lt;view&gt;子组件接受的count值：&#123;&#123;count&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;button type=&quot;default&quot; bindtap=&quot;addCount&quot;&gt;点击+1&lt;/button&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li>获取组件实例：父组件调用<code>this.selectComponent(&quot;id或class选择器&quot;)</code>，获取子组件的实例对象，从而直接访问子组件的任意数据和方法。调用时需要传入一个选择器，例如<code>this.selectComponent(&quot;.customA&quot;)</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 父组件wxml</span><br><span class="line">&lt;my-test count=&quot;&#123;&#123;count&#125;&#125;&quot; bind:sync=&quot;syncCount&quot; class=&quot;customA&quot; id=&quot;cA&quot;&gt;&lt;/my-test&gt;</span><br><span class="line">&lt;button bindtap=&quot;getChild&quot;&gt;获取子组件实例&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">// 父组件js</span><br><span class="line">getChild()&#123;</span><br><span class="line">  const child = this.selectComponent(&#x27;#cA&#x27;)</span><br><span class="line">  child.setData(&#123;</span><br><span class="line">    // 如果写this会指向父组件，这次想修改子组件的count数据，要用child指向</span><br><span class="line">    count: child.properties.count + 1</span><br><span class="line">  &#125;)</span><br><span class="line">  // 调用子组件的addCount方法</span><br><span class="line">  child.addCount()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="behaviors组件代码共享"><a href="#behaviors组件代码共享" class="headerlink" title="behaviors组件代码共享"></a>behaviors组件代码共享</h2><ol><li>behaviors用于组件间代码共享，类似于vue中的mixins；每个behavior可以包含一组属性、数据、生命周期函数和方法，组件引用它时，它的属性、数据和方法会被合并到组件中<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 调用Behavior()方法，创建实例对象</span><br><span class="line">// 使用module.exports将behavior实例对象共享出去</span><br><span class="line">module.exports = Behavior(&#123;</span><br><span class="line">  // 属性节点</span><br><span class="line">  properties: &#123;&#125;,</span><br><span class="line">  // 私有数据节点</span><br><span class="line">  data: &#123; username: &#x27;幽蓝&#x27; &#125;,</span><br><span class="line">  // 事件处理函数和自定义方法节点</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  // 其他节点......</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>导入behaviors到组件中<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// test.js</span><br><span class="line">const myBehavior = require(&#x27;../../behaviors/my-behavior&#x27;)</span><br><span class="line"></span><br><span class="line">Component(&#123;</span><br><span class="line">  behaviors: [myBehavior],</span><br><span class="line">  data: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// test.wxml，这样就能使用username共享数据</span><br><span class="line">&lt;view&gt;在behavior中定义的用户名是：&#123;&#123;username&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li>behavior所有可用节点<ul><li>properties：同组件的属性</li><li>data：同组件的数据</li><li>methods：同自定义组件的方法</li><li>behaviors：引入其他的behavior</li><li>created：生命周期函数</li><li>attached：生命周期函数</li><li>ready：生命周期函数</li><li>moved：生命周期函数</li><li>detached：生命周期函数</li></ul></li><li>同名字段的覆盖和组合规则<ul><li>数据覆盖规则：组件 &gt; 父behavior &gt; 子behavior、靠后的behavior &gt; 靠前的behavior</li></ul></li></ol><h1 id="使用npm第三方包"><a href="#使用npm第三方包" class="headerlink" title="使用npm第三方包"></a>使用npm第三方包</h1><h2 id="npm包的限制"><a href="#npm包的限制" class="headerlink" title="npm包的限制"></a>npm包的限制</h2><ol><li>小程序支持使用npm安装第三方包，受限制影响能用的包其实很少，npm包有如下3个限制<ul><li>不支持依赖于Node.js内置库的包</li><li>不支持依赖于浏览器内置对象的包</li><li>不支持依赖于C++插件的包</li></ul></li></ol><h2 id="Vant-Weapp"><a href="#Vant-Weapp" class="headerlink" title="Vant Weapp"></a>Vant Weapp</h2><ol><li>Vant Weapp是有赞前端团队开源的一套小程序UI组件库，使用MIT开源许可协议，对商业使用比较友好</li></ol><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue项目练习</title>
      <link href="/archives/fce06ce7.html"/>
      <url>/archives/fce06ce7.html</url>
      
        <content type="html"><![CDATA[<h2 id="网易云音乐项目"><a href="#网易云音乐项目" class="headerlink" title="网易云音乐项目"></a>网易云音乐项目</h2><h3 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h3><ol><li>简介：这个项目仅用于练习vue，功能并未完善，bug也非常多，目前已完成主页、歌单列表、音乐播放、歌词；如果你想运行项目，需要下载musicapp与NeteaseCloudMusicApi-master，分别注入依赖后同时运行；素材不下载也没关系，并不妨碍运行项目；如果你希望加入新功能，可以点击下方文档</li><li><a href="https://www.bilibili.com/video/BV1E64y1t7te?p=38&share_source=copy_web">点我进入网易云音乐项目教学视频</a></li><li><a href="https://binaryify.github.io/NeteaseCloudMusicApi/#/">点我进入网易云音乐NodeJS版API文档</a><blockquote><p>如果链接失效，谷歌搜索网易云音乐NodeJS版API</p></blockquote></li></ol><h3 id="下载项目代码"><a href="#下载项目代码" class="headerlink" title="下载项目代码"></a>下载项目代码</h3><ol><li>musicapp是项目代码，注入依赖后运行：<code>npm run serve</code></li><li>NeteaseCloudMusicApi-master是后端代码，配合上面文档使用，注入依赖后运行：<code>node app.js</code></li><li>素材是新建项目时才会用到的图片、图标<blockquote><p>百度网盘：<a href="https://pan.baidu.com/s/1r_1CzfI82FLNEpha6YeGdQ">https://pan.baidu.com/s/1r_1CzfI82FLNEpha6YeGdQ</a> 提取码: 17cn<br>阿里网盘：<a href="https://www.aliyundrive.com/s/DFPfeZPjAdM">https://www.aliyundrive.com/s/DFPfeZPjAdM</a> 提取码: 51ll</p></blockquote></li></ol><h3 id="脚手架创建musicapp项目"><a href="#脚手架创建musicapp项目" class="headerlink" title="脚手架创建musicapp项目"></a>脚手架创建musicapp项目</h3><ol><li>创建musicapp项目<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 使用vue脚手架生成</span><br><span class="line">vue create musicapp</span><br><span class="line"></span><br><span class="line">// 多选router、vuex、less</span><br><span class="line"></span><br><span class="line">cd musicapp</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure></li></ol><h3 id="检测视窗宽度自适应字体大小"><a href="#检测视窗宽度自适应字体大小" class="headerlink" title="检测视窗宽度自适应字体大小"></a>检测视窗宽度自适应字体大小</h3><ol><li>public&#x2F;js&#x2F;rem.js<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const remSize = () =&gt; &#123;</span><br><span class="line">  // 获取视窗宽度</span><br><span class="line">  let deviceWidth = document.documentElement.clientWidth || window.innerWidth;</span><br><span class="line">  // 检测视窗宽度并设置最大值与最小值</span><br><span class="line">  if(deviceWidth &gt;= 750)&#123;</span><br><span class="line">    deviceWidth = 750;</span><br><span class="line">  &#125;</span><br><span class="line">  if(deviceWidth &lt;= 320)&#123;</span><br><span class="line">    deviceWidth = 320;</span><br><span class="line">  &#125;</span><br><span class="line">  // 设计稿750px，那么1rem = 100px</span><br><span class="line">  // 设计稿375px，那么1rem = 50px</span><br><span class="line">  document.documentElement.style.fontSize = (deviceWidth / 7.5) + &#x27;px&#x27;;</span><br><span class="line">  // 设置字体大小</span><br><span class="line">  document.querySelector(&#x27;body&#x27;).style.fontSize = 0.3 + &#x27;rem&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">remSize()</span><br><span class="line">window.onresize = function ()&#123;</span><br><span class="line">  remSize()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>将rem.js导入到public&#x2F;index.html，位置在<code>&lt;/body&gt;</code>的上面<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;script src=&quot;&lt;%= BASE_URL %&gt;js/rem.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="加载字体图标"><a href="#加载字体图标" class="headerlink" title="加载字体图标"></a>加载字体图标</h3><ol><li>字体图标放到src&#x2F;assets，打开demo_index.html查看字体图标类名</li><li>main.js导入<code>import &#39;./assets/iconfont/iconfont.js&#39;</code></li><li>App.vue添加公共样式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;router-view/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">*&#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  font-family: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line">.icon &#123;</span><br><span class="line">  width: 1rem;</span><br><span class="line">  height: 1rem;</span><br><span class="line">  vertical-align: -0.15em;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li>测试字体图标能否显示，位置在HomeView.vue<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">      &lt;use xlink:href=&quot;#icon-liebiao2&quot;&gt;&lt;/use&gt;</span><br><span class="line">    &lt;/svg&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="发现页面"><a href="#发现页面" class="headerlink" title="发现页面"></a>发现页面</h3><h4 id="顶部栏"><a href="#顶部栏" class="headerlink" title="顶部栏"></a>顶部栏</h4><ol><li>src&#x2F;views&#x2F;HomeView.vue导入TopNav组件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;!--顶部栏--&gt;</span><br><span class="line">    &lt;top-nav&gt;&lt;/top-nav&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// @ is an alias to /src</span><br><span class="line">import TopNav from &#x27;@/components/HomeView/TopNav.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;HomeView&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    TopNav</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>src&#x2F;components&#x2F;HomeView创建TopNav.vue组件<blockquote><p>个人习惯用大组件命名创建文件夹，在往里创建子组件，这样方便管理子组件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;topNav&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;topLeft&quot;&gt;</span><br><span class="line">      &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-liebiao2&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;topCenter&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;navBtn&quot;&gt;我的&lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;navBtn active&quot;&gt;发现&lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;navBtn&quot;&gt;云村&lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;navBtn&quot;&gt;视频&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;topRight&quot;&gt;</span><br><span class="line">      &lt;svg class=&quot;icon search&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-sousuo&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;TopNav&quot;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.topNav&#123;</span><br><span class="line">  width: 7.5rem;</span><br><span class="line">  height: 1rem;</span><br><span class="line">  display: flex;</span><br><span class="line">  //首个元素在起点，末尾元素在终点</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  //垂直居中</span><br><span class="line">  align-items: center;</span><br><span class="line">  padding: 0 0.2rem;</span><br><span class="line">  .icon&#123;</span><br><span class="line">    width: 0.4rem;</span><br><span class="line">    height: 0.4rem;</span><br><span class="line">  &#125;</span><br><span class="line">  .search&#123;</span><br><span class="line">    width: 0.47rem;</span><br><span class="line">    height: 0.47rem;</span><br><span class="line">  &#125;</span><br><span class="line">  .topCenter&#123;</span><br><span class="line">    width: 4.5rem;</span><br><span class="line">    color: #C0C0C0;</span><br><span class="line">    display: flex;</span><br><span class="line">    // 平均分布</span><br><span class="line">    justify-content: space-around;</span><br><span class="line">    .active&#123;</span><br><span class="line">      color: black;</span><br><span class="line">      font-weight: 900;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h4><ol><li>安装swiper插件，实现触摸滑动功能<code>npm install swiper@5 --save</code></li><li>src&#x2F;views&#x2F;HomeView.vue导入Banner组件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;!--顶部栏--&gt;</span><br><span class="line">    &lt;top-nav&gt;&lt;/top-nav&gt;</span><br><span class="line">    &lt;!--轮播图--&gt;</span><br><span class="line">    &lt;banner&gt;&lt;/banner&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// @ is an alias to /src</span><br><span class="line">import TopNav from &#x27;@/components/HomeView/TopNav.vue&#x27;</span><br><span class="line">import Banner from &#x27;@/components/HomeView/Banner.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;HomeView&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    TopNav,</span><br><span class="line">    Banner,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>src&#x2F;assets&#x2F;img存放banner.webp，图片可以是电脑壁纸，大小尺寸无所谓</li><li>src&#x2F;components&#x2F;HomeView创建Banner.vue组件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;swipercom&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;swiper-container&quot; id=&quot;swiperIndex&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">        &lt;!--循环获取轮播图--&gt;</span><br><span class="line">        &lt;div class=&quot;swiper-slide&quot; v-for=&quot;(item, i) in imgs&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">          &lt;img :src=&quot;item.pic&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 如果需要分页器 --&gt;</span><br><span class="line">      &lt;div class=&quot;swiper-pagination&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#x27;swiper/css/swiper.css&#x27;</span><br><span class="line">import Swiper from &#x27;swiper&#x27;;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">import &#123; getBanner &#125; from &#x27;@/api/index.js&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Banner&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      // 至少准备1份本地图片，避免出现问题</span><br><span class="line">      // require是动态获取本地图片</span><br><span class="line">      // pic是后端请求banners的格式</span><br><span class="line">      imgs:[</span><br><span class="line">        &#123; pic: require(&#x27;../assets/img/banner.webp&#x27;) &#125;,</span><br><span class="line">        &#123; pic: require(&#x27;../assets/img/banner.webp&#x27;) &#125;,</span><br><span class="line">        &#123; pic: require(&#x27;../assets/img/banner.webp&#x27;) &#125;,</span><br><span class="line">        &#123; pic: require(&#x27;../assets/img/banner.webp&#x27;) &#125;,</span><br><span class="line">        &#123; pic: require(&#x27;../assets/img/banner.webp&#x27;) &#125;,</span><br><span class="line">        &#123; pic: require(&#x27;../assets/img/banner.webp&#x27;) &#125;,</span><br><span class="line">        &#123; pic: require(&#x27;../assets/img/banner.webp&#x27;) &#125;,</span><br><span class="line">        &#123; pic: require(&#x27;../assets/img/banner.webp&#x27;) &#125;,</span><br><span class="line">        &#123; pic: require(&#x27;../assets/img/banner.webp&#x27;) &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  async mounted()&#123;</span><br><span class="line">    // 异步请求轮播图，1是请求android资源类型</span><br><span class="line">    let res = await getBanner(1);</span><br><span class="line">    // 查看res数据</span><br><span class="line">    // console.log(res)</span><br><span class="line">    // 请求到的轮播图会替换imgs</span><br><span class="line">    this.imgs = res.data.banners;</span><br><span class="line">    const mySwiper = new Swiper(&#x27;#swiperIndex&#x27;, &#123;</span><br><span class="line">      loop: true, // 循环模式选项</span><br><span class="line">      // 如果需要分页器</span><br><span class="line">      pagination: &#123;</span><br><span class="line">        el: &#x27;.swiper-pagination&#x27;,</span><br><span class="line">        clickable: true,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">#swipercom&#123;</span><br><span class="line">  width: 7.5rem;</span><br><span class="line">  #swiperIndex.swiper-container&#123;</span><br><span class="line">    width: 7.1rem;</span><br><span class="line">    height: 2.6rem;</span><br><span class="line">    border-radius: 0.1rem;</span><br><span class="line">    .swiper-slide img&#123;</span><br><span class="line">      width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    .swiper-pagination-bullet-active&#123;</span><br><span class="line">      background-color: orangered;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li>src&#x2F;api创建index.js，用来管理请求数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line"></span><br><span class="line">let baseUrl = &#x27;http://localhost:3000&#x27;</span><br><span class="line"></span><br><span class="line">// 获取轮播图的api, type:资源类型, 对应以下类型, 默认为0即PC</span><br><span class="line">// 1: android; 2: iphone; 3: ipad</span><br><span class="line">export let getBanner = (type=0) =&gt; &#123;</span><br><span class="line">  return axios.get(`$&#123;baseUrl&#125;/banner?type=$&#123;type&#125;`)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>打开控制台，cd到NeteaseCloudMusicApi-master，运行<code>node app.js</code>，就能获取到后端发来的banner数据</li></ol><h4 id="图标列表"><a href="#图标列表" class="headerlink" title="图标列表"></a>图标列表</h4><ol><li>src&#x2F;views&#x2F;HomeView.vue导入IconList组件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--图标列表--&gt;</span><br><span class="line">&lt;icon-list&gt;&lt;/icon-list&gt;</span><br><span class="line"></span><br><span class="line">import IconList from &#x27;@/components/HomeView/IconList.vue&#x27;</span><br><span class="line"></span><br><span class="line">components: &#123;</span><br><span class="line">  TopNav,</span><br><span class="line">  Banner,</span><br><span class="line">  IconList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>src&#x2F;components&#x2F;HomeView创建IconList.vue组件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;iconList&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;iconItem&quot;&gt;</span><br><span class="line">      &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-geinituijian&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">      &lt;span&gt;每日推荐&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;iconItem&quot;&gt;</span><br><span class="line">      &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-shouyinji&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">      &lt;span&gt;私人FM&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;iconItem&quot;&gt;</span><br><span class="line">      &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-yinlegedan-&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">      &lt;span&gt;歌单&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;iconItem leaderboard&quot;&gt;</span><br><span class="line">      &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-paihangbang-&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">      &lt;span&gt;排行榜&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;iconItem&quot;&gt;</span><br><span class="line">      &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-zhibo&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">      &lt;span&gt;直播&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;IconList&quot;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.iconList&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-around;</span><br><span class="line">  padding: 0.4rem;</span><br><span class="line">  .iconItem&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    // 垂直布局</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    // 垂直居中</span><br><span class="line">    align-items: center;</span><br><span class="line">    .icon&#123;</span><br><span class="line">      width: 0.8rem;</span><br><span class="line">      height: 0.8rem;</span><br><span class="line">    &#125;</span><br><span class="line">    span&#123;</span><br><span class="line">      padding: 0.1rem;</span><br><span class="line">      font-size: 0.2rem;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="发现好歌单"><a href="#发现好歌单" class="headerlink" title="发现好歌单"></a>发现好歌单</h4><ol><li>src&#x2F;views&#x2F;HomeView.vue导入MusicList组件</li><li>src&#x2F;components&#x2F;HomeView创建MusicList.vue组件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;musicList&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;musicList-top&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;title&quot;&gt;发现好歌单&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;more&quot;&gt;查看更多&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;mlist&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;swiper-container&quot; id=&quot;musicSwiper&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">          &lt;!--循环获取封面、播放次数、歌单名--&gt;</span><br><span class="line">          &lt;div class=&quot;swiper-slide&quot; v-for=&quot;(item, i) in state.musicList&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">            &lt;img :src=&quot;item.picUrl&quot; :alt=&quot;item.name&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;count&quot;&gt;</span><br><span class="line">              &lt;span&gt;▷ &#123;&#123;changeValue(item.playCount) &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;name&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#x27;swiper/css/swiper.css&#x27;</span><br><span class="line">import Swiper from &#x27;swiper&#x27;;</span><br><span class="line">import &#123; getMusicList &#125; from &#x27;@/api/index.js&#x27;</span><br><span class="line">import &#123; reactive, onMounted, onUpdated &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;MusicList&#x27;,</span><br><span class="line">  setup()&#123;</span><br><span class="line">    // 用来存放请求数据的空数组</span><br><span class="line">    let state = reactive(&#123; musicList: [] &#125;);</span><br><span class="line">    // 过滤播放次数</span><br><span class="line">    let changeValue = (num) =&gt;&#123;</span><br><span class="line">      let res = 0;</span><br><span class="line">      if(num &gt;= 100000000)&#123;</span><br><span class="line">        res = (num / 100000000).toFixed(0) + &#x27;亿&#x27;;</span><br><span class="line">      &#125;else if(num &gt; 10000)&#123;</span><br><span class="line">        res = (num / 10000).toFixed(0) + &#x27;万&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">      return res;</span><br><span class="line">    &#125;</span><br><span class="line">    // 请求&#x27;网友精选碟歌单&#x27;数据，并存进musicList数组内</span><br><span class="line">    onMounted(async ()=&gt;&#123;</span><br><span class="line">      let result = await getMusicList();</span><br><span class="line">      // 查看result数据</span><br><span class="line">      // console.log(result)</span><br><span class="line">      state.musicList = result.data.result;</span><br><span class="line">    &#125;)</span><br><span class="line">    // 控制歌单滑动功能，歌单显示3个，总共有10个</span><br><span class="line">    onUpdated(()=&gt;&#123;</span><br><span class="line">      const swiper = new Swiper(&#x27;#musicSwiper&#x27;, &#123;</span><br><span class="line">        slidesPerView: 3,</span><br><span class="line">        spaceBetween: 10,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    return &#123;</span><br><span class="line">      state, changeValue</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.musicList&#123;</span><br><span class="line">  width: 7.5rem;</span><br><span class="line">  padding: 0 0.4rem;</span><br><span class="line">  // 发现好歌单与查看更多</span><br><span class="line">  .musicList-top&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    height: 1rem;</span><br><span class="line">    align-items: center;</span><br><span class="line">    .title&#123;</span><br><span class="line">      font-size: 0.4rem;</span><br><span class="line">      font-weight: 900;</span><br><span class="line">    &#125;</span><br><span class="line">    .more&#123;</span><br><span class="line">      border: 1px solid #ccc;</span><br><span class="line">      border-radius: 0.2rem;</span><br><span class="line">      font-size: 0.24rem;</span><br><span class="line">      height: 0.5rem;</span><br><span class="line">      width: 1.2rem;</span><br><span class="line">      text-align: center;</span><br><span class="line">      line-height: 0.5rem;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 封面、播放次数、歌单名</span><br><span class="line">  .mlist&#123;</span><br><span class="line">    .swiper-container&#123;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 3rem;</span><br><span class="line">      .swiper-slide&#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        position: relative;</span><br><span class="line">        // 封面</span><br><span class="line">        img&#123;</span><br><span class="line">          width: 100%;</span><br><span class="line">          height: auto;</span><br><span class="line">          border-radius: 0.1rem;</span><br><span class="line">        &#125;</span><br><span class="line">        // 播放次数</span><br><span class="line">        .count&#123;</span><br><span class="line">          position: absolute;</span><br><span class="line">          right: 0.1rem;</span><br><span class="line">          top: 0.1rem;</span><br><span class="line">          font-size: 0.24rem;</span><br><span class="line">          color: white;</span><br><span class="line">          display: flex;</span><br><span class="line">          align-items: center;</span><br><span class="line">        &#125;</span><br><span class="line">        // 歌单名</span><br><span class="line">        .name&#123;</span><br><span class="line">          width: 100%;</span><br><span class="line">          height: 0.9rem;</span><br><span class="line">          padding: 0.1rem 0;</span><br><span class="line">          overflow: hidden;</span><br><span class="line">          font-size: 0.24rem;</span><br><span class="line">          line-height: 0.4rem;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li>src&#x2F;api&#x2F;index.js添加请求歌单数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">// 获取推荐歌单，可选参数limit:取出数量，默认为10</span><br><span class="line">export let getMusicList = (limit=10) =&gt; &#123;</span><br><span class="line">  return axios.get(`$&#123;baseUrl&#125;/personalized?limit=$&#123;limit&#125;`)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>预览效果<img src="/img/content_musicApp1.webp" width="50%" height="50%"></li></ol><h3 id="歌单详情页面"><a href="#歌单详情页面" class="headerlink" title="歌单详情页面"></a>歌单详情页面</h3><h4 id="设置路由跳转"><a href="#设置路由跳转" class="headerlink" title="设置路由跳转"></a>设置路由跳转</h4><ol><li>src&#x2F;views创建ListView.vue，内容写个你好，用来测试跳转<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;你好&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li>src&#x2F;router打开index.js，添加ListView.vue的路径<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createRouter, createWebHistory &#125; from &#x27;vue-router&#x27;</span><br><span class="line">import HomeView from &#x27;../views/HomeView.vue&#x27;</span><br><span class="line"></span><br><span class="line">const routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/&#x27;,</span><br><span class="line">    name: &#x27;home&#x27;,</span><br><span class="line">    component: HomeView</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/listview&#x27;,</span><br><span class="line">    name: &#x27;listview&#x27;,</span><br><span class="line">    // route level code-splitting</span><br><span class="line">    // this generates a separate chunk (about.[hash].js) for this route</span><br><span class="line">    // which is lazy-loaded when the route is visited.</span><br><span class="line">    component: () =&gt; import(&#x27;../views/ListView.vue&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">  history: createWebHistory(process.env.BASE_URL),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure></li><li>src&#x2F;components&#x2F;HomeView&#x2F;MusicList.vue修改div标签成router-link，并添加跳转路径，query是获取歌单id，根据id显示相应的内容<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--循环获取封面、播放次数、歌单名--&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123; path:&#x27;/listview&#x27;, query:&#123; id:item.id&#125; &#125;&quot;</span><br><span class="line">             class=&quot;swiper-slide&quot;</span><br><span class="line">             v-for=&quot;(item, i) in state.musicList&quot; :key=&quot;i&quot;</span><br><span class="line">&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li>src&#x2F;App.vue添加a标签公共样式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">...</span><br><span class="line">a&#123;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  color: #3e4149;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li>src&#x2F;api&#x2F;index.js添加请求歌单详情<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">// 获取歌单详情</span><br><span class="line">export let getPlaylistDetail = (id) =&gt; &#123;</span><br><span class="line">  return axios.get(`$&#123;baseUrl&#125;/playlist/detail?id=$&#123;id&#125;`)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>src&#x2F;views&#x2F;ListView.vue添加歌单详情数据，顺便把ListViewTop组件注册进去<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;listView&quot;&gt;</span><br><span class="line">    &lt;!--歌单详情上部分，将数据传递给子组件--&gt;</span><br><span class="line">    &lt;list-view-top :playlist=&quot;state.playlist&quot;&gt;&lt;/list-view-top&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ListViewTop from &quot;@/components/ListView/ListViewTop.vue&quot;;</span><br><span class="line">import &#123; getPlaylistDetail &#125; from &quot;@/api/index.js&quot;;</span><br><span class="line">import &#123; onMounted, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;ListView&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ListViewTop</span><br><span class="line">  &#125;,</span><br><span class="line">  setup()&#123;</span><br><span class="line">    // 获取当前路径</span><br><span class="line">    const route = useRoute();</span><br><span class="line">    // playlist用来存放歌单详情数据，creator用来存放作者数据</span><br><span class="line">    // 不设置空对象，存放的数据在调用时会报undefined</span><br><span class="line">    let state = reactive(&#123;</span><br><span class="line">      playlist: &#123;</span><br><span class="line">        creator: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    onMounted(async () =&gt; &#123;</span><br><span class="line">      // 查看route，寻找到id后存到变量id里</span><br><span class="line">      // console.log(route)</span><br><span class="line">      let id = route.query.id;</span><br><span class="line">      // 请求获取歌单详情数据</span><br><span class="line">      let result = await getPlaylistDetail(id);</span><br><span class="line">      // 查看歌单详情数据</span><br><span class="line">      console.log(result)</span><br><span class="line">      // 将得到的数据存进入</span><br><span class="line">      state.playlist = result.data.playlist;</span><br><span class="line">    &#125;)</span><br><span class="line">    return &#123; state &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="歌单详情上部分"><a href="#歌单详情上部分" class="headerlink" title="歌单详情上部分"></a>歌单详情上部分</h4><ol><li>src&#x2F;components&#x2F;ListView创建ListViewTop.vue组件<blockquote><p>创建ListView文件夹，用来管理歌单详情组件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;listViewTop&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;listViewTopNav&quot;&gt;</span><br><span class="line">      &lt;!--背景图，动态获取图片路径--&gt;</span><br><span class="line">      &lt;img class=&quot;bg&quot; :src=&quot;playlist.coverImgUrl&quot;&gt;</span><br><span class="line">      &lt;!--顶部左边，返回键与标题--&gt;</span><br><span class="line">      &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;!--点击三角图标返回到主页--&gt;</span><br><span class="line">          &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;</span><br><span class="line">               @click=&quot;$router.go(-1)&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;use xlink:href=&quot;#icon-zuojiantou&quot;&gt;&lt;/use&gt;</span><br><span class="line">          &lt;/svg&gt;</span><br><span class="line">        &lt;div class=&quot;title&quot;&gt;歌单&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!--顶部右边，搜索与详情--&gt;</span><br><span class="line">      &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;svg class=&quot;icon search&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">          &lt;use xlink:href=&quot;#icon-sousuo&quot;&gt;&lt;/use&gt;</span><br><span class="line">        &lt;/svg&gt;</span><br><span class="line">        &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">          &lt;use xlink:href=&quot;#icon-gengduo-shuxiang&quot;&gt;&lt;/use&gt;</span><br><span class="line">        &lt;/svg&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;contentLeft&quot;&gt;</span><br><span class="line">        &lt;!--封面--&gt;</span><br><span class="line">        &lt;img :src=&quot;playlist.coverImgUrl&quot;&gt;</span><br><span class="line">        &lt;!--播放次数--&gt;</span><br><span class="line">        &lt;span&gt;▷ &#123;&#123;changeValue(playlist.playCount)&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;contentRight&quot;&gt;</span><br><span class="line">        &lt;!--歌单名--&gt;</span><br><span class="line">        &lt;h3&gt;&#123;&#123;playlist.name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;!--作者头像与名字--&gt;</span><br><span class="line">        &lt;div class=&quot;author&quot;&gt;</span><br><span class="line">          &lt;img class=&quot;header&quot; :src=&quot;playlist.creator.avatarUrl&quot; alt=&quot;&quot;&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123;playlist.creator.nickname&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!--描述内容--&gt;</span><br><span class="line">        &lt;div class=&quot;description&quot;&gt;&#123;&#123;playlist.description&#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;iconList&quot;&gt;</span><br><span class="line">      &lt;!--评论--&gt;</span><br><span class="line">      &lt;div class=&quot;iconItem&quot;&gt;</span><br><span class="line">        &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">          &lt;use xlink:href=&quot;#icon-pinglun&quot;&gt;&lt;/use&gt;</span><br><span class="line">        &lt;/svg&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;playlist.commentCount&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!--分享--&gt;</span><br><span class="line">      &lt;div class=&quot;iconItem&quot;&gt;</span><br><span class="line">        &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">          &lt;use xlink:href=&quot;#icon-fenxiang-&quot;&gt;&lt;/use&gt;</span><br><span class="line">        &lt;/svg&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;playlist.commentCount&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!--下载--&gt;</span><br><span class="line">      &lt;div class=&quot;iconItem&quot;&gt;</span><br><span class="line">        &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">          &lt;use xlink:href=&quot;#icon-xiazai&quot;&gt;&lt;/use&gt;</span><br><span class="line">        &lt;/svg&gt;</span><br><span class="line">        &lt;span&gt;下载&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!--多选--&gt;</span><br><span class="line">      &lt;div class=&quot;iconItem&quot;&gt;</span><br><span class="line">        &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">          &lt;use xlink:href=&quot;#icon-duoxuan-&quot;&gt;&lt;/use&gt;</span><br><span class="line">        &lt;/svg&gt;</span><br><span class="line">        &lt;span&gt;多选&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;ListViewTop&quot;,</span><br><span class="line">  // 接收父组件提供的playlist数据</span><br><span class="line">  props: [&#x27;playlist&#x27;],</span><br><span class="line">  setup()&#123;</span><br><span class="line">    let changeValue = (num) =&gt;&#123;</span><br><span class="line">      let res = 0;</span><br><span class="line">      if(num &gt;= 100000000)&#123;</span><br><span class="line">        res = (num / 100000000).toFixed(0) + &#x27;亿&#x27;;</span><br><span class="line">      &#125;else if(num &gt; 10000)&#123;</span><br><span class="line">        res = (num / 10000).toFixed(0) + &#x27;万&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">      return res;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123; changeValue &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.listViewTop&#123;</span><br><span class="line">  width: 7.5rem;</span><br><span class="line">  padding: 0 0.4rem;</span><br><span class="line">  .bg&#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    width: 7.5rem;</span><br><span class="line">    height: auto;</span><br><span class="line">    // 设置-1减少层数使背景不会遮住内容</span><br><span class="line">    z-index: -1;</span><br><span class="line">    // 添加滤镜使背景模糊，降低对比度</span><br><span class="line">    filter: blur(0.2rem) contrast(25%);</span><br><span class="line">  &#125;</span><br><span class="line">  .listViewTopNav&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    align-items: center;</span><br><span class="line">    height: 1.2rem;</span><br><span class="line">    font-size: 0.4rem;</span><br><span class="line">    padding-top: 0.3rem;</span><br><span class="line">    .left, .right&#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      color: #fff;</span><br><span class="line">      .icon&#123;</span><br><span class="line">        width: 0.5rem;</span><br><span class="line">        height: 0.5rem;</span><br><span class="line">        // SVG修改颜色</span><br><span class="line">        fill: #fff;</span><br><span class="line">      &#125;</span><br><span class="line">      .title&#123;</span><br><span class="line">        margin-left: 0.4rem;</span><br><span class="line">      &#125;</span><br><span class="line">      .search&#123;</span><br><span class="line">        margin-right: 0.4rem;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .content&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    padding: 0.5rem 0;</span><br><span class="line">    .contentLeft&#123;</span><br><span class="line">      position: relative;</span><br><span class="line">      img&#123;</span><br><span class="line">        width: 2.8rem;</span><br><span class="line">        height: 2.8rem;</span><br><span class="line">        border-radius: 0.1rem;</span><br><span class="line">      &#125;</span><br><span class="line">      span&#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        right: 0.1rem;</span><br><span class="line">        top: 0.1rem;</span><br><span class="line">        font-size: 0.24rem;</span><br><span class="line">        color: white;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .contentRight&#123;</span><br><span class="line">      width: 3.5rem;</span><br><span class="line">      h3&#123;</span><br><span class="line">        margin-top: 0.05rem;</span><br><span class="line">        color: white;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        text-overflow: ellipsis;</span><br><span class="line">        // 下面3个必须写，可以实现2行文字</span><br><span class="line">        display: -webkit-box;</span><br><span class="line">        -webkit-box-orient: vertical;</span><br><span class="line">        -webkit-line-clamp: 2;</span><br><span class="line">      &#125;</span><br><span class="line">      .author&#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">        margin: 0.25rem 0;</span><br><span class="line">        .header&#123;</span><br><span class="line">          width: 0.6rem;</span><br><span class="line">          height: 0.6rem;</span><br><span class="line">          border-radius: 0.3rem;</span><br><span class="line">          margin-right: 0.2rem;</span><br><span class="line">        &#125;</span><br><span class="line">        span&#123;</span><br><span class="line">          font-size: 0.28rem;</span><br><span class="line">          font-weight: 500;</span><br><span class="line">          color: rgb(204, 204, 204);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .description&#123;</span><br><span class="line">        font-size: 0.24rem;</span><br><span class="line">        color: rgba(204, 204, 204, 0.9);</span><br><span class="line">        //  color: rgba(0, 0, 0, 0.4);</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        text-overflow: ellipsis;</span><br><span class="line">        // 下面3个必须写，可以实现2行文字</span><br><span class="line">        display: -webkit-box;</span><br><span class="line">        -webkit-box-orient: vertical;</span><br><span class="line">        -webkit-line-clamp: 2;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .iconList&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-around;</span><br><span class="line">    .iconItem&#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      flex-direction: column;</span><br><span class="line">      align-items: center;</span><br><span class="line">      .icon&#123;</span><br><span class="line">        width: 0.6rem;</span><br><span class="line">        height: 0.6rem;</span><br><span class="line">        fill: rgba(255, 255, 255, 0.9);</span><br><span class="line">      &#125;</span><br><span class="line">      span&#123;</span><br><span class="line">        font-size: 0.05rem;</span><br><span class="line">        padding-top: 0.05rem;</span><br><span class="line">        color: rgba(255, 255, 255, 0.9);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="歌单详情下部分"><a href="#歌单详情下部分" class="headerlink" title="歌单详情下部分"></a>歌单详情下部分</h4><ol><li>ListView.vue导入playList组件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;play-list :playlist=&quot;state.playlist&quot;&gt;&lt;/play-list&gt;</span><br><span class="line"></span><br><span class="line">import PlayList from &quot;@/components/ListView/PlayList.vue&quot;;</span><br><span class="line"></span><br><span class="line">components: &#123;</span><br><span class="line">  ListViewTop,</span><br><span class="line">  PlayList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setup()&#123;</span><br><span class="line">  ...</span><br><span class="line">  // playlist用来存放歌单详情数据，creator用来存放作者数据，tracks存放歌曲</span><br><span class="line">  // 不设置空对象，存放的数据在调用时会报undefined</span><br><span class="line">  let state = reactive(&#123;</span><br><span class="line">    playlist: &#123;</span><br><span class="line">      creator: &#123;&#125;,</span><br><span class="line">      tracks: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>src&#x2F;components&#x2F;ListView创建PlayList.vue组件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;playlist&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;playlist-top&quot;&gt;</span><br><span class="line">      &lt;!--播放全部功能--&gt;</span><br><span class="line">      &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">          &lt;use xlink:href=&quot;#icon-bofang&quot;&gt;&lt;/use&gt;</span><br><span class="line">        &lt;/svg&gt;</span><br><span class="line">        &lt;div class=&quot;text&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;title&quot;&gt;播放全部&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;num&quot;&gt;(共&#123;&#123;playlist.tracks.length&#125;&#125;首)&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!--收藏功能--&gt;</span><br><span class="line">      &lt;div class=&quot;btn&quot;&gt;+ 收藏(&#123;&#123;changeValue(playlist.subscribedCount)&#125;&#125;)&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;list&quot;&gt;</span><br><span class="line">      &lt;!--循环歌曲数据--&gt;</span><br><span class="line">      &lt;div class=&quot;playItem&quot;</span><br><span class="line">           v-for=&quot;(item, i) in playlist.tracks&quot;</span><br><span class="line">           :key=&quot;i&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">          &lt;!--索引--&gt;</span><br><span class="line">          &lt;div class=&quot;index&quot;&gt;&#123;&#123;i + 1&#125;&#125;&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;!--歌曲名--&gt;</span><br><span class="line">            &lt;div class=&quot;title&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">            &lt;!--作者名--&gt;</span><br><span class="line">            &lt;div class=&quot;author&quot;&gt;</span><br><span class="line">              &lt;span&gt;&#123;&#123;(item.ar[0].name)&#125;&#125;&lt;/span&gt;</span><br><span class="line">              &lt;span class=&quot;connect&quot;&gt;-&lt;/span&gt;</span><br><span class="line">              &lt;span&gt;&#123;&#123;item.al.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">          &lt;!--播放按钮--&gt;</span><br><span class="line">          &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">            &lt;use xlink:href=&quot;#icon-play&quot;&gt;&lt;/use&gt;</span><br><span class="line">          &lt;/svg&gt;</span><br><span class="line">          &lt;!--更多信息--&gt;</span><br><span class="line">          &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">            &lt;use xlink:href=&quot;#icon-gengduo-shuxiang&quot;&gt;&lt;/use&gt;</span><br><span class="line">          &lt;/svg&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;PlayList&quot;,</span><br><span class="line">  props: [&#x27;playlist&#x27;],</span><br><span class="line">  setup()&#123;</span><br><span class="line">    let changeValue = (num) =&gt;&#123;</span><br><span class="line">      let res = 0;</span><br><span class="line">      if(num &gt;= 100000000)&#123;</span><br><span class="line">        res = (num / 100000000).toFixed(0) + &#x27;亿&#x27;;</span><br><span class="line">      &#125;else if(num &gt; 10000)&#123;</span><br><span class="line">        res = (num / 10000).toFixed(0) + &#x27;万&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">      return res;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123; changeValue &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.playlist&#123;</span><br><span class="line">  width: 7.5rem;</span><br><span class="line">  padding: 0 0.4rem;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  border-top-left-radius: 0.3rem;</span><br><span class="line">  border-top-right-radius: 0.3rem;</span><br><span class="line">  .playlist-top&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    align-items: center;</span><br><span class="line">    height: 1.1rem;</span><br><span class="line">    margin-top: 0.5rem;</span><br><span class="line">    padding-top: 0.1rem;</span><br><span class="line">    .left&#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      align-items: center;</span><br><span class="line">      .icon&#123;</span><br><span class="line">        width: 0.5rem;</span><br><span class="line">        height: 0.5rem;</span><br><span class="line">        margin-right: 0.2rem;</span><br><span class="line">      &#125;</span><br><span class="line">      .text&#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">        .title&#123;</span><br><span class="line">          font-size: 0.35rem;</span><br><span class="line">        &#125;</span><br><span class="line">        .num&#123;</span><br><span class="line">          font-size: 0.3rem;</span><br><span class="line">          color: #ccc;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .btn&#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      align-items: center;</span><br><span class="line">      height: 0.6rem;</span><br><span class="line">      line-height: 0.6rem;</span><br><span class="line">      padding: 0.4rem 0.3rem;</span><br><span class="line">      font-size: 0.3rem;</span><br><span class="line">      color: rgba(255, 255, 255, 0.9);</span><br><span class="line">      background-color: #e84a5f;</span><br><span class="line">      border-radius: 0.5rem;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .list&#123;</span><br><span class="line">    .playItem&#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      justify-content: space-between;</span><br><span class="line">      width: 100%;</span><br><span class="line">      .left&#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">        width: 4rem;</span><br><span class="line">        height: 1rem;</span><br><span class="line">        color: rgba(0, 0, 0, 0.5);</span><br><span class="line">        .index&#123;</span><br><span class="line">          width: 0.2rem;</span><br><span class="line">          font-size: 0.33rem;</span><br><span class="line">        &#125;</span><br><span class="line">        .content&#123;</span><br><span class="line">          margin-left: 0.4rem;</span><br><span class="line">          .title&#123;</span><br><span class="line">            font-size: 0.3rem;</span><br><span class="line">            color: rgba(0, 0, 0, 0.9);</span><br><span class="line">            // 防止标题溢出</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            text-overflow: ellipsis;</span><br><span class="line">            display: -webkit-box;</span><br><span class="line">            -webkit-box-orient: vertical;</span><br><span class="line">            -webkit-line-clamp: 1;</span><br><span class="line">          &#125;</span><br><span class="line">          .author&#123;</span><br><span class="line">            font-size: 0.2rem;</span><br><span class="line">            // 防止专辑名溢出</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            text-overflow: ellipsis;</span><br><span class="line">            display: -webkit-box;</span><br><span class="line">            -webkit-box-orient: vertical;</span><br><span class="line">            -webkit-line-clamp: 1;</span><br><span class="line">            .connect&#123;</span><br><span class="line">              font-size: 0.01rem;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .right&#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">        //padding-top: 0.1rem;</span><br><span class="line">        .icon&#123;</span><br><span class="line">          margin-top: 0.1rem;</span><br><span class="line">          margin-right: 0.3rem;</span><br><span class="line">          width: 0.5rem;</span><br><span class="line">          height: 0.5rem;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li>src&#x2F;store&#x2F;index.js增加全局属性方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default createStore(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    // 初始化避免报错</span><br><span class="line">    playlist: [&#123;</span><br><span class="line">      name: &#x27;岁月如歌&#x27;,</span><br><span class="line">      id: 26608787,</span><br><span class="line">      al: &#123;</span><br><span class="line">        id: 2532179,</span><br><span class="line">        name: &quot;2013 陈奕迅 music life 精选&quot;,</span><br><span class="line">        pic: 109951166656425500,</span><br><span class="line">        picUrl: &quot;http://p3.music.126.net/1I8ELtF6pswNRAVs4CwjfA==/109951166656425505.jpg&quot;,</span><br><span class="line">        pic_str: &quot;109951166656425505&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      ar: [&#123;</span><br><span class="line">        name: &#x27;陈奕迅&#x27;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;],</span><br><span class="line">    playCurrentIndex: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setPlaylist(state, value)&#123;</span><br><span class="line">      state.playlist = value;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="底部全局播放控件"><a href="#底部全局播放控件" class="headerlink" title="底部全局播放控件"></a>底部全局播放控件</h3><h4 id="音乐播放与暂停"><a href="#音乐播放与暂停" class="headerlink" title="音乐播放与暂停"></a>音乐播放与暂停</h4><ol><li>src&#x2F;App.vue导入PlayController.vue组件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;router-view/&gt;</span><br><span class="line">  &lt;!--底部全局播放控件--&gt;</span><br><span class="line">  &lt;play-controller&gt;&lt;/play-controller&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import PlayController from &quot;@/components/ListView/PlayController.vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App.vue&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    PlayController</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">*&#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  font-family: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line">.icon &#123;</span><br><span class="line">  width: 1rem;</span><br><span class="line">  height: 1rem;</span><br><span class="line">  vertical-align: -0.15em;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">a&#123;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  color: #3e4149;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li>src&#x2F;components&#x2F;ListView创建PlayController.vue<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;playController&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">      &lt;!--封面--&gt;</span><br><span class="line">      &lt;img :src=&quot;playlist[playCurrentIndex].al.picUrl&quot; alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">        &lt;!--歌曲名--&gt;</span><br><span class="line">        &lt;div class=&quot;title&quot;&gt;&#123;&#123;playlist[playCurrentIndex].name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;tips&quot;&gt;横滑可以切换上下首&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">      &lt;!--播放按钮--&gt;</span><br><span class="line">      &lt;svg v-if=&quot;paused&quot;</span><br><span class="line">           class=&quot;icon&quot;</span><br><span class="line">           aria-hidden=&quot;true&quot;</span><br><span class="line">           @click=&quot;play&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-16&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">      &lt;!--暂停按钮--&gt;</span><br><span class="line">      &lt;svg v-else</span><br><span class="line">           class=&quot;icon pause&quot;</span><br><span class="line">           aria-hidden=&quot;true&quot;</span><br><span class="line">           @click=&quot;play&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-zanting&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">      &lt;!--列表按钮--&gt;</span><br><span class="line">      &lt;svg class=&quot;icon playlistMusic&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-bofangliebiao&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;audio ref=&quot;audio&quot;</span><br><span class="line">           :src=&quot;`https://music.163.com/song/media/outer/url?id=$&#123;playlist[playCurrentIndex].id&#125;.mp3`&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/audio&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState  &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;PlayController&quot;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      paused: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">      ...mapState([&#x27;playlist&#x27;, &#x27;playCurrentIndex&#x27;])</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    play()&#123;</span><br><span class="line">      // 点击按钮后判断播放按钮是否开启</span><br><span class="line">      if(this.$refs.audio.paused)&#123;</span><br><span class="line">        // 点击播放</span><br><span class="line">        this.$refs.audio.play();</span><br><span class="line">        // 隐藏播放按钮</span><br><span class="line">        this.paused = false;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        // 点击暂停</span><br><span class="line">        this.$refs.audio.pause();</span><br><span class="line">        // 隐藏暂停按钮</span><br><span class="line">        this.paused = true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.playController&#123;</span><br><span class="line">  width: 7.5rem;</span><br><span class="line">  height: 1.2rem;</span><br><span class="line">  left: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  position: fixed;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">  border-top: 1px solid #ccc;</span><br><span class="line">  .left&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    padding: 0 0.4rem;</span><br><span class="line">    img&#123;</span><br><span class="line">      width: 0.8rem;</span><br><span class="line">      height: 0.8rem;</span><br><span class="line">      margin-right: 0.2rem;</span><br><span class="line">      border-radius: 0.5rem;</span><br><span class="line">    &#125;</span><br><span class="line">    .content&#123;</span><br><span class="line">      .title&#123;</span><br><span class="line">        font-size: 0.3rem;</span><br><span class="line">        color: rgba(0, 0, 0, 0.8);</span><br><span class="line">        // 防止标题溢出</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        text-overflow: ellipsis;</span><br><span class="line">        display: -webkit-box;</span><br><span class="line">        -webkit-box-orient: vertical;</span><br><span class="line">        -webkit-line-clamp: 1;</span><br><span class="line">      &#125;</span><br><span class="line">      .tips&#123;</span><br><span class="line">        margin-top: 0.05rem;</span><br><span class="line">        font-size: 0.1rem;</span><br><span class="line">        color: rgba(0, 0, 0, 0.5);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .right&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    .icon&#123;</span><br><span class="line">      width: 0.6rem;</span><br><span class="line">      height: 0.6rem;</span><br><span class="line">      margin: 0 0.2rem;</span><br><span class="line">    &#125;</span><br><span class="line">    .pause&#123;</span><br><span class="line">      width: 0.57rem;</span><br><span class="line">      height: 0.57rem;</span><br><span class="line">      padding-right: 0.05rem;</span><br><span class="line">    &#125;</span><br><span class="line">    .playlistMusic&#123;</span><br><span class="line">      width: 0.57rem;</span><br><span class="line">      height: 0.57rem;</span><br><span class="line">      padding-right: 0.05rem;</span><br><span class="line">      //svg线条变细</span><br><span class="line">      shape-rendering: crispEdges;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="切换歌曲"><a href="#切换歌曲" class="headerlink" title="切换歌曲"></a>切换歌曲</h4><ol><li>api&#x2F;index.js添加修改播放索引<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  setPlaylist(state, value)&#123;</span><br><span class="line">    state.playlist = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 修改播放索引</span><br><span class="line">  setPlayIndex(state, value)&#123;</span><br><span class="line">    state.playCurrentIndex = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>PlayList.vue添加setPlayIndex点击事件，识别播放第几首<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;left&quot; @click=&quot;setPlayIndex(i)&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--播放按钮--&gt;</span><br><span class="line">&lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;</span><br><span class="line">     @click=&quot;setPlayIndex(i)&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;use xlink:href=&quot;#icon-play&quot;&gt;&lt;/use&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure></li><li>预览效果<img src="/img/content_musicApp2.webp" width="50%" height="50%"></li></ol><h3 id="播放音乐页面"><a href="#播放音乐页面" class="headerlink" title="播放音乐页面"></a>播放音乐页面</h3><ol><li>老师讲得非常乱，bug很多，部分地方我也懵，不细致写了，直接扔完整代码</li><li>PlayController.vue导入PlayMusic.vue组件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;playController&quot;&gt;</span><br><span class="line">    &lt;!--点击封面歌曲名显示播放界面--&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot; @click=&quot;show=!show&quot;&gt;</span><br><span class="line">      &lt;!--封面--&gt;</span><br><span class="line">      &lt;img :src=&quot;playlist[playCurrentIndex].al.picUrl&quot; alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">        &lt;!--歌曲名--&gt;</span><br><span class="line">        &lt;div class=&quot;title&quot;&gt;&#123;&#123;playlist[playCurrentIndex].name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;tips&quot;&gt;横滑可以切换上下首&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">      &lt;!--播放按钮--&gt;</span><br><span class="line">      &lt;svg v-if=&quot;paused&quot;</span><br><span class="line">           class=&quot;icon&quot;</span><br><span class="line">           aria-hidden=&quot;true&quot;</span><br><span class="line">           @click=&quot;play&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-16&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">      &lt;!--暂停按钮--&gt;</span><br><span class="line">      &lt;svg v-else</span><br><span class="line">           class=&quot;icon pause&quot;</span><br><span class="line">           aria-hidden=&quot;true&quot;</span><br><span class="line">           @click=&quot;play&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-zanting&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">      &lt;!--列表按钮--&gt;</span><br><span class="line">      &lt;svg class=&quot;icon playlistMusic&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-bofangliebiao&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;audio ref=&quot;audio&quot;</span><br><span class="line">           :src=&quot;`https://music.163.com/song/media/outer/url?id=$&#123;playlist[playCurrentIndex].id&#125;.mp3`&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/audio&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;!--播放界面，@back接收到子组件请求时进行取反，show控制是否显示，传递数据给子组件--&gt;</span><br><span class="line">  &lt;play-music</span><br><span class="line">    @back=&quot;show=!show&quot;</span><br><span class="line">    v-show=&quot;show&quot;</span><br><span class="line">    :paused=&quot;paused&quot;</span><br><span class="line">    :play=&quot;play&quot;</span><br><span class="line">    :playDetail=&quot;playlist[playCurrentIndex]&quot;</span><br><span class="line">  &gt;</span><br><span class="line">  &lt;/play-music&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState  &#125; from &#x27;vuex&#x27;</span><br><span class="line">import PlayMusic from &quot;@/components/ListView/PlayMusic.vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;PlayController&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    PlayMusic</span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      paused: true,</span><br><span class="line">      show: false,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState([&#x27;playlist&#x27;, &#x27;playCurrentIndex&#x27;])</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    play()&#123;</span><br><span class="line">      // 点击按钮后判断播放按钮是否开启</span><br><span class="line">      if(this.$refs.audio.paused)&#123;</span><br><span class="line">        // 点击播放</span><br><span class="line">        this.$refs.audio.play();</span><br><span class="line">        // 隐藏播放按钮</span><br><span class="line">        this.paused = false;</span><br><span class="line">        this.UpdateTime()</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        // 点击暂停</span><br><span class="line">        this.$refs.audio.pause();</span><br><span class="line">        // 隐藏暂停按钮</span><br><span class="line">        this.paused = true;</span><br><span class="line">        clearInterval(this.$store.state.id)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 歌词更新时间</span><br><span class="line">    UpdateTime()&#123;</span><br><span class="line">      this.$store.state.id = setInterval(() =&gt; &#123;</span><br><span class="line">        this.$store.commit(&#x27;setCurrentTime&#x27;, this.$refs.audio.currentTime)</span><br><span class="line">      &#125;,1000)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    // 调用store下的异步函数，第一个参数函数名reqLyric，第二个参数传入id</span><br><span class="line">    this.$store.dispatch(</span><br><span class="line">      &#x27;reqLyric&#x27;,</span><br><span class="line">      &#123; id: this.playlist[this.playCurrentIndex].id &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  updated() &#123;</span><br><span class="line">    this.$store.dispatch(</span><br><span class="line">      &#x27;reqLyric&#x27;,</span><br><span class="line">      &#123; id: this.playlist[this.playCurrentIndex].id &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.playController&#123;</span><br><span class="line">  width: 7.5rem;</span><br><span class="line">  height: 1.2rem;</span><br><span class="line">  left: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  position: fixed;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">  border-top: 1px solid #ccc;</span><br><span class="line">  .left&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    padding: 0 0.4rem;</span><br><span class="line">    img&#123;</span><br><span class="line">      width: 0.8rem;</span><br><span class="line">      height: 0.8rem;</span><br><span class="line">      margin-right: 0.2rem;</span><br><span class="line">      border-radius: 0.5rem;</span><br><span class="line">    &#125;</span><br><span class="line">    .content&#123;</span><br><span class="line">      .title&#123;</span><br><span class="line">        font-size: 0.3rem;</span><br><span class="line">        color: rgba(0, 0, 0, 0.8);</span><br><span class="line">        // 防止标题溢出</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        text-overflow: ellipsis;</span><br><span class="line">        display: -webkit-box;</span><br><span class="line">        -webkit-box-orient: vertical;</span><br><span class="line">        -webkit-line-clamp: 1;</span><br><span class="line">      &#125;</span><br><span class="line">      .tips&#123;</span><br><span class="line">        margin-top: 0.05rem;</span><br><span class="line">        font-size: 0.1rem;</span><br><span class="line">        color: rgba(0, 0, 0, 0.5);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .right&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    .icon&#123;</span><br><span class="line">      width: 0.6rem;</span><br><span class="line">      height: 0.6rem;</span><br><span class="line">      margin: 0 0.2rem;</span><br><span class="line">    &#125;</span><br><span class="line">    .pause&#123;</span><br><span class="line">      width: 0.57rem;</span><br><span class="line">      height: 0.57rem;</span><br><span class="line">      padding-right: 0.05rem;</span><br><span class="line">    &#125;</span><br><span class="line">    .playlistMusic&#123;</span><br><span class="line">      width: 0.57rem;</span><br><span class="line">      height: 0.57rem;</span><br><span class="line">      padding-right: 0.05rem;</span><br><span class="line">      //svg线条变细</span><br><span class="line">      shape-rendering: crispEdges;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li>src&#x2F;components&#x2F;ListView创建PlayMusic.vue组件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;playMusic&quot;&gt;</span><br><span class="line">    &lt;!--动态获取背景占满屏幕--&gt;</span><br><span class="line">    &lt;div class=&quot;bg&quot;</span><br><span class="line">         :style=&quot;&#123; backgroundImage: `url($&#123;playDetail.al.picUrl&#125;)`&#125;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;playTop&quot;&gt;</span><br><span class="line">      &lt;!--返回键，点击子组件向父组件发送back请求--&gt;</span><br><span class="line">      &lt;div class=&quot;back&quot;</span><br><span class="line">           @click=&quot;$emit(&#x27;back&#x27;); goCover()&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">          &lt;use xlink:href=&quot;#icon-zuojiantou&quot;&gt;&lt;/use&gt;</span><br><span class="line">        &lt;/svg&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!--歌曲名和作者--&gt;</span><br><span class="line">      &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">          &lt;!--marquee滚动标签--&gt;</span><br><span class="line">          &lt;marquee behavior=&quot;scroll&quot; direction=&quot;left&quot;&gt;</span><br><span class="line">            &#123;&#123;playDetail.name&#125;&#125;</span><br><span class="line">          &lt;/marquee&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;author&quot;&gt;&#123;&#123;playDetail.ar[0].name&#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!--分享--&gt;</span><br><span class="line">      &lt;div class=&quot;share&quot;&gt;</span><br><span class="line">        &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">          &lt;use xlink:href=&quot;#icon-fenxiang-&quot;&gt;&lt;/use&gt;</span><br><span class="line">        &lt;/svg&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;playContent&quot;</span><br><span class="line">         v-show=&quot;!isLyric&quot;</span><br><span class="line">         @click=&quot;goLyrics()&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;!--指针，点击播放获取active样式--&gt;</span><br><span class="line">      &lt;img :class=&quot;&#123;active: !paused&#125;&quot;</span><br><span class="line">           class=&quot;needle&quot;</span><br><span class="line">           src=&quot;@/assets/img/needle-ab.png&quot; alt=&quot;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">      &lt;!--磁碟--&gt;</span><br><span class="line">      &lt;img class=&quot;disc&quot; src=&quot;@/assets/img/disc-ip6.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;!--磁碟中间的背景图，点击播放获取rotate样式--&gt;</span><br><span class="line">      &lt;img :class=&quot;&#123;rotate: !paused&#125;&quot;</span><br><span class="line">        class=&quot;playImg&quot;</span><br><span class="line">        :src=&quot;playDetail.al.picUrl&quot; alt=&quot;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!--歌词--&gt;</span><br><span class="line">    &lt;div class=&quot;playLyric&quot;</span><br><span class="line">         v-show=&quot;isLyric&quot;</span><br><span class="line">         @click=&quot;goCover()&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;p :class=&quot;&#123;active: (</span><br><span class="line">                  (currentTime * 1000) &gt; item.pre &amp;&amp;</span><br><span class="line">                  currentTime * 1000 &lt; item.time)&#125;&quot;</span><br><span class="line">         v-for=&quot;(item, i) in $store.getters.lyricList&quot;</span><br><span class="line">         :key=&quot;i&quot;</span><br><span class="line">         ref=&quot;playLyric&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;&#123;item.lyric&#125;&#125;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;progress&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;playFooter&quot;&gt;</span><br><span class="line">      &lt;!--循环--&gt;</span><br><span class="line">      &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-xunhuan&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">      &lt;!--上一首--&gt;</span><br><span class="line">      &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;</span><br><span class="line">           @click=&quot;goPlay(-1)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-shangyishoushangyige&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">      &lt;!--播放--&gt;</span><br><span class="line">      &lt;svg v-if=&quot;paused&quot;</span><br><span class="line">           class=&quot;icon play&quot;</span><br><span class="line">           aria-hidden=&quot;true&quot;</span><br><span class="line">           @click=&quot;play&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-bofang&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">      &lt;!--暂停--&gt;</span><br><span class="line">      &lt;svg v-else</span><br><span class="line">           class=&quot;icon play&quot;</span><br><span class="line">           aria-hidden=&quot;true&quot;</span><br><span class="line">           @click=&quot;play&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-zanting&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">      &lt;!--下一首--&gt;</span><br><span class="line">      &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;</span><br><span class="line">           @click=&quot;goPlay(1)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-xiayigexiayishou&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">      &lt;!--待播列表--&gt;</span><br><span class="line">      &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">        &lt;use xlink:href=&quot;#icon-bofangliebiao&quot;&gt;&lt;/use&gt;</span><br><span class="line">      &lt;/svg&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState &#125; from &quot;vuex&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;PlayMusic&quot;,</span><br><span class="line">  props: [&#x27;playDetail&#x27;, &#x27;paused&#x27;, &#x27;play&#x27;],</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      isLyric: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    ...mapState([&#x27;lyric&#x27;, &#x27;currentTime&#x27;, &#x27;playlist&#x27;, &#x27;playCurrentIndex&#x27;]),</span><br><span class="line">  &#125;,</span><br><span class="line">  watch:&#123;</span><br><span class="line">    currentTime(newValue)&#123;</span><br><span class="line">      let p = document.querySelector(&#x27;p.active&#x27;);</span><br><span class="line">      if(p)&#123;</span><br><span class="line">        let offsetTop = p.offsetTop;</span><br><span class="line">        this.$refs.playLyric.scrollTop = p.offsetTop;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    // 切换歌曲</span><br><span class="line">    goPlay(num)&#123;</span><br><span class="line">      let index = this.playCurrentIndex + num;</span><br><span class="line">      if(index &lt; 0)&#123;</span><br><span class="line">        index = this.playlist.length - 1;</span><br><span class="line">      &#125;else if(index === this.playlist.length)&#123;</span><br><span class="line">        index = 0;</span><br><span class="line">      &#125;</span><br><span class="line">      this.$store.commit(&#x27;setPlayIndex&#x27;, index)</span><br><span class="line">    &#125;,</span><br><span class="line">    goCover()&#123;</span><br><span class="line">      this.isLyric = false;</span><br><span class="line">    &#125;,</span><br><span class="line">    goLyrics()&#123;</span><br><span class="line">      this.isLyric = !this.isLyric;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.playMusic&#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  //宽高各100vw、100vh占满全屏</span><br><span class="line">  width: 100vw;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  //优先级设高一点，避免主页打开显示其他内容</span><br><span class="line">  z-index: 1;</span><br><span class="line">  //添加滤镜后四周透明需要再加白色背景遮挡</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  .bg&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    width: 100vw;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    background-size: auto 100%;</span><br><span class="line">    background-position: center;</span><br><span class="line">    // 添加滤镜使背景模糊，降低亮度</span><br><span class="line">    filter: blur(0.8rem) brightness(80%);</span><br><span class="line">  &#125;</span><br><span class="line">  .playTop&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    position: absolute;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    align-items: center;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    width: 7.5rem;</span><br><span class="line">    height: 1.2rem;</span><br><span class="line">    padding: 0.8rem 0.4rem;</span><br><span class="line">    color: #fff;</span><br><span class="line">    .icon&#123;</span><br><span class="line">      width: 0.7rem;</span><br><span class="line">      height: 0.7rem;</span><br><span class="line">      fill: #fff;</span><br><span class="line">    &#125;</span><br><span class="line">    .center&#123;</span><br><span class="line">      width: 4.8rem;</span><br><span class="line">      height: 0.75rem;</span><br><span class="line">      line-height: 0.35rem;</span><br><span class="line">      .title&#123;</span><br><span class="line">        font-size: 0.35rem;</span><br><span class="line">        flex: 1;</span><br><span class="line">      &#125;</span><br><span class="line">      .author&#123;</span><br><span class="line">        font-size: 0.1rem;</span><br><span class="line">        color: #ccc;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .playContent&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 7.5rem;</span><br><span class="line">    height: 7.5rem;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 1.5rem;</span><br><span class="line">    .needle&#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      width: 2.2rem;</span><br><span class="line">      height: auto;</span><br><span class="line">      left: 3.5rem;</span><br><span class="line">      //避免指针被磁碟挡住</span><br><span class="line">      z-index: 1;</span><br><span class="line">      transform-origin: 0.3rem 0;</span><br><span class="line">      transform: rotate(-20deg);</span><br><span class="line">      transition: all 1s;</span><br><span class="line">    &#125;</span><br><span class="line">    //指针移动到磁碟上</span><br><span class="line">    .needle.active&#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      width: 2.2rem;</span><br><span class="line">      height: auto;</span><br><span class="line">      left: 3.5rem;</span><br><span class="line">      //避免指针被磁碟挡住</span><br><span class="line">      z-index: 1;</span><br><span class="line">      transform-origin: 0.3rem 0;</span><br><span class="line">      transform: rotate(2deg);</span><br><span class="line">      transition: all 1s;</span><br><span class="line">    &#125;</span><br><span class="line">    .disc&#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      width: 6rem;</span><br><span class="line">      height: auto;</span><br><span class="line">      left: calc(50% - 3rem);</span><br><span class="line">      top: 2.2rem;</span><br><span class="line">    &#125;</span><br><span class="line">    .playImg&#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      width: 4rem;</span><br><span class="line">      height: 4rem;</span><br><span class="line">      border-radius: 2rem;</span><br><span class="line">      left: calc(50% - 2rem);</span><br><span class="line">      top: 3.2rem;</span><br><span class="line">    &#125;</span><br><span class="line">    .playImg&#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      width: 4rem;</span><br><span class="line">      height: 4rem;</span><br><span class="line">      border-radius: 2rem;</span><br><span class="line">      left: calc(50% - 2rem);</span><br><span class="line">      top: 3.2rem;</span><br><span class="line">    &#125;</span><br><span class="line">    @keyframes changeDeg&#123;</span><br><span class="line">      0%&#123;</span><br><span class="line">        transform: rotate(0deg);</span><br><span class="line">      &#125;</span><br><span class="line">      100%&#123;</span><br><span class="line">        transform: rotate(360deg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //磁碟中间背景图旋转动画</span><br><span class="line">    .playImg.rotate&#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      width: 4rem;</span><br><span class="line">      height: 4rem;</span><br><span class="line">      border-radius: 2rem;</span><br><span class="line">      left: calc(50% - 2rem);</span><br><span class="line">      top: 3.2rem;</span><br><span class="line">      animation: changeDeg 15s linear 1s infinite;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .playFooter&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    align-items: center;</span><br><span class="line">    padding-left: 0.6rem;</span><br><span class="line">    padding-right: 0.6rem;</span><br><span class="line">    padding-bottom: 0.8rem;</span><br><span class="line">    width: 7.5rem;</span><br><span class="line">    height: 1.5rem;</span><br><span class="line">    left: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    .icon&#123;</span><br><span class="line">      fill: #fff;</span><br><span class="line">      width: 0.6rem;</span><br><span class="line">      height: 0.6rem;</span><br><span class="line">    &#125;</span><br><span class="line">    .play&#123;</span><br><span class="line">      width: 1rem;</span><br><span class="line">      height: 1rem;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .playLyric&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 7.5rem;</span><br><span class="line">    height: 8rem;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: calc(50% - 4rem);</span><br><span class="line">    text-align: center;</span><br><span class="line">    padding: 0.2rem 0;</span><br><span class="line">    color: rgba(255, 255, 255, 0.8);</span><br><span class="line">    //歌词溢出滚动</span><br><span class="line">    overflow: scroll;</span><br><span class="line">    //歌词选中时变色</span><br><span class="line">    .active&#123;</span><br><span class="line">      color: #a5dee5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li>src&#x2F;api&#x2F;index.js添加获取歌词的请求<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line"></span><br><span class="line">let baseUrl = &#x27;http://localhost:3000&#x27;</span><br><span class="line"></span><br><span class="line">// 获取轮播图的api，type:资源类型，对应以下类型，默认为0即PC</span><br><span class="line">// 1: android; 2: iphone; 3: ipad</span><br><span class="line">export let getBanner = (type=0) =&gt; &#123;</span><br><span class="line">  return axios.get(`$&#123;baseUrl&#125;/banner?type=$&#123;type&#125;`)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取推荐歌单，可选参数limit:取出数量，默认为10</span><br><span class="line">export let getMusicList = (limit=10) =&gt; &#123;</span><br><span class="line">  return axios.get(`$&#123;baseUrl&#125;/personalized?limit=$&#123;limit&#125;`)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取歌单详情</span><br><span class="line">export let getPlaylistDetail = (id) =&gt; &#123;</span><br><span class="line">  return axios.get(`$&#123;baseUrl&#125;/playlist/detail?id=$&#123;id&#125;`)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取歌词</span><br><span class="line">export let getLyric = (id) =&gt; &#123;</span><br><span class="line">  return axios.get(`$&#123;baseUrl&#125;/lyric?id=$&#123;id&#125;`)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  getBanner, getMusicList, getPlaylistDetail, getLyric</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>src&#x2F;store&#x2F;index.js添加播放音乐页面属性方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">import api from &quot;@/api/index.js&quot;</span><br><span class="line"></span><br><span class="line">export default createStore(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    // 初始化避免报错</span><br><span class="line">    playlist: [&#123;</span><br><span class="line">      name: &#x27;岁月如歌&#x27;,</span><br><span class="line">      id: 26608787,</span><br><span class="line">      al: &#123;</span><br><span class="line">        id: 2532179,</span><br><span class="line">        name: &quot;2013 陈奕迅 music life 精选&quot;,</span><br><span class="line">        pic: 109951166656425500,</span><br><span class="line">        picUrl: &quot;http://p3.music.126.net/1I8ELtF6pswNRAVs4CwjfA==/109951166656425505.jpg&quot;,</span><br><span class="line">        pic_str: &quot;109951166656425505&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      ar: [&#123;</span><br><span class="line">        name: &#x27;陈奕迅&#x27;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;],</span><br><span class="line">    playCurrentIndex: 0,</span><br><span class="line">    // 歌词</span><br><span class="line">    lyric: &#x27;&#x27;,</span><br><span class="line">    // 歌词更新时间</span><br><span class="line">    currentTime: 0,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    // 修改播放列表</span><br><span class="line">    setPlaylist(state, value)&#123;</span><br><span class="line">      state.playlist = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 修改播放索引</span><br><span class="line">    setPlayIndex(state, value)&#123;</span><br><span class="line">      state.playCurrentIndex = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 修改歌词</span><br><span class="line">    setLyric(state, value)&#123;</span><br><span class="line">      state.lyric = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 修改歌词更新时间</span><br><span class="line">    setCurrentTime(state, value)&#123;</span><br><span class="line">      state.currentTime = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    // 异步获取歌词后，调用修改歌词方法</span><br><span class="line">    async reqLyric(content, payload)&#123;</span><br><span class="line">      let result = await api.getLyric(payload.id)</span><br><span class="line">      content.commit(&#x27;setLyric&#x27;, result.data.lrc.lyric)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    // 分割歌词获取分、秒、毫、词、总时间</span><br><span class="line">    lyricList(state)&#123;</span><br><span class="line">      let arr = state.lyric.split(/\n/igs).map((item, i, arr) =&gt; &#123;</span><br><span class="line">        let min = parseInt(item.slice(1, 3));</span><br><span class="line">        let sec = parseInt(item.slice(4, 6));</span><br><span class="line">        let milli = parseInt(item.slice(7, 10));</span><br><span class="line">        return &#123;</span><br><span class="line">          min, sec, milli,</span><br><span class="line">          lyric:item.slice(11, item.length),</span><br><span class="line">          content: item,</span><br><span class="line">          time: milli +</span><br><span class="line">                sec * 1000 +</span><br><span class="line">                min * 60 * 1000</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      arr.forEach((item, i) =&gt; &#123;</span><br><span class="line">        if (i===0)&#123;</span><br><span class="line">          item.pre = 0</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          item.pre = arr[i - 1].time</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      return arr</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>预览效果<img src="/img/content_musicApp3.webp" width="50%" height="50%"><img src="/img/content_musicApp4.webp" width="50%" height="50%"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue框架学习笔记</title>
      <link href="/archives/59d49f4.html"/>
      <url>/archives/59d49f4.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h2><ol><li><p>Vue是JS延伸出的一种框架，能在一个组件中写HTML、CSS、JS，它不需要操作DOM，而是通过渲染方式挂载到页面上，效率是不是会高一些呢？</p></li><li><p>写代码也很爽，我想给一个功能添加点击事件，只需要给标签绑定@click，再到方法里写绑定事件的函数，这样就好了；对比原生js，你需要到html添加id属性，在回到js获取id，再给id绑定事件写函数，步骤是不是较为繁琐？</p></li><li><p>说说不好的点，你需要记住大量指令，经常查阅文档是家常便饭的事</p></li></ol><h2 id="安装过程与创建hello-world项目"><a href="#安装过程与创建hello-world项目" class="headerlink" title="安装过程与创建hello-world项目"></a>安装过程与创建hello-world项目</h2><ol><li><p>安装Node，选择长期维护版，自带npm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 查询node版本</span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line">// 查询npm版本</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li><p>通过npm指令安装nrm，nrm是管理npm的工具，由于npm服务器在国外，通过npm下载依赖会因为墙问题，导致项目运行不起来，所以需要nrm修改下载源，比如taobao镜像源在国内，下载速度会快一些</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 安装nrm</span><br><span class="line">npm install nrm -g</span><br><span class="line"></span><br><span class="line">// 查看所有支持源</span><br><span class="line">nrm ls</span><br><span class="line"></span><br><span class="line">// 使用taobao镜像源</span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure></li><li><p>安装vue脚手架，用游戏方式来理解，vue官方开局送你一套强力装备，让你能开局直接打Boss</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 删除旧的vue脚手架，第一次安装vue脚手，请跳过它</span><br><span class="line">npm uninstall vue-cli -g</span><br><span class="line"></span><br><span class="line">// 删除旧的vue脚手架，第一次安装vue脚手，请跳过它</span><br><span class="line">yarn global remove vue-cli</span><br><span class="line"></span><br><span class="line">// 安装vue脚手架</span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure></li><li><p>控制台指令，实在不懂上google</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 返回上一级文件</span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">// 默认根目录，进入到桌面</span><br><span class="line">cd Desktop</span><br><span class="line"></span><br><span class="line">// 默认根目录，进入到文稿</span><br><span class="line">cd Documents</span><br><span class="line"></span><br><span class="line">// 清一下控制台</span><br><span class="line">clear</span><br></pre></td></tr></table></figure></li><li><p>创建vue项目，我习惯在文稿中生成项目，当然你也可以在桌面或其他地方生成；如果你对vue-cli内容感兴趣，可到vue官网查看<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html">请点击我跳转</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 默认根目录，进入到文稿，文稿指mac电脑，win电脑需要指定cdef盘</span><br><span class="line">Mac: cd Documents</span><br><span class="line">windows: 进入d盘，在d盘的地址栏输入cmd按下回车，会生成d盘路径的命令窗口；d盘鼠标右键也会生成d盘路径的命令窗口</span><br><span class="line"></span><br><span class="line">// 创建新项目，项目名叫hello-world</span><br><span class="line">vue create hello-world</span><br><span class="line"></span><br><span class="line">// 学习vue基础，默认vue3版本够用了</span><br><span class="line">// 手动选择功能则是添加额外插件，例如TypeScript、Router、Vuex...</span><br><span class="line">Default([Vue 3]babel, eslint)</span><br><span class="line"></span><br><span class="line">// 项目生成后，进入hello-world项目</span><br><span class="line">cd hello-world</span><br><span class="line"></span><br><span class="line">// 启动你的项目吧 XD</span><br><span class="line">npm run serve</span><br><span class="line"></span><br><span class="line">// 点击链接查看页面</span><br><span class="line">Local: http://localhost:8080/ </span><br></pre></td></tr></table></figure></li><li><p>项目文件说明</p><table><thead><tr><th>文件名</th><th>说明</th></tr></thead><tbody><tr><td>public</td><td>项目入口文件，存放index.html文件，通常不做任何修改</td></tr><tr><td>src</td><td>写代码的地方</td></tr><tr><td>src&#x2F;assets</td><td>存放静态资源，比如背景图、图标等图片资源，再或者公共样式文件</td></tr><tr><td>src&#x2F;components</td><td>存放抽离出来的公共组件</td></tr><tr><td>src&#x2F;router</td><td>路由管理</td></tr><tr><td>src&#x2F;store</td><td>全局状态管理文件</td></tr><tr><td>src&#x2F;views</td><td>存放比较大的视图级组件</td></tr><tr><td>src&#x2F;App.vue</td><td>项目根组件，所有组件通过路由引入到App.vue才能在页面中显示出来</td></tr><tr><td>src&#x2F;main.js</td><td>项目入口文件，webpack打包时会以main.js为起点</td></tr><tr><td>.gitignore</td><td>告诉git要忽略项目中的哪些文件或文件夹，主要用在上传项目到git仓库</td></tr><tr><td>babel.config.js</td><td>项目范围的配置，支持es6、es7等语法，最新语法能转换成浏览器识别的老式语言</td></tr><tr><td>jsconfig.json</td><td>对JS项目目录提供个性化支持：比如路径短写、引入文件自动完成等，提升开发体</td></tr><tr><td>package.json</td><td>项目描述文件，能了解到项目版本号、依赖等信息，记录版本范围</td></tr><tr><td>package-lock.json</td><td>项目所依赖的第三方包的版本号，记录精确版本号</td></tr><tr><td>README</td><td>项目说明文档</td></tr><tr><td>vue.config.js</td><td>不怎么了解，好像是用来修改webpack配置</td></tr></tbody></table></li><li><p>github下载vue项目运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// cnpm是淘宝团队提供的一个npm国内替代工具，请先安装cnpm</span><br><span class="line">npm install -g cnpm</span><br><span class="line"></span><br><span class="line">// 进入项目</span><br><span class="line">cd 项目文件名</span><br><span class="line"></span><br><span class="line">// 安装依赖</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">// 如果npm安装依赖失败，换成cnpm再试试</span><br><span class="line">cnpm install</span><br><span class="line"></span><br><span class="line">// 运行项目，要么dev要么serve</span><br><span class="line">// 不知道用哪个，看项目文档或package.js文件的&quot;scripts&quot;</span><br><span class="line">npm run dev或serve</span><br></pre></td></tr></table></figure></li></ol><h2 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h2><ol><li>常用指令<table><thead><tr><th>指令</th><th>说明</th><th>代码</th></tr></thead><tbody><tr><td>v-bind</td><td>绑定属性</td><td><code>&lt;a :href=&quot;url&quot;&gt; ... &lt;/a&gt;</code></td></tr><tr><td>v-on</td><td>绑定事件</td><td><code>&lt;a @click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;</code></td></tr><tr><td>v-if</td><td>判断</td><td><code>&lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;</code></td></tr><tr><td>v-show</td><td>判断</td><td><code>&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;</code></td></tr><tr><td>v-for</td><td>循环</td><td><code>&lt;li v-for=&quot;item in items&quot;&gt;&lt;/li&gt;</code></td></tr><tr><td>v-model</td><td>双向绑定</td><td><code>&lt;input v-model=&quot;message&quot; placeholder=&quot;edit me&quot; /&gt;</code></td></tr><tr><td>v-once</td><td>只渲染一次</td><td><code>&lt;span v-once&gt;这个将不会改变: &#123;&#123; msg &#125;&#125;&lt;/span&gt;</code></td></tr><tr><td>v-html</td><td>按普通HTML插入</td><td><code>&lt;div v-html=&quot;&#39;&lt;h1&gt;Hello World&lt;/h1&gt;&#39;&quot;&gt;&lt;/div&gt;</code></td></tr></tbody></table></li></ol><blockquote><p>v-if和v-show区别，如果是频繁切换显示，v-show性能影响较小<br>v-for第一个参数是值，第二个参数是索引；需配合:key使用否则报错</p></blockquote><h2 id="vue方法"><a href="#vue方法" class="headerlink" title="vue方法"></a>vue方法</h2><ol><li>methods：方法，用来写方法的地方</li><li>computed：计算属性，methods和computed都能用来计算，区别在computed有缓存</li><li>watch：侦听器，用来感应数据变化，第一个参数新数据，第二个参数旧数据</li></ol><h2 id="class与style绑定"><a href="#class与style绑定" class="headerlink" title="class与style绑定"></a>class与style绑定</h2><ol><li>第一种class写法，通常用来增删、切换class<br><code>&lt;div :class=&quot;msg&quot;&gt;hello, 幽蓝&lt;/div&gt;</code></li><li>第二种class写法，通常用来显示隐藏样式，active表示class名，isActive设置true表示显示<br><code>&lt;div :class=&quot;&#123;active: isActive&#125;&quot;&gt;hello，幽蓝&lt;/div&gt;</code></li><li>第一种style绑定，通常绑定到对象，在styleObject上写样式更直观易懂<br><code>&lt;div :style=&quot;styleObject&quot;&gt;&lt;/div&gt;</code></li><li>第二种style绑定，直接写上去，阅读体验可能不太好<br><code>&lt;div :style=&quot;&#123; color: activeColor, fontSize: fontSize + &#39;px&#39; &#125;&quot;&gt;&lt;/div&gt;</code></li></ol><blockquote><p>补充说明：script写样式推荐用驼峰形式，短横杠形式需要添加引号怪麻烦的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    styleObj: &#123;</span><br><span class="line">      backgroundColor: &quot;purple&quot;,</span><br><span class="line">      &quot;font-size&quot;: &quot;24px&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件传值与多个处理函数"><a href="#事件传值与多个处理函数" class="headerlink" title="事件传值与多个处理函数"></a>事件传值与多个处理函数</h2><ol><li>事件传递参数，如果是传递event对象需要添加$符号<br><code>&lt;h1 @click=&quot;addNumEventTwo(10, $event)&quot;&gt;count: &#123;&#123; num &#125;&#125;&lt;/h1&gt;</code></li><li>事件绑定多个处理函数，用分号隔开，以及使用函数调用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style=&quot;&#123;backgroundColor:color&#125;&quot;&gt;count: &#123;&#123; num &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; @click=&quot;addNumEvent(10);changeColor(&#x27;yellow&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><ol><li><p>事件修饰符</p><table><thead><tr><th align="left">事件修饰符</th><th align="left">说明</th><th align="left">代码</th></tr></thead><tbody><tr><td align="left">.stop</td><td align="left">阻止事件冒泡</td><td align="left"><code>&lt;a @click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</code></td></tr><tr><td align="left">.prevent</td><td align="left">阻止默认事件</td><td align="left"><code>&lt;form @submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</code></td></tr><tr><td align="left">.capture</td><td align="left">添加事件捕获模式</td><td align="left"><code>&lt;div @click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</code></td></tr><tr><td align="left">.self</td><td align="left">自身触发处理函数</td><td align="left"><code>&lt;div @click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</code></td></tr><tr><td align="left">.once</td><td align="left">只触发一次</td><td align="left"><code>&lt;a @click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</code></td></tr><tr><td align="left">.passive</td><td align="left">滚动时立即触发</td><td align="left"><code>&lt;div @scroll.passive=&quot;onScroll&quot;&gt;...&lt;/div&gt;</code></td></tr></tbody></table></li><li><p>按键修饰符<br>.enter：按下回车键触发处理函数<code>&lt;input type=&quot;text&quot; @keydown=&quot;searchEvent&quot;&gt;</code><br>.tab<br>.delete<br>.esc<br>.space<br>.up<br>.down<br>.left<br>.right</p></li><li><p>系统修饰符<br>.ctrl<br>.alt<br>.shift<br>.meta</p></li><li><p>鼠标修饰符<br>.left<br>.right<br>.middle</p></li><li><p>表单修饰符<br>.lazy：失去焦点才会执行<code>v-model.lazy=&quot;searchKey&quot;</code><br>.number：转为数字<br>.trim：去掉前后空格</p></li></ol><h2 id="父子组件导入导出"><a href="#父子组件导入导出" class="headerlink" title="父子组件导入导出"></a>父子组件导入导出</h2><ol><li><p>template标签导入HelloWorld子组件，单、双标签使用上没区别；两个标签并不会覆盖，而是以复用形式存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;HelloWorld/&gt;</span><br><span class="line">  &lt;HelloWorld&gt;&lt;/HelloWorld&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>组件导入说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// @等同于/src</span><br><span class="line">import HelloWorld from &quot;@/components/HelloWorld.vue&quot;;</span><br><span class="line"></span><br><span class="line">// .等同于当前路径</span><br><span class="line">import App from &quot;./App.vue&quot;;</span><br><span class="line"></span><br><span class="line">// ..等同于上一级路径</span><br><span class="line">import HomeView from &quot;../views/HomeView.vue&quot;;</span><br></pre></td></tr></table></figure></li><li><p>组件导出说明，建议首字母大写，且组件名与文件名是相同的；components是注册组件，比如导入HelloWorld组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 导出名为HomeView的组件，包含注册HelloWorld</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;HomeView&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><ol><li>父组件将数据传递给子组件，由props来接收，同时还具有校验数据的功能<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    // 基础的类型检查 (`null` 和 `undefined` 值会通过任何类型验证)</span><br><span class="line">    propA: Number,</span><br><span class="line">    // 多个可能的类型</span><br><span class="line">    propB: [String, Number],</span><br><span class="line">    // 必填的字符串</span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    // 带有默认值的数字</span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    // 带有默认值的对象</span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      // 对象或数组的默认值必须从一个工厂函数返回</span><br><span class="line">      default() &#123;</span><br><span class="line">        return &#123; message: &#x27;hello&#x27; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 自定义验证函数</span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator(value) &#123;</span><br><span class="line">        // 这个值必须与下列字符串中的其中一个相匹配</span><br><span class="line">        return [&#x27;success&#x27;, &#x27;warning&#x27;, &#x27;danger&#x27;].includes(value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 具有默认值的函数</span><br><span class="line">    propG: &#123;</span><br><span class="line">      type: Function,</span><br><span class="line">      // 与对象或数组的默认值不同，这不是一个工厂函数——这是一个用作默认值的函数</span><br><span class="line">      default() &#123;</span><br><span class="line">        return &#x27;Default function&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h2><ol><li>beforeCreate()：初始化数据之前</li><li>created()：初始化数据之后</li><li>beforeMount()：挂载渲染之前</li><li>mounted()：挂载渲染之后</li><li>beforeUpdate()：更新之前</li><li>updated()：更新之后</li><li>beforeUnmount()：销毁之前</li><li>unmounted()：销毁之后</li></ol><h2 id="组合式API"><a href="#组合式API" class="headerlink" title="组合式API"></a>组合式API</h2><ol><li>通常我们在data写数据，methods写方法，这种分开式写法，在后期修改某块功能，你需要上下反复查找，最怕不小心修改到别人的代码或其他功能；setup则是集中式写法，它使数据、方法等集中写在一块，像传统JS一样</li><li>ref是定义单个数据，相当于data写数据；而定义函数，相当于methods内定义函数，另外说一下，setup不能用this找数据，而是用.value来找<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div @click=&quot;changeNum&quot;&gt;点我加十&#123;&#123;num&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;HelloWorld&quot;,</span><br><span class="line">  setup()&#123;</span><br><span class="line">    const num = ref(0);</span><br><span class="line">    function changeNum()&#123;</span><br><span class="line">      num.value += 10;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;num, changeNum&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>如果说ref()是定义单个数据，那么reactive()就是用来定义多个数据；某一天，我想把名字反转后显示，可以用computed属性来帮助我计算结果，然后以插值形式来展示结果，假如不用computed属性，那么它就不会计算结果，而是获取reverseUsername的值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;用户名：&#123;&#123; user.username &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;年龄：&#123;&#123; user.age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;反转：&#123;&#123; user.reverseUsername &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, reactive, computed &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;HelloWorld&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const user = reactive(&#123;</span><br><span class="line">      username: &quot;幽蓝&quot;,</span><br><span class="line">      age: 9,</span><br><span class="line">      interest: &quot;swim&quot;,</span><br><span class="line">      reverseUsername: computed(() =&gt; &#123;</span><br><span class="line">        return user.username.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    return &#123; user &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>toRefs用来解构对象，可以使插值不必打点调用，缺点是同名覆盖；如果想点击后修改对象的值，按JS方式来写<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;用户名：&#123;&#123; username &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1 @click=&quot;changeAge&quot;&gt;年龄：&#123;&#123; age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;反转：&#123;&#123; reverseUsername &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, computed, toRefs &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;HelloWorld&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const user = reactive(&#123;</span><br><span class="line">      username: &quot;幽蓝&quot;,</span><br><span class="line">      age: 9,</span><br><span class="line">      interest: &quot;swim&quot;,</span><br><span class="line">      reverseUsername: computed(() =&gt; &#123;</span><br><span class="line">        return user.username.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    function changeAge() &#123;</span><br><span class="line">      user.age = 20;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123; ...toRefs(user), changeAge &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>watch与watchEffect看场景灵活使用吧<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1 @click=&quot;changeAge&quot;&gt;年龄：&#123;&#123; age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, watch, watchEffect &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;HelloWorld&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const age = ref(9);</span><br><span class="line">    // 监听指定属性，当属性变化时执行函数，可以获取新值和旧值</span><br><span class="line">    watch(age, (newAge, prevAge) =&gt; &#123;</span><br><span class="line">      console.log(&quot;watch：&quot; + age.value);</span><br><span class="line">      console.log(newAge , prevAge);</span><br><span class="line">    &#125;);</span><br><span class="line">    // 不需要监听指定属性，组件初始化前会自动执行一次，当属性变化时执行函数</span><br><span class="line">    watchEffect(() =&gt; &#123;</span><br><span class="line">      console.log(&quot;watchEffect：&quot; + age.value);</span><br><span class="line">    &#125;);</span><br><span class="line">    function changeAge() &#123;</span><br><span class="line">      age.value++;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123; age, changeAge &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>setup参数：第一个参数props，包含父组件传递给子组件所有数据，第二个参数context暴露一些属性方法，包含attrs、slots、emit<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;HelloWorld :username=&quot;username&quot; :age=&quot;age&quot;/&gt;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">  return&#123;</span><br><span class="line">    username: &#x27;幽蓝&#x27;,</span><br><span class="line">    age: 9</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">&lt;h1&gt;username: &#123;&#123;username&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;age: &#123;&#123;age&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;description: &#123;&#123;description&#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">// props接收父组件传递给子组件所有数据</span><br><span class="line">props: [&quot;username&quot;, &quot;age&quot;],</span><br><span class="line"></span><br><span class="line">// setup的props是响应式数据，不要解构；context是js对象，可以解构</span><br><span class="line">setup(props, context) &#123;</span><br><span class="line">  const description = ref(props.username + &quot;年龄是&quot; + props.age);</span><br><span class="line">  console.log(context);</span><br><span class="line">  return &#123; description &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>provide提供数据，inject接收数据，主要解决props深层嵌套问题<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">import &#123; reactive, provide &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">setup() &#123;</span><br><span class="line">  const student = reactive(&#123;</span><br><span class="line">    name: &quot;张三&quot;,</span><br><span class="line">    classname: &quot;三年1班&quot;</span><br><span class="line">  &#125;);</span><br><span class="line">  // 第一个参数是key，可以取任意名字，提供给inject接收</span><br><span class="line">  // 第二个参数是你想传的值，提供给第一个参数</span><br><span class="line">  provide(&quot;studentA&quot;, student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">&lt;h1&gt;学生&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;name: &#123;&#123; name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;classname: &#123;&#123; classname &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">import &#123; inject &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">props: [&quot;username&quot;, &quot;age&quot;],</span><br><span class="line">setup() &#123;</span><br><span class="line">  const student = inject(&#x27;studentA&#x27;)</span><br><span class="line">  return &#123; ...student &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li><p>vue2脚手架自带路由安装，vue3新推出vite构建工具没有路由，开始安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 用vite构建vue项目，名字取vue3router</span><br><span class="line">npm init vite@latest vue3router --template vue</span><br><span class="line"></span><br><span class="line">// 进入vue3router项目</span><br><span class="line">cd vue3router</span><br><span class="line"></span><br><span class="line">// 安装依赖</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">// 安装router</span><br><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure></li><li><p>你的路径是什么，显示相对应组件<br><code>&lt;router-view&gt;&lt;/router-view&gt;</code></p></li><li><p>路径参数，根据id的不同，显示不同样式，另外:id是一个变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 路径:id写法</span><br><span class="line">&#123; path: &#x27;/users/:id&#x27;, component: User &#125;</span><br><span class="line"></span><br><span class="line">// 获取id</span><br><span class="line">$route.params.id</span><br></pre></td></tr></table></figure></li><li><p>404页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 设置404 notFound页面</span><br><span class="line">&#123; path:&quot;/:path(.*)&quot;, component:NotFound &#125;</span><br></pre></td></tr></table></figure></li><li><p>正则匹配与重复参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// :id仅匹配数字</span><br><span class="line">&#123; path:&quot;/article/:id(\\d+)&quot;, component:Article &#125;</span><br><span class="line"></span><br><span class="line">// +是至少会有1个参数</span><br><span class="line">// *是可有可没有，也可以任意多个</span><br><span class="line">// ？是有或者没有，不可以重复</span><br><span class="line">&#123; path:&quot;/films/:id?&quot;, component:Films &#125;</span><br></pre></td></tr></table></figure></li><li><p>嵌套路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 不同用户显示不同内容</span><br><span class="line">// 这里:id表示  /user/123/xiaoming</span><br><span class="line">// 去掉:id表示  /user/xiaoming</span><br><span class="line">&#123;</span><br><span class="line">  path:&#x27;/user/:id&#x27;,</span><br><span class="line">  component:User,</span><br><span class="line">  children:[</span><br><span class="line">    &#123;</span><br><span class="line">      path:&#x27;xiaoming&#x27;,</span><br><span class="line">      component:XiaoMing</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path:&quot;xiaowang&quot;,</span><br><span class="line">      component:XiaoWang</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编程式导航</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 声明式跳转页面，相当于调用router.push(...)</span><br><span class="line">&lt;router-link to=&quot;/about&quot;&gt;点我去about页面&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">// 编程式跳转页面</span><br><span class="line">&lt;button @click=&quot;goPage&quot;&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  goPage()&#123;</span><br><span class="line">    this.$router.push(&#123;path: &quot;/about&quot;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 携带参数跳转，首先用name起个名，这样编程式函数以name来查找，跳转后显示news/123</span><br><span class="line">&#123;</span><br><span class="line">  name: &#x27;news&#x27;,</span><br><span class="line">  path: &#x27;/news/:id&#x27;,</span><br><span class="line">  components: News</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">this.$router.push(&#123;name: &quot;news&quot;, params: &#123;id:123&#125;&#125;)</span><br><span class="line"></span><br><span class="line">// 携带查询参数，比如百度搜索张三，路径会携带?wd=张三</span><br><span class="line">this.$router.push(&#123;path: &quot;/&quot;, query: &#123;wd: &quot;张三&quot;&#125;&#125;)</span><br><span class="line"></span><br><span class="line">// 替换页面</span><br><span class="line">this.$router.replace(...)</span><br><span class="line"></span><br><span class="line">// 前进页面</span><br><span class="line">router.go(1)</span><br><span class="line"></span><br><span class="line">// 后退页面</span><br><span class="line">router.go(-1)</span><br></pre></td></tr></table></figure></li><li><p>命名路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// shop路径下组册3个组件，key与value相同，可以使用了ES6简写</span><br><span class="line">// key可以任意命名，只要router-view的name相同，就会加载名为ShopFooter的组件</span><br><span class="line">// alias是取别名，不论输入/shop还是/helloshop，但会进入相同页面，支持数组形式多个别名</span><br><span class="line">&#123;</span><br><span class="line">  path: &quot;/shop&quot;,</span><br><span class="line">  alias: [&quot;/helloshop&quot;, &quot;/hishop&quot;],</span><br><span class="line">  components: &#123;</span><br><span class="line">    default: ShopMain,</span><br><span class="line">    ShopTop,</span><br><span class="line">    ShopFooter01: ShopFooter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;router-view name=&quot;ShopTop&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;router-view name=&quot;ShopFooter01&quot;&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li><li><p>重定向</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 用户输入/mall，会帮它修改成/shop进行跳转</span><br><span class="line">&#123;</span><br><span class="line">  path: &quot;/mall&quot;,</span><br><span class="line">  </span><br><span class="line">  // 下面两个结果是相同的，第一个写死，第二个动态修改</span><br><span class="line">  redirect: &quot;/shop&quot;</span><br><span class="line">  redirect: (to) =&gt; &#123; return &#123;path: &quot;/shop&quot;&#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>历史模式</p><ul><li>Hash模式：内部传递的实际URL之前使用了一个哈希字符(#)，由于这部分URL从未被发送到服务器，所以它不需要在服务器层面上进行任何特殊处理.它在SEO中确实有不好的影响<br><code>history:createWebHashHistory()</code></li><li>HTML5模式：当使用这种历史模式时，URL会看起来很”正常”，例如<a href="https://example.com/user/id">https://example.com/user/id</a><br><code>history:createWebHistory()</code></li></ul></li><li><p>导航守卫</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 全局前置守卫，就像你去某个页面会验证权限，通过执行next()，不通过执行return false</span><br><span class="line">// 第三个参数next作为可选</span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  // ...</span><br><span class="line">  // 返回 false 以取消导航</span><br><span class="line">  return false</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 组件内的守卫</span><br><span class="line">// beforeRouteEnter进入页面触发</span><br><span class="line">// beforeRouteUpdate更新页面触发</span><br><span class="line">// beforeRouteLeave离开页面触发</span><br><span class="line">beforeRouteEnter()&#123;</span><br><span class="line">  console.log(&#x27;路由进入组件&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteUpdate()&#123;</span><br><span class="line">  console.log(&#x27;路由更新组件&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteLeave()&#123;</span><br><span class="line">  console.log(&#x27;路由离开组件&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><ol><li>安装axios<br><code>npm install axios --save</code></li></ol><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><ol><li><p>用vite构建工具生成vue项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 这是2021年用vite构建工具生成vue项目，项目名vue3vuex02</span><br><span class="line">npm init vite-app vue3vuex01</span><br><span class="line"></span><br><span class="line">// 注入依赖与运行项目</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><ul><li>src目录下创建store文件夹，并在里面创建index.js<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; reactive &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const store = &#123;</span><br><span class="line">  state: reactive(&#123;</span><br><span class="line">    name: &#x27;张三&#x27;,</span><br><span class="line">    age: 9</span><br><span class="line">  &#125;),</span><br><span class="line">  setMessage(value)&#123;</span><br><span class="line">    this.state.message = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure></li><li>App.vue删除必要内容，导入store<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;HelloWorld/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;</span><br><span class="line">import store from &#x27;./store/index.js&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;,</span><br><span class="line">  provide: &#123;</span><br><span class="line">    store</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>HelloWorld.vue文件，用inject注入store，然后调用store显示name、age<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;store.state.name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;store.state.age&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;store.setName(&#x27;幽蓝&#x27;)&quot;&gt;点击修改名字&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;HelloWorld&#x27;,</span><br><span class="line">  inject: [&#x27;store&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>运行项目后，不报错能显示张三、9基本OK了</li></ul></li><li><p>安装axios尝试玩一下免费API</p><ul><li>安装axios：<code>npm install axios --save</code></li><li>store&#x2F;index.js<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123; reactive &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const store = &#123;</span><br><span class="line">  state: reactive(&#123;</span><br><span class="line">    sayingList: []</span><br><span class="line">  &#125;),</span><br><span class="line">  setSaying(list)&#123;</span><br><span class="line">    this.state.sayingList = list</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure></li><li>App.vue<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;名言名句：&#123;&#123;store.state.sayingList&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import store from &#x27;./store/index.js&#x27;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  provide: &#123;</span><br><span class="line">    store</span><br><span class="line">  &#125;,</span><br><span class="line">  setup()&#123;</span><br><span class="line">    let api = &#x27;https://api.apiopen.top/api/sentences&#x27;;</span><br><span class="line">    // 请求api获取数据，调用setSaying方法，将名言名句存到sayingList</span><br><span class="line">    axios.get(api).then((result)=&gt;&#123;</span><br><span class="line">      console.log(result)</span><br><span class="line">      store.setSaying(result.data.result.name)</span><br><span class="line">    &#125;)</span><br><span class="line">    return &#123;store&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用vue-cli生成vuex，获取值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 给state添加name、age</span><br><span class="line">export default createStore(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    name: &#x27;幽蓝&#x27;,</span><br><span class="line">    age: 9</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 组件读取name</span><br><span class="line">&lt;h1&gt;&#123;&#123;$store.state.name&#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">// 数据打印age</span><br><span class="line">mounted()&#123;</span><br><span class="line">  console.log(this.$store.state.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 添加修改方法</span><br><span class="line">state: &#123;</span><br><span class="line">  name: &#x27;幽蓝&#x27;,</span><br><span class="line">  age: 9</span><br><span class="line">&#125;,</span><br><span class="line">mutations: &#123;</span><br><span class="line">  setName(state)&#123;</span><br><span class="line">    state.name = &#x27;幽蓝之家&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  setAge(state, num)&#123;</span><br><span class="line">    state.age += num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 添加点击事件</span><br><span class="line">&lt;h1&gt;&#123;&#123;$store.state.name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123;$store.state.age&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;button @click=&quot;changeNameEvent&quot;&gt;点击修改名字&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;changeAgeEvent&quot;&gt;点击修改年龄&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">// 获取修改方法要用commit，可接收多个参数</span><br><span class="line">// 第一个参数是调用mutations下的函数</span><br><span class="line">// 第二个参数相当于调用函数的第二个参数，比如传数值3对应num</span><br><span class="line">methods: &#123;</span><br><span class="line">  changeNameEvent()&#123;</span><br><span class="line">    this.$store.commit(&#x27;setName&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  changeAgeEvent()&#123;</span><br><span class="line">    this.$store.commit(&#x27;setAge&#x27;, 3);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>异步写法<br>store&#x2F;index.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">// 安装axios然后导入axios</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">export default createStore(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    sayingList: []</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setSayingList(state, arr)&#123;</span><br><span class="line">      state.sayingList = arr;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    getSaying(context)&#123;</span><br><span class="line">      let api = &#x27;https://api.apiopen.top/api/sentences&#x27;;</span><br><span class="line">      // 使用commit调用mutations下的setSayingList方法</span><br><span class="line">      // 第二个参数是名言名句</span><br><span class="line">      axios.get(api).then((result)=&gt;&#123;</span><br><span class="line">        context.commit(&#x27;setSayingList&#x27;, result.data.result.name)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>HelloWorld.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;$store.state.sayingList&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;HelloWorld&#x27;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    // 使用dispatch调用actions下的getSaying方法</span><br><span class="line">    this.$store.dispatch(&#x27;getSaying&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>vuex的5大核心属性</p><ul><li>state：写数据，类似data</li><li>getters：写计算属性，类似computed</li><li>mutations：修改状态方法，同步操作；调用commit</li><li>actions：写异步，如果修改状态要用到异步，就不要写在上面了；调用dispatch</li><li>modules：模块可以拥有自己的state、getters…类似setup</li></ul></li><li><p>映射状态数据和方法，它是用来简化写法，不必每次写$store.state那么长一串</p><ul><li>mapState：写在computed里面</li><li>mapGetters：computed</li><li>mapMutations：methods</li><li>mapActions：methods</li></ul></li></ol><p>store&#x2F;index.js文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default createStore(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    name: &#x27;张三&#x27;,</span><br><span class="line">    age: 9</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    takeAge(state)&#123;</span><br><span class="line">      return state.age * 100;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setAge(state, num)&#123;</span><br><span class="line">      state.age += num;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    getActions()&#123;</span><br><span class="line">      console.log(&#x27;我是异步&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    setName()&#123;</span><br><span class="line">      this.state.name = &#x27;幽蓝&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>先说mapState与mapGetters</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123;outlaws&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123;takeAge&#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">import &#123; mapState, mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  // 数组内填入想解构出来的数据</span><br><span class="line">  ...mapState([&#x27;name&#x27;, &#x27;age&#x27;]),</span><br><span class="line">  </span><br><span class="line">  // 如果你担心name重复，可以起别名，像是取outlaws(法外狂徒)，别名太适合张三了！</span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    outlaws:(state)=&gt;state.name</span><br><span class="line">  &#125;),</span><br><span class="line">  </span><br><span class="line">  // takeAge是返回计算结果</span><br><span class="line">  ...mapGetters([&#x27;takeAge&#x27;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapMutations与mapActions</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123;age&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;button @click=&quot;setAge(5)&quot;&gt;点我修改年龄&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">import &#123; mapState, mapMutations, mapActions &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapState([&#x27;age&#x27;]),</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  // 数组内填入想解构出来的方法</span><br><span class="line">  ...mapMutations([&#x27;setAge&#x27;]),</span><br><span class="line">  ...mapActions([&#x27;getActions&#x27;])</span><br><span class="line">&#125;,</span><br><span class="line">mounted()&#123;</span><br><span class="line">  // 下面两个都能打印出&#x27;我是异步&#x27;</span><br><span class="line">  this.$store.dispatch(&#x27;getActions&#x27;);</span><br><span class="line">  this.getActions();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>模块化modules</li></ol><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>freecodecamp练习</title>
      <link href="/archives/284b2c05.html"/>
      <url>/archives/284b2c05.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>介绍下freecodecamp组织，以”帮助人们免费学习编程”为使命，创建了大量免费的编程教程，包括交互式课程、视频课程、文章等。看完HTML、CSS、JS理论知识后，我已经等不及想在freecodecamp实战啦！每次课题挑战成功，我会截图保存下来，总结自己遇到难题</p><p>如果题目太难或不理解，抄作业总会吧？</p><h2 id="第一篇-响应式网页设计认证"><a href="#第一篇-响应式网页设计认证" class="headerlink" title="第一篇 响应式网页设计认证"></a>第一篇 响应式网页设计认证</h2><h3 id="1-Tribute-Page"><a href="#1-Tribute-Page" class="headerlink" title="1.Tribute Page"></a>1.Tribute Page</h3><p><a target="_blank" href="../freecodecamp/tribute.html">这是一个链接，点我查看致敬页</a><br><img src="/img/content_RWD1.webp" alt="致敬页"></p><h3 id="2-Survey-Form"><a href="#2-Survey-Form" class="headerlink" title="2.Survey Form"></a>2.Survey Form</h3><p><a target="_blank" href="../freecodecamp/surveyForm.html">这是一个链接，点我查看调查表单</a><br><img src="/img/content_RWD2.webp" alt="调查表单"></p><h3 id="3-Product-Landing-Page"><a href="#3-Product-Landing-Page" class="headerlink" title="3.Product Landing Page"></a>3.Product Landing Page</h3><p><a target="_blank" href="../freecodecamp/productLanding.html">这是一个链接，点我查看产品登入页</a><br><img src="/img/content_RWD3.webp" alt="产品登入页"></p><h3 id="4-Technical-Documentation-Page"><a href="#4-Technical-Documentation-Page" class="headerlink" title="4.Technical Documentation Page"></a>4.Technical Documentation Page</h3><p><a target="_blank" href="../freecodecamp/technicalDocumentationPage.html">这是一个链接，点我查看技术文档页</a><br><img src="/img/content_RWD4.webp" alt="技术文档页"></p><h3 id="5-Personal-Portfolio"><a href="#5-Personal-Portfolio" class="headerlink" title="5.Personal Portfolio"></a>5.Personal Portfolio</h3><p><a target="_blank" href="../freecodecamp/personalPortfolio.html">这是一个链接，点我查看个人作品集展示页</a><br><img src="/img/content_RWD5.webp" alt="个人作品集展示页"></p><h2 id="第二篇-JavaScript算法和数据结构"><a href="#第二篇-JavaScript算法和数据结构" class="headerlink" title="第二篇 JavaScript算法和数据结构"></a>第二篇 JavaScript算法和数据结构</h2><h3 id="1-回文检查器"><a href="#1-回文检查器" class="headerlink" title="1. 回文检查器"></a>1. 回文检查器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">palindrome</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="comment">// 除了英文数字，过滤其他符号</span></span><br><span class="line">  <span class="keyword">let</span> a = str.<span class="title function_">match</span>(<span class="regexp">/[a-zA-Z0-9]/g</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 字符串取反</span></span><br><span class="line">  <span class="keyword">let</span> b = a.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断回文字符串</span></span><br><span class="line">  <span class="keyword">return</span> a === b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">palindrome</span>(<span class="string">&quot;eye&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-罗马数字转换器"><a href="#2-罗马数字转换器" class="headerlink" title="2. 罗马数字转换器"></a>2. 罗马数字转换器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">convertToRoman</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;M&#x27;</span>,<span class="number">1000</span>],[<span class="string">&#x27;CM&#x27;</span>,<span class="number">900</span>],[<span class="string">&#x27;D&#x27;</span>,<span class="number">500</span>],[<span class="string">&#x27;CD&#x27;</span>,<span class="number">400</span>],[<span class="string">&#x27;C&#x27;</span>,<span class="number">100</span>],[<span class="string">&#x27;XC&#x27;</span>,<span class="number">90</span>],[<span class="string">&#x27;L&#x27;</span>,<span class="number">50</span>],[<span class="string">&#x27;XL&#x27;</span>,<span class="number">40</span>],[<span class="string">&#x27;X&#x27;</span>,<span class="number">10</span>],[<span class="string">&#x27;IX&#x27;</span>,<span class="number">9</span>],[<span class="string">&#x27;V&#x27;</span>,<span class="number">5</span>],[<span class="string">&#x27;IV&#x27;</span>,<span class="number">4</span>],[<span class="string">&#x27;I&#x27;</span>,<span class="number">1</span>]]);</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> map) &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = <span class="built_in">parseInt</span>(num/v[<span class="number">1</span>],<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (temp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; temp; ++i) &#123;</span><br><span class="line">                result += v[<span class="number">0</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num = num % v[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">convertToRoman</span>(<span class="number">36</span>);</span><br></pre></td></tr></table></figure><h3 id="3-凯撒密码"><a href="#3-凯撒密码" class="headerlink" title="3. 凯撒密码"></a>3. 凯撒密码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">rot13</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="comment">// 翻译表</span></span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">ObjRot13</span> = &#123;</span><br><span class="line">    <span class="attr">A</span>: <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">    <span class="attr">B</span>: <span class="string">&#x27;O&#x27;</span>,</span><br><span class="line">    <span class="attr">C</span>: <span class="string">&#x27;P&#x27;</span>,</span><br><span class="line">    <span class="attr">D</span>: <span class="string">&#x27;Q&#x27;</span>,</span><br><span class="line">    <span class="attr">E</span>: <span class="string">&#x27;R&#x27;</span>,</span><br><span class="line">    <span class="attr">F</span>: <span class="string">&#x27;S&#x27;</span>,</span><br><span class="line">    <span class="attr">G</span>: <span class="string">&#x27;T&#x27;</span>,</span><br><span class="line">    <span class="attr">H</span>: <span class="string">&#x27;U&#x27;</span>,</span><br><span class="line">    <span class="attr">I</span>: <span class="string">&#x27;V&#x27;</span>,</span><br><span class="line">    <span class="attr">J</span>: <span class="string">&#x27;W&#x27;</span>,</span><br><span class="line">    <span class="attr">K</span>: <span class="string">&#x27;X&#x27;</span>,</span><br><span class="line">    <span class="attr">L</span>: <span class="string">&#x27;Y&#x27;</span>,</span><br><span class="line">    <span class="attr">M</span>: <span class="string">&#x27;Z&#x27;</span>,</span><br><span class="line">    <span class="attr">N</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    <span class="attr">O</span>: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">    <span class="attr">P</span>: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">    <span class="attr">Q</span>: <span class="string">&#x27;D&#x27;</span>,</span><br><span class="line">    <span class="attr">R</span>: <span class="string">&#x27;E&#x27;</span>,</span><br><span class="line">    <span class="attr">S</span>: <span class="string">&#x27;F&#x27;</span>,</span><br><span class="line">    <span class="attr">T</span>: <span class="string">&#x27;G&#x27;</span>,</span><br><span class="line">    <span class="attr">U</span>: <span class="string">&#x27;H&#x27;</span>,</span><br><span class="line">    <span class="attr">V</span>: <span class="string">&#x27;I&#x27;</span>,</span><br><span class="line">    <span class="attr">W</span>: <span class="string">&#x27;J&#x27;</span>,</span><br><span class="line">    <span class="attr">X</span>: <span class="string">&#x27;K&#x27;</span>,</span><br><span class="line">    <span class="attr">Y</span>: <span class="string">&#x27;L&#x27;</span>,</span><br><span class="line">    <span class="attr">Z</span>: <span class="string">&#x27;M&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 用数组接收翻译内容</span></span><br><span class="line">  <span class="keyword">let</span> translate = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/[A-Z]/g</span>.<span class="title function_">test</span>(str[i])) &#123;</span><br><span class="line">      translate.<span class="title function_">push</span>(<span class="title class_">ObjRot13</span>[str[i]]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      translate.<span class="title function_">push</span>(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回翻译数组转成字符串</span></span><br><span class="line">  <span class="keyword">return</span> translate.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">rot13</span>(<span class="string">&quot;SERR PBQR PNZC&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-电话号码检查器"><a href="#4-电话号码检查器" class="headerlink" title="4. 电话号码检查器"></a>4. 电话号码检查器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">telephoneCheck</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/^1\s?\(\d&#123;3&#125;\).?\d&#123;3&#125;.?\d&#123;4&#125;|^1\s\d&#123;3&#125;[\(|-]\d&#123;3&#125;[-]\d&#123;4&#125;|^\d&#123;10&#125;$|\d&#123;3&#125;\s\d&#123;3&#125;\s\d&#123;4&#125;|^\(\d&#123;3&#125;\)\d&#123;3&#125;-\d&#123;4&#125;|^\d&#123;3&#125;-\d&#123;3&#125;-\d&#123;4&#125;$/</span></span><br><span class="line">    <span class="keyword">const</span> bol = reg.<span class="title function_">test</span>(str);</span><br><span class="line">    <span class="keyword">return</span> bol</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">telephoneCheck</span>(<span class="string">&quot;555-555-5555&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="5-计算找零"><a href="#5-计算找零" class="headerlink" title="5. 计算找零"></a>5. 计算找零</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkCashRegister</span>(<span class="params">price, cash, cid</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> change = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> unit = &#123;</span><br><span class="line">    <span class="string">&quot;ONE HUNDRED&quot;</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">TWENTY</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">TEN</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">FIVE</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">ONE</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">QUARTER</span>: <span class="number">0.25</span>,</span><br><span class="line">    <span class="attr">DIME</span>: <span class="number">0.1</span>,</span><br><span class="line">    <span class="attr">NICKEL</span>: <span class="number">0.05</span>,</span><br><span class="line">    <span class="attr">PENNY</span>: <span class="number">0.01</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> cidUnitCount = <span class="title function_">getUnitCount</span>(cid, unit);</span><br><span class="line">  <span class="keyword">let</span> remain = cash - price, isSuit = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> unit) &#123;</span><br><span class="line">    <span class="keyword">if</span> (unit[key] &lt;= remain) &#123;</span><br><span class="line">      <span class="keyword">const</span> unitPrice = unit[key];</span><br><span class="line">      <span class="keyword">const</span> unitTotalCount = cidUnitCount[key];</span><br><span class="line">      <span class="keyword">let</span> curTotalPrice = <span class="number">0</span>, curCount = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (curTotalPrice &lt; remain &amp;&amp; curCount &lt; unitTotalCount) &#123;</span><br><span class="line">        curCount++;</span><br><span class="line">        curTotalPrice = curCount * unitPrice;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (curTotalPrice &gt; remain) &#123;</span><br><span class="line">        curCount--;</span><br><span class="line">        curTotalPrice = curCount * unitPrice;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (curCount !== <span class="number">0</span>) &#123;</span><br><span class="line">        change.<span class="title function_">push</span>([key,curTotalPrice ]);</span><br><span class="line">        remain = (remain - curTotalPrice).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (curCount !== unitTotalCount) &#123;</span><br><span class="line">        isSuit = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">if</span> (remain == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isSuit) &#123;</span><br><span class="line">      result = &#123; <span class="attr">status</span>: <span class="string">&quot;CLOSED&quot;</span>, <span class="attr">change</span>: cid &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = &#123; <span class="attr">status</span>: <span class="string">&quot;OPEN&quot;</span>, <span class="attr">change</span>: change &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = &#123; <span class="attr">status</span>: <span class="string">&quot;INSUFFICIENT_FUNDS&quot;</span>, <span class="attr">change</span>: [] &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUnitCount</span>(<span class="params">arr, unit</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = &#123;&#125;;</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [key, value] = item;</span><br><span class="line">    result[key] = <span class="title class_">Math</span>.<span class="title function_">round</span>(value / unit[key]);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkCashRegister</span>(<span class="number">19.5</span>, <span class="number">20</span>, [[<span class="string">&quot;PENNY&quot;</span>, <span class="number">1.01</span>], [<span class="string">&quot;NICKEL&quot;</span>, <span class="number">2.05</span>], [<span class="string">&quot;DIME&quot;</span>, <span class="number">3.1</span>], [<span class="string">&quot;QUARTER&quot;</span>, <span class="number">4.25</span>], [<span class="string">&quot;ONE&quot;</span>, <span class="number">90</span>], [<span class="string">&quot;FIVE&quot;</span>, <span class="number">55</span>], [<span class="string">&quot;TEN&quot;</span>, <span class="number">20</span>], [<span class="string">&quot;TWENTY&quot;</span>, <span class="number">60</span>], [<span class="string">&quot;ONE HUNDRED&quot;</span>, <span class="number">100</span>]]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkCashRegister</span>(<span class="number">3.26</span>, <span class="number">100</span>, [[<span class="string">&quot;PENNY&quot;</span>, <span class="number">1.01</span>], [<span class="string">&quot;NICKEL&quot;</span>, <span class="number">2.05</span>], [<span class="string">&quot;DIME&quot;</span>, <span class="number">3.1</span>], [<span class="string">&quot;QUARTER&quot;</span>, <span class="number">4.25</span>], [<span class="string">&quot;ONE&quot;</span>, <span class="number">90</span>], [<span class="string">&quot;FIVE&quot;</span>, <span class="number">55</span>], [<span class="string">&quot;TEN&quot;</span>, <span class="number">20</span>], [<span class="string">&quot;TWENTY&quot;</span>, <span class="number">60</span>], [<span class="string">&quot;ONE HUNDRED&quot;</span>, <span class="number">100</span>]])</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkCashRegister</span>(<span class="number">19.5</span>, <span class="number">20</span>, [[<span class="string">&quot;PENNY&quot;</span>, <span class="number">0.01</span>], [<span class="string">&quot;NICKEL&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;DIME&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;QUARTER&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;ONE&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;FIVE&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;TEN&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;TWENTY&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;ONE HUNDRED&quot;</span>, <span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkCashRegister</span>(<span class="number">19.5</span>, <span class="number">20</span>, [[<span class="string">&quot;PENNY&quot;</span>, <span class="number">0.01</span>], [<span class="string">&quot;NICKEL&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;DIME&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;QUARTER&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;ONE&quot;</span>, <span class="number">1</span>], [<span class="string">&quot;FIVE&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;TEN&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;TWENTY&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;ONE HUNDRED&quot;</span>, <span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkCashRegister</span>(<span class="number">19.5</span>, <span class="number">20</span>, [[<span class="string">&quot;PENNY&quot;</span>, <span class="number">0.5</span>], [<span class="string">&quot;NICKEL&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;DIME&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;QUARTER&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;ONE&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;FIVE&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;TEN&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;TWENTY&quot;</span>, <span class="number">0</span>], [<span class="string">&quot;ONE HUNDRED&quot;</span>, <span class="number">0</span>]])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《JavaScript高级程序设计》读书笔记</title>
      <link href="/archives/eca48c1a.html"/>
      <url>/archives/eca48c1a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习方法：全部内容都要看，内容能理解换下一个，无法理解上b站看解说，找不到解说上Google看文章，依然无法理解，那么抱着疑问回到书中继续往下看吧</p></blockquote><h2 id="第一章-简介"><a href="#第一章-简介" class="headerlink" title="第一章 简介"></a>第一章 简介</h2><h3 id="1-2-JavaScript实现"><a href="#1-2-JavaScript实现" class="headerlink" title="1.2 JavaScript实现"></a>1.2 JavaScript实现</h3><ol><li>完整的JavaScript实现包含： <ul><li>核心（ECMAScript）</li><li>文档对象模型（DOM）</li><li>浏览器对象模型（BOM）</li></ul></li><li>ECMAScript提供语言核心功能；DOM提供与网页内容交互的方法和接口；BOM提供与浏览器交互的方法和接口</li></ol><h2 id="第二章-HTML中的JavaScript"><a href="#第二章-HTML中的JavaScript" class="headerlink" title="第二章 HTML中的JavaScript"></a>第二章 HTML中的JavaScript</h2><h3 id="2-1-Script元素"><a href="#2-1-Script元素" class="headerlink" title="2.1 Script元素"></a>2.1 Script元素</h3><ol><li><p>标签位置：为了避免加载JS文件导致页面空白，现代Web应用程序通常将所有JS引用放在<body>元素中的页面内容后面</p></li><li><p>延迟脚本：defer属性脚本在执行时不会影响页面加载，脚本会被延迟到整个页面都解析完毕后再运行；延迟脚本不一定总会按顺序执行，因此最好只包含一个脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script defer src=<span class="string">&quot;example1.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>异步脚本：async属性脚本同样不会影响页面加载，脚本下载完不管页面是否解析完直接运行；同样不一定会按顺序执行，异步脚本不建议修改DOM，可能会出现BUG，它和延迟都是外部脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">&quot;example1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;example2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-3-文档模式"><a href="#2-3-文档模式" class="headerlink" title="2.3 文档模式"></a>2.3 文档模式</h3><ol><li><p>最初的文档模式：</p><ul><li>混杂模式(quirks mode)</li><li>标准模式(standards mode)</li></ul></li><li><p>标准模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML5 --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="第三章-语言基础"><a href="#第三章-语言基础" class="headerlink" title="第三章 语言基础"></a>第三章 语言基础</h2><h3 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h3><ol><li>区分大小写：ECMAScript中一切都区分大小写，变量test和变量Test是两个不同的变量</li><li>ECMAScript标识符使用驼峰大小写形式：firstSecond</li><li>严格模式：在严格模式下，ECMAScript3的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误；顶部加上这一行启用严格模式：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h3><ol start="4"><li>严格模式下，如果像这样给未声明的变量赋值，则会导致抛出ReferenceError</li><li>不使用var，const优先，let次之；使用const声明保持常量，不合理的赋值操作会报错，只在未来有修改再使用let</li></ol><h3 id="3-4-数据类型"><a href="#3-4-数据类型" class="headerlink" title="3.4 数据类型"></a>3.4 数据类型</h3><ol start="6"><li>简单数据类型：Undefined、Null、Boolean、Number、String、Symbol；复杂数据类型：Object</li><li>typeof操作符，用来检测变量数据类型<ul><li>Undefined类型：当使用var或let声明了变量但没有初始化时，相当于给变量赋予了undefined</li><li>Null类型：null值表示一个空对象指针；只要变量要保存对象，而当时又没有那个对象可保存，就要用null来填充该变量</li><li>Boolean类型：其他类型的值转换为布尔值，可以调用特定的Boolean()转型函数</li><li>Number类型：其他类型的值转换为数值，常用parseInt()函数；如果第一个字符不是数值字符、加号或减号返回NaN，第二个参数用来指定进制数</li><li>String类型：字符串是不可变的；其他类型的值转换为字符串，使用函数toString()或String()</li><li>Symbol类型：符号实例是唯一、不可变的；创建Symbol()实例并将其用作对象的新属性，就可以保证它不会覆盖已有的对象属性，无论是符号属性还是字符串属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义Symbol永远都不会一样</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Symbol</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="title class_">Symbol</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b);   <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">description</span>);   <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果声明过&#x27;hi&#x27;，系统会拿过来用所以为true</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> d = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c === d);   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(c));    <span class="comment">// hi</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 同名查询成绩应用场景</span></span><br><span class="line"><span class="keyword">let</span> user1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;幽蓝&#x27;</span>,</span><br><span class="line">  <span class="attr">key</span>: <span class="title class_">Symbol</span>()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> user2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;幽蓝&#x27;</span>,</span><br><span class="line">  <span class="attr">key</span>: <span class="title class_">Symbol</span>()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> grade = &#123;</span><br><span class="line">  [user1.<span class="property">key</span>]: &#123;<span class="attr">css</span>: <span class="number">100</span>, <span class="attr">js</span>: <span class="number">89</span>&#125;,</span><br><span class="line">  [user2.<span class="property">key</span>]: &#123;<span class="attr">css</span>: <span class="number">57</span>, <span class="attr">js</span>: <span class="number">32</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(grade);</span><br></pre></td></tr></table></figure></li><li>Object类型</li></ul></li></ol><p>创建对象的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><p>Object实例都有如下属性和方法：</p><ul><li>constructor: 用于创建当前对象的函数</li><li>hasOwnProperty(propertyName): 用于判断当前对象实例(不是原型)上是否存在给定的属性</li><li>isPrototypeOf(object): 用于判断当前对象是否为另一个对象的原型</li><li>propertyIsEnumerable(propertyName): 用于判断给定的属性是否可以使用for-in语句枚举</li><li>toLocaleString(): 返回对象的字符串表示，该字符串反映对象所在的本地化执行环境</li><li>toString(): 返回对象的字符串表示</li><li>valueOf(): 返回对象对应的字符串、数值或布尔值表示</li></ul><h3 id="3-5-操作符"><a href="#3-5-操作符" class="headerlink" title="3.5 操作符"></a>3.5 操作符</h3><ol start="8"><li><p>ECMAScript7新增指数操作符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> ** <span class="number">2</span>);      <span class="comment">// 3*3 = 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> ** <span class="number">3</span>);      <span class="comment">// 3*3*3 = 27</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">16</span> ** <span class="number">0.5</span>);   <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li><li><p>字符串和字符串比较时，它们比较的是字符编码，所以看起来会很怪</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;23&#x27;</span> &lt; <span class="string">&#x27;3&#x27;</span>);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>数值和字符串比较时，字符串会先被转换为数值，这样能保证结果正确；如果不能转换成数值，就转换成NaN</p></li><li><p>任何操作数与NaN比较时，结果都会返回false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>);      <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>);     <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> &gt; <span class="title class_">NaN</span>);       <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> &lt; <span class="title class_">NaN</span>);       <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>相等（&#x3D;&#x3D;）全等（&#x3D;&#x3D;&#x3D;），相等比较时会转换数据类型，而全等不会转换数据类型直接比较</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;55&#x27;</span> == <span class="number">55</span>);      <span class="comment">// true，转换后相等</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;55&#x27;</span> === <span class="number">55</span>);     <span class="comment">// false，不相等，因为数据类型不一样</span></span><br></pre></td></tr></table></figure></li><li><p>条件操作符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">variable = boolean_expression ? true_value : false_value;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果100大于50，则将&#x27;答对了&#x27;赋值给faqNumber，否则将&#x27;答错了&#x27;赋值给faqNumber</span></span><br><span class="line"><span class="keyword">let</span> faqNumber = (<span class="number">100</span> &gt; <span class="number">50</span>) ? <span class="string">&#x27;答对了&#x27;</span>:<span class="string">&#x27;答错了&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(faqNumber);   <span class="comment">// 答对了</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-6-语句"><a href="#3-6-语句" class="headerlink" title="3.6 语句"></a>3.6 语句</h3><ol start="14"><li><p>for-in语句：用于枚举对象中的非符号键属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (property <span class="keyword">in</span> expression) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for-of语句：用于遍历可迭代对象的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (property <span class="keyword">of</span> expression) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>break和continue都可以与label语句一起使用;通常是在嵌套循环中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="attr">outermost</span>:</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span> outermost;</span><br><span class="line">      &#125;</span><br><span class="line">      num++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);   <span class="comment">// 55</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-7-函数"><a href="#3-7-函数" class="headerlink" title="3.7 函数"></a>3.7 函数</h3><ol start="17"><li>函数参数：参数在内部是用一个数组来表示的，函数接收到的始终都是这个数组，而不关心数组中包含哪些函数；通过arguments对象来访问这个参数数组；命名的参数只提供便利，但不是必须的；arguments对象中的值与对应的命名参数的内存空间是独立的，但它们的值会同步<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arguments&#x27;</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age);</span><br><span class="line">  name = <span class="string">&#x27;幽蓝&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">example</span>(<span class="string">&#x27;金涛&#x27;</span>, <span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;myFriend&#x27;</span>);</span><br><span class="line"><span class="comment">// arguments: [&#x27;金涛&#x27;, &#x27;20&#x27;, &#x27;myFriend&#x27;]</span></span><br><span class="line"><span class="comment">// name: 金涛 age: 20</span></span><br><span class="line"><span class="comment">// 幽蓝</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="第四章-变量、作用域与内存"><a href="#第四章-变量、作用域与内存" class="headerlink" title="第四章 变量、作用域与内存"></a>第四章 变量、作用域与内存</h2><h3 id="4-1-原始值与引用值"><a href="#4-1-原始值与引用值" class="headerlink" title="4.1 原始值与引用值"></a>4.1 原始值与引用值</h3><ol><li><p>在操作对象时，实际上操作的是对象的引用而不是对象的本身</p></li><li><p>从一个变量到另一个变量复制基本类型值时，会创建这个值的副本；从一个变量到另一个变量复制引用类型值时，复制的值实际上是一个指针，它指向存储在堆内存中的对象，复制之后两个变量指向同一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> n2 = n1;</span><br><span class="line">n1 = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n2);        <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = o1;</span><br><span class="line">o1.<span class="property">name</span> = <span class="string">&#x27;幽蓝&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o2.<span class="property">name</span>);   <span class="comment">// 幽蓝</span></span><br></pre></td></tr></table></figure></li><li><p>传递参数：参数只能按值传递，参数为对象时，在函数内部访问的是同一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setName</span>(<span class="params">o</span>)&#123;</span><br><span class="line">  o.<span class="property">name</span> = <span class="string">&#x27;幽蓝&#x27;</span>;</span><br><span class="line">  o = &#123;&#125;;</span><br><span class="line">  o.<span class="property">name</span> = <span class="string">&#x27;金涛&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = &#123;&#125;;</span><br><span class="line"><span class="title function_">setName</span>(p);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);    <span class="comment">// 幽蓝</span></span><br></pre></td></tr></table></figure></li><li><p>确定一个值是哪种基本类型可以使用typeof操作符，而确定一个值是哪种引用类型可以使用instanceof操作符</p></li></ol><h3 id="4-2-执行上下文与作用域"><a href="#4-2-执行上下文与作用域" class="headerlink" title="4.2 执行上下文与作用域"></a>4.2 执行上下文与作用域</h3><ol start="5"><li>执行上下文（也称为作用域）分全局上下文、函数上下文和块级上下文；每个上下文都有一个关联的变量对象；上下文中的代码在执行的时候，会创建变量对象的一个作用域链；作用域链的最前端始终是正在执行上下文的变量对象，全局上下文的变量对象是作用域链的最后一个变量对象</li><li>标识符查找：从作用域链的最前端开始，向上逐级搜索，找到后搜索停止，没有找到则一直追溯到全局上下文的变量对象</li></ol><h3 id="4-3-垃圾回收"><a href="#4-3-垃圾回收" class="headerlink" title="4.3 垃圾回收"></a>4.3 垃圾回收</h3><ol start="7"><li>最常用的垃圾回收策略是标记清理，垃圾回收程序运行的时候，会标记内存中存储的所有变量，然后去掉上下文中的变量以及被上下文中的变量引用的变量标记，之后再被加上标记的变量就是待删除的，原因是这些变量无法被访问到了</li><li>优化内存占用：执行代码时只保存必要的数据，如果数据不再必要，那么把它设置为null，从而释放其引用——解除引用；解除引用的作用是让其脱离上下文，以便垃圾回收程序运行时将其回收</li></ol><h2 id="第五章-基本引用类型"><a href="#第五章-基本引用类型" class="headerlink" title="第五章 基本引用类型"></a>第五章 基本引用类型</h2><h3 id="5-1-Date"><a href="#5-1-Date" class="headerlink" title="5.1 Date"></a>5.1 Date</h3><ol><li><p>创建日期对象：月份从0开始(1月是0，2月是1…)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d1 = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">let</span> d2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2022</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">7</span>, <span class="number">30</span>, <span class="number">30</span>);    <span class="comment">// 2022年4月20日7点30分30秒</span></span><br></pre></td></tr></table></figure></li><li><p>获取执行时日期和时间的毫秒数，用来分析代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 起始时间</span></span><br><span class="line"><span class="keyword">let</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">doSomething</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束时间</span></span><br><span class="line"><span class="keyword">let</span> stop = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">result = stop - start;</span><br></pre></td></tr></table></figure></li><li><p>日期格式化方法：local表示以特定于地区的格式显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2022</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">7</span>, <span class="number">30</span>, <span class="number">30</span>);    <span class="comment">// 2022年4月20日7点30分30秒</span></span><br><span class="line">d2.<span class="title function_">toString</span>();              <span class="comment">// Wed Apr 20 2022 07:30:30 GMT+0800 (中国标准时间)</span></span><br><span class="line">d2.<span class="title function_">toDateString</span>();          <span class="comment">// Wed Apr 20 2022</span></span><br><span class="line">d2.<span class="title function_">toTimeString</span>();          <span class="comment">// 07:30:30 GMT+0800 (中国标准时间)</span></span><br><span class="line">d2.<span class="title function_">toLocaleString</span>();        <span class="comment">// 2022/4/20 07:30:30</span></span><br><span class="line">d2.<span class="title function_">toLocaleDateString</span>();    <span class="comment">// 2022/4/20</span></span><br><span class="line">d2.<span class="title function_">toLocaleTimeString</span>();    <span class="comment">// 07:30:30</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-2-RegExp"><a href="#5-2-RegExp" class="headerlink" title="5.2 RegExp"></a>5.2 RegExp</h3><ol start="4"><li><p>pattern是正则表达式；flags是标记，用于控制正则表达式的行为。下面表示匹配模式的标记：</p><ul><li>g：全局模式，表示查找字符串的全部内容，而不是找到第一个匹配的内容就结束</li><li>i：不区分大小写，表示在查找匹配时忽略pattern和字符串的大小写</li><li>m：多行模式，表示查找到一行文本末尾时会继续查找</li><li>y：粘附模式，表示只查找从lastIndex开始及之后的字符串</li><li>u：Unicode模式，启用Unicode匹配</li><li>s：dotAll模式，表示元字符.匹配任何字符(包括\n或\r)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> exp1 = <span class="regexp">/ pattern /</span> flags;</span><br><span class="line"><span class="keyword">let</span> exp2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;pattern&#x27;</span>, <span class="string">&#x27;flags&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>实例方法：</p><ul><li>exec()：返回包含第一个匹配信息的数组，数组第一个元素是匹配整个模式的字符串，其他元素是与表达式中的捕获组匹配的字符串；包含两个额外的属性:index和input <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;I&#x27;m ulan, and this is newHome&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/and( this( is)?)?/gi</span>;</span><br><span class="line"><span class="keyword">let</span> matches = pattern.<span class="title function_">exec</span>(text);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches.<span class="property">index</span>);   <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches.<span class="property">input</span>);   <span class="comment">// I&#x27;m ulan, and this is newHome</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches[<span class="number">0</span>]);      <span class="comment">// and this is</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches[<span class="number">1</span>]);      <span class="comment">// this is</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches[<span class="number">2</span>]);      <span class="comment">// is</span></span><br></pre></td></tr></table></figure></li><li>test：输入的文本与模式匹配，则返回true，否则返回false <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;I&#x27;m ulan, and this is newHome&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/ulan/</span>;</span><br><span class="line"><span class="keyword">let</span> matches = pattern.<span class="title function_">test</span>(text);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches);     <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>RegExp构造函数有部分属性，适用于作用域中的所有正则表达式，这些属性可以提取出与exec()和test()执行的操作相关的信息</p></li></ol><h3 id="5-3-原始值包装类型"><a href="#5-3-原始值包装类型" class="headerlink" title="5.3 原始值包装类型"></a>5.3 原始值包装类型</h3><ol start="7"><li><p>三种特殊的引用类型：Boolean、Number、String</p></li><li><p>Number的方法</p><ul><li>toString()：数值转字符串，参数可接收二、八进制…</li><li>toFixed()：数值转字符串，参数指定包含小数点位数</li><li>isInteger()：用来判断数值是否保存为整数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> n2 = <span class="number">10.005</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n1.<span class="title function_">toString</span>());                <span class="comment">// &quot;10&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n2.<span class="title function_">toFixed</span>(<span class="number">2</span>));                <span class="comment">// &quot;10.01&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(n1));         <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(n2));         <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>String的方法</p><ul><li>length属性：表示字符串的长度</li><li>charAt()：查找索引位置返回字符，从索引0开始找，参数由整数指定位置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">s1.<span class="property">length</span>       <span class="comment">// 11</span></span><br><span class="line">s1.<span class="title function_">charAt</span>(<span class="number">6</span>)    <span class="comment">// &#x27;w&#x27;</span></span><br></pre></td></tr></table></figure></li><li>slice()：提取子字符串，第一个参数表示开始搜索的位置，第二个参数表示结束搜索的位置，负数从末尾计算</li><li>substr()：提取子字符串，第一个参数表示开始搜索的位置，第二个参数是以length提取，按1、2、3…个字符计算<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s2 = <span class="string">&#x27;我喜欢JS，同时也爱HTML&#x27;</span>;</span><br><span class="line">s2.<span class="title function_">slice</span>(<span class="number">3</span>, <span class="number">5</span>)        <span class="comment">// &#x27;JS&#x27;</span></span><br><span class="line">s2.<span class="title function_">slice</span>(-<span class="number">4</span>, -<span class="number">1</span>)      <span class="comment">// &#x27;HTM&#x27;</span></span><br><span class="line">s2.<span class="title function_">substr</span>(<span class="number">3</span>, <span class="number">2</span>)       <span class="comment">// &#x27;JS&#x27;</span></span><br><span class="line">s2.<span class="title function_">substr</span>(-<span class="number">4</span>, <span class="number">4</span>)      <span class="comment">// &#x27;HTML&#x27;</span></span><br></pre></td></tr></table></figure></li><li>indexOf()：查找字符索引返回位置，从前往后找，没找到返回-1</li><li>lastIndexOf()：查找字符索引返回位置，从后往前找，没找到返回-1</li><li>includes()：判断字符串中是否包含另一个字符串，第二个参数表示指定位置向末尾搜索<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s3 = <span class="string">&#x27;abcdabcd&#x27;</span>;</span><br><span class="line">s3.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>)             <span class="comment">// 0</span></span><br><span class="line">s3.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;a&#x27;</span>)         <span class="comment">// 4</span></span><br><span class="line">s3.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)          <span class="comment">// 4</span></span><br><span class="line">s3.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)      <span class="comment">// 0</span></span><br><span class="line">s3.<span class="title function_">includes</span>(<span class="string">&#x27;ab&#x27;</span>)           <span class="comment">// true</span></span><br><span class="line">s3.<span class="title function_">includes</span>(<span class="string">&#x27;df&#x27;</span>)           <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li>trim()：创建字符串的副本，删除前后所有空格<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s4 = <span class="string">&#x27;  hello world  &#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> s5 = s4.<span class="title function_">trim</span>();   <span class="comment">// &#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure></li><li>repeat()：字符串复制多少次，返回拼接后的副本，参数为复制次数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;hello &#x27;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>) + <span class="string">&#x27;world&#x27;</span>    <span class="comment">// &#x27;hello hello hello world&#x27;</span></span><br></pre></td></tr></table></figure></li><li>toUpperCase()和toLowerCase()：英文字符串转换大写和小写<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s6 = <span class="string">&#x27;hello world&#x27;</span>, s7 = <span class="string">&#x27;HELLO WORLD&#x27;</span>;</span><br><span class="line">s6.<span class="title function_">toUpperCase</span>()    <span class="comment">// &#x27;HELLO WORLD&#x27;</span></span><br><span class="line">s7.<span class="title function_">toLowerCase</span>()    <span class="comment">// &#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure></li><li>localeCompare()：按字母表顺序比较两个字符串，返回比较结果；例如a在b前面，b在c前面<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s8 = <span class="string">&#x27;betty&#x27;</span>;</span><br><span class="line">s8.<span class="title function_">localeCompare</span>(<span class="string">&#x27;alice&#x27;</span>)    <span class="comment">// 1</span></span><br><span class="line">s8.<span class="title function_">localeCompare</span>(<span class="string">&#x27;betty&#x27;</span>)    <span class="comment">// 0</span></span><br><span class="line">s8.<span class="title function_">localeCompare</span>(<span class="string">&#x27;claier&#x27;</span>)   <span class="comment">// -1</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="5-4-单例内置对象"><a href="#5-4-单例内置对象" class="headerlink" title="5.4 单例内置对象"></a>5.4 单例内置对象</h3><ol start="10"><li>Global对象为一种兜底对象，不属于任何对象的属性和方法都是Global对象的方法，例如：isNaN()、parseInt()等；window对象是Global对象的代理，全局作用域中声明的变量和函数都变成了window的属性</li><li>Math对象提供一些计算的属性和方法<ul><li>min()、max()：确定一组数值中的最小值和最大值，可接收任意多个参数</li><li>Math.ceil()、Math.floor()、Math.round()、 Math.fround()：小数值舍入为整数</li><li>random()：返回随机数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(...arr));   <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr));   <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span> + <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);   <span class="comment">// 随机1～10</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="第六章-集合引用类型"><a href="#第六章-集合引用类型" class="headerlink" title="第六章 集合引用类型"></a>第六章 集合引用类型</h2><h3 id="6-1-Object"><a href="#6-1-Object" class="headerlink" title="6.1 Object"></a>6.1 Object</h3><ol><li><p>创建Object实例：使用Object构造函数；对象字面量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new操作符法</span></span><br><span class="line"><span class="keyword">let</span> o1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">o1.<span class="property">name</span> = <span class="string">&#x27;幽蓝&#x27;</span>;</span><br><span class="line">o1.<span class="property">age</span> = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象字面量表示法</span></span><br><span class="line"><span class="keyword">let</span> o2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;幽蓝&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">9</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>访问对象属性：点表示法；方括号表示法；建议使用点表示法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点表示法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方括号表示法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[n]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[<span class="string">&#x27;first name&#x27;</span>])</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-2-Array"><a href="#6-2-Array" class="headerlink" title="6.2 Array"></a>6.2 Array</h3><ol start="3"><li><p>创建数组：使用Array构造函数；使用数组字面量表示法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">let</span> a2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">let</span> a3 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a4 = [];</span><br><span class="line"><span class="keyword">let</span> a5 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br></pre></td></tr></table></figure></li><li><p>创建数组静态方法</p><ul><li>from()：可以将类数组结构转换为数组实例<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串拆分单字符数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&#x27;ulan&#x27;</span>));    <span class="comment">// [ &#x27;u&#x27;, &#x27;l&#x27;, &#x27;a&#x27;, &#x27;n&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组浅复制</span></span><br><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(a1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1 === a2);     <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 任何可迭代对象</span></span><br><span class="line"><span class="keyword">const</span> iter = &#123;</span><br><span class="line">  * [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(iter));    <span class="comment">// [ 1, 2, 3, 4 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合和映射转换为新数组</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>() .<span class="title function_">set</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">                    .<span class="title function_">set</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>() .<span class="title function_">add</span>(<span class="number">1</span>)</span><br><span class="line">                    .<span class="title function_">add</span>(<span class="number">2</span>)</span><br><span class="line">                    .<span class="title function_">add</span>(<span class="number">3</span>)</span><br><span class="line">                    .<span class="title function_">add</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(m));     <span class="comment">// [[1, 2], [3, 4]]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(s));     <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments对象可以被轻松地转换为数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f1</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));   <span class="comment">// [ 1, 2, 3, 4 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换带有必要属性的自定义对象</span></span><br><span class="line"><span class="keyword">const</span> o1 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(o1));    <span class="comment">// [ 1, 2, 3, 4 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数可以映射函数，直接增强新数组的值</span></span><br><span class="line"><span class="comment">// 第三个参数指定映射函数this的值，重写this值在箭头函数中不适用</span></span><br><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(a1, <span class="function"><span class="params">x</span> =&gt;</span> x ** <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> a3 = <span class="title class_">Array</span>.<span class="title function_">from</span>(a1, <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x ** <span class="variable language_">this</span>.<span class="property">e</span></span><br><span class="line">&#125;, &#123;<span class="attr">e</span>: <span class="number">2</span>&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2);    <span class="comment">// [ 1, 4, 9, 16 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a3);    <span class="comment">// [ 1, 4, 9, 16 ]</span></span><br></pre></td></tr></table></figure></li><li>of()：可以将一组参数转换为数组实例<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arguments对象转换为数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>));       <span class="comment">// [ 1, 2, 3, 4 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="literal">undefined</span>));     <span class="comment">// [ undefined ]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>数组空位：一串空号来创建空位[,,,]；尽量避免使用空位，有需要可用undefined代替</p></li><li><p>数组索引：利用length在末尾添加新项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">a[a.<span class="property">length</span>] = <span class="string">&#x27;c&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>检测数组：Array.isArray()（解决了存在两个以上全局执行环境时instanceof检测结果出错的情况）</p></li><li><p>迭代器方法</p><ul><li>keys()：返回数组索引</li><li>values()：返回数组元素</li><li>entries()：返回索引&#x2F;值对<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> aEntries = <span class="title class_">Array</span>.<span class="title function_">from</span>(a.<span class="title function_">entries</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aEntries);        <span class="comment">// [ [ 0, &#x27;a&#x27; ], [ 1, &#x27;b&#x27; ], [ 2, &#x27;c&#x27; ] ]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>复制和填充方法</p><ul><li>fill()：填充数组，向已有的数组插入全部或部分相同的值</li><li>copyWithin()：批量复制，按指定范围浅复制数组中的内容，插入到指定索引开始位置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用7填充，索引大于等于1，且索引小于3的元素</span></span><br><span class="line"><span class="keyword">const</span> z = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">z.<span class="title function_">fill</span>(<span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z);     <span class="comment">// [ 0, 7, 7, 0, 0 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从i中复制索引0开始到索引3（不包括3）结束的内容</span></span><br><span class="line"><span class="comment">// 插入到索引4开始的位置</span></span><br><span class="line"><span class="keyword">let</span> i,</span><br><span class="line">  reset = <span class="function">() =&gt;</span> i = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="title function_">reset</span>();</span><br><span class="line">i.<span class="title function_">copyWithin</span>(<span class="number">4</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);   <span class="comment">// [0, 1, 2, 3, 0, 1, 2, 7, 8, 9]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>转换方法</p><ul><li>toString()：返回一个逗号分隔的字符串</li><li>valueOf()：返回数组本身</li><li>join()：类似toString()，能把逗号换成其他</li></ul></li><li><p>栈方法和队列方法</p><ul><li>push()：添加一项到数组末尾</li><li>pop()：移除数组末尾一项</li><li>shift()：移除数组第一项</li><li>unshift()：添加一项到数组前端</li></ul></li><li><p>排序方法</p><ul><li>reverse()：数组元素反向排列</li><li>sort()：默认将数组元素转换成字符串，然后升序排列，可以接收一个比较函数作为参数</li></ul></li><li><p>操作方法</p><ul><li>concat()：添加项<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> a2 = a1.<span class="title function_">concat</span>(<span class="string">&#x27;yellow&#x27;</span>, [<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;brown&#x27;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2)  <span class="comment">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;brown&quot;]</span></span><br></pre></td></tr></table></figure></li><li>slice()：截取<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;black&quot;</span>, <span class="string">&quot;brown&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">slice</span>(<span class="number">1</span>), a.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>))  <span class="comment">// [&quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;brown&quot;] [&quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;]</span></span><br></pre></td></tr></table></figure></li><li>splice()：删除插入替换<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;black&quot;</span>, <span class="string">&quot;brown&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>), a);  <span class="comment">// 删除项; [&quot;blue&quot;] [&quot;red&quot;, &quot;green&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;brown&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>), a);  <span class="comment">// 插入项; [] [&quot;red&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;green&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;brown&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>), a);  <span class="comment">// 替换项; [&quot;yellow&quot;] [&quot;red&quot;, &quot;red&quot;, &quot;purple&quot;, &quot;orange&quot;, &quot;green&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;brown&quot;]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>indexOf() lastIndexOf() 接收两个参数：要查找的项和（可选）查找起点位置的索引；indexOf()从前往后查找，lastIndexOf()从后往前查找；返回要查找的项的位置，没找到则返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;purple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;black&quot;</span>, <span class="string">&quot;brown&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">indexOf</span>(<span class="string">&#x27;red&#x27;</span>));  <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;red&#x27;</span>));  <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">indexOf</span>(<span class="string">&#x27;red&#x27;</span>, <span class="number">1</span>));  <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;red&#x27;</span>, <span class="number">1</span>));  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li><li><p>迭代方法</p><ul><li>every()：每一项函数都返回true，则这个方法返回true</li><li>some()：有一项函数返回true，则这个方法返回true</li><li>filter()：每一项都运行传入的函数，函数返回true的项，会组成新数组后返回</li><li>map()：每一项都运行传入的函数，返回函数调用的结果构成新数组</li><li>forEach()：每一项都运行传入的函数，没有返回值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> everyResult = numbers.<span class="title function_">every</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(everyResult);     <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> someResult = numbers.<span class="title function_">some</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(someResult);      <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个所有数值都大于2的数组</span></span><br><span class="line"><span class="keyword">let</span> filterResult = numbers.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filterResult);    <span class="comment">// [3, 4, 5, 4, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每一项都乘以2</span></span><br><span class="line"><span class="keyword">let</span> mapResult = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item * <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapResult);       <span class="comment">// [2, 4, 6, 8, 10, 8, 6, 4, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach()方法相当于使用for循环遍历数组</span></span><br><span class="line">numbers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 执行某些操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>归并方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum1 = values.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur, index, array</span>) =&gt;</span> prev + cur);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum1);    <span class="comment">// 15，过程1+2+3+4+5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum2 = values.<span class="title function_">reduceRight</span>(<span class="keyword">function</span>(<span class="params">prev, cur, index, array</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> prev + cur;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum2);    <span class="comment">// 15，过程5+4+3+2+1</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="6-3-定型数组"><a href="#6-3-定型数组" class="headerlink" title="6.3 定型数组"></a>6.3 定型数组</h3><ol start="17"><li><p>ArrayBuffer()：用于内存中分配特定数量的字节空间，创建就不能再调整大小</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>);    <span class="comment">// 在内存中分配16字节</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="property">byteLength</span>);        <span class="comment">// 16</span></span><br></pre></td></tr></table></figure></li><li><p>DataView：允许你读写ArrayBuffer的视图；DataView使用ElementType来实现JavaScript的Number类型到缓冲内二进制格式的转换；默认为大端字节序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>);    <span class="comment">// 在内存中分配16字节</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dv = <span class="keyword">new</span> <span class="title class_">DataView</span>(buf, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dv.<span class="property">byteOffset</span>);     <span class="comment">// 0，表示视图从缓冲起点开始</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dv.<span class="property">byteLength</span>);     <span class="comment">// 8，限制视图为前 8 个字节</span></span><br></pre></td></tr></table></figure></li><li><p>定型数组：另一种形式的ArrayBuffer视图；特定于一种ElementType且遵循系统原生的字节序；目的是提高WebGL等原生库交换二进制数据的效率；定型数组两个新方法</p><ul><li>set()：复制值到指定的索引位置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建长度为8的int16数组</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="keyword">new</span> <span class="title class_">Int16Array</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把定型数组复制为前4个值</span></span><br><span class="line"><span class="comment">// 偏移量默认为索引0</span></span><br><span class="line">container.<span class="title function_">set</span>(<span class="title class_">Int8Array</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(container);   <span class="comment">// [1,2,3,4,0,0,0,0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把普通数组复制为后4个值</span></span><br><span class="line"><span class="comment">// 偏移量4表示从索引4开始插入</span></span><br><span class="line">container.<span class="title function_">set</span>([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(container);   <span class="comment">// [1,2,3,4,5,6,7,8]</span></span><br></pre></td></tr></table></figure></li><li>subarray()：复制值返回一个新定型数组；参数可选开始索引和结束索引<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = <span class="title class_">Int16Array</span>.<span class="title function_">of</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从索引1开始复制到索引3</span></span><br><span class="line"><span class="keyword">const</span> partialCopy = source.<span class="title function_">subarray</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(partialCopy);     <span class="comment">// [4, 6]</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="6-4-Map"><a href="#6-4-Map" class="headerlink" title="6.4 Map"></a>6.4 Map</h3><ol start="20"><li>创建Map构造函数；建议键&#x2F;值存放使用Map</li><li>Map实例化方法和属性<ul><li>set()：添加键&#x2F;值对</li><li>get()：查询键，获取值</li><li>has()：判断Map中是否存在键</li><li>size：获取键&#x2F;值对数量</li><li>delete()：删除参数中的键&#x2F;值对，参数是键</li><li>clear()：删除全部键&#x2F;值对<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;幽蓝&#x27;</span>],</span><br><span class="line">  [<span class="literal">true</span>, <span class="string">&#x27;true&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line">m1.<span class="title function_">set</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">9</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>), m1.<span class="title function_">get</span>(<span class="string">&#x27;age&#x27;</span>));    <span class="comment">// 幽蓝 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="title function_">has</span>(<span class="string">&#x27;age&#x27;</span>), m1.<span class="title function_">has</span>(<span class="string">&#x27;sex&#x27;</span>));    <span class="comment">// true false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="property">size</span>);   <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">m1.<span class="title function_">delete</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1);    <span class="comment">// &#123; true =&gt; &#x27;true&#x27;, &#x27;age&#x27; =&gt; 9 &#125;</span></span><br><span class="line"></span><br><span class="line">m1.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1, <span class="keyword">typeof</span> m1);    <span class="comment">// &#123;&#125; object</span></span><br></pre></td></tr></table></figure></li><li>entries()：Map迭代器，能以插入顺序生成[key, value]形式的数组<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;幽蓝&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;age&#x27;</span>, <span class="number">9</span>],</span><br><span class="line">  [<span class="literal">true</span>, <span class="string">&#x27;true&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> m.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [ &#x27;name&#x27;, &#x27;幽蓝&#x27; ]</span></span><br><span class="line"><span class="comment">// [ &#x27;age&#x27;, 9 ]</span></span><br><span class="line"><span class="comment">// [ true, &#x27;true&#x27; ]</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="6-5-WeakMap"><a href="#6-5-WeakMap" class="headerlink" title="6.5 WeakMap"></a>6.5 WeakMap</h3><ol start="22"><li><p>创建WeakMap构造函数；键只能是引用类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> k1 = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">      k2 = &#123;<span class="attr">id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">      k3 = &#123;<span class="attr">id</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> wm1 = <span class="keyword">new</span> <span class="title class_">WeakMap</span>([</span><br><span class="line">  [k1, <span class="string">&#x27;val1&#x27;</span>],</span><br><span class="line">  [k2, <span class="string">&#x27;val2&#x27;</span>],</span><br><span class="line">  [k3, <span class="string">&#x27;val3&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wm1.<span class="title function_">get</span>(k1), wm1.<span class="title function_">get</span>(k2), wm1.<span class="title function_">get</span>(k3));   <span class="comment">// val1 val2 val3</span></span><br></pre></td></tr></table></figure></li><li><p>WeakMap实例化方法：set()、get()、has()、delete()</p></li><li><p>应用场景：DOM节点是引用类型，WeakMap可以绑定成键，如果绑定的DOM节点被删除，垃圾回收程序可以立即释放其内存，而Map则不会释放内存，这也是WeakMap一项优势</p></li></ol><h3 id="6-6-Set"><a href="#6-6-Set" class="headerlink" title="6.6 Set"></a>6.6 Set</h3><ol start="25"><li><p>Set实例化方法和属性</p><ul><li>add()：增加值，重复值会被替换</li><li>has()、Set.size、delete()、clear()</li><li>entries()：两个元素的数组<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s1.<span class="title function_">add</span>(<span class="number">1</span>)</span><br><span class="line">  .<span class="title function_">add</span>(<span class="number">2</span>)</span><br><span class="line">  .<span class="title function_">add</span>(<span class="number">2</span>)</span><br><span class="line">  .<span class="title function_">add</span>(<span class="string">&#x27;幽蓝&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);         <span class="comment">// &#123; 1, 2, &#x27;幽蓝&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以数组去重</span></span><br><span class="line"><span class="keyword">const</span> s2 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> s3 = <span class="keyword">new</span> <span class="title class_">Set</span>(s2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3);    <span class="comment">// &#123; 1, 2, 3, 5, 6 &#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Set没有索引值，本身是无序的，但迭代器能以插入顺序生成集合内容；values()和keys()是相同的</p></li></ol><h3 id="6-7-WeakSet"><a href="#6-7-WeakSet" class="headerlink" title="6.7 WeakSet"></a>6.7 WeakSet</h3><ol start="27"><li><p>创建WeakSet构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> k1 = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">      k2 = &#123;<span class="attr">id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">      k3 = &#123;<span class="attr">id</span>: <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WeakSet</span>([k1, k2, k3]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws.<span class="title function_">has</span>(k1), ws.<span class="title function_">has</span>(k2), ws.<span class="title function_">has</span>(k3));    <span class="comment">// true ...</span></span><br></pre></td></tr></table></figure></li><li><p>WeakSet实例化方法和属性：add()、has()、delete()</p></li><li><p>总结：WeakMap使用较多，WeakSet使用较少，两者应用场景都在DOM节点上，能让垃圾回收程序立即释放其内存；而Map、Set则不会释放内存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws1 = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line">ws1.<span class="title function_">add</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">ws1.<span class="title function_">add</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置定时器看垃圾回收触发，去浏览器控制台看</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ws1);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-8-迭代与扩展操作"><a href="#6-8-迭代与扩展操作" class="headerlink" title="6.8 迭代与扩展操作"></a>6.8 迭代与扩展操作</h3><ol start="30"><li>原生集合类型：Array、所有定型数组、Map、Set</li></ol><h2 id="第七章-迭代器与生成器"><a href="#第七章-迭代器与生成器" class="headerlink" title="第七章 迭代器与生成器"></a>第七章 迭代器与生成器</h2><h3 id="7-2-迭代器模式"><a href="#7-2-迭代器模式" class="headerlink" title="7.2 迭代器模式"></a>7.2 迭代器模式</h3><ol><li>迭代器模式：集合类型、类数组提供iterable接口；默认迭代器Symbol.iterator，调用之后会产生一个实现Iterator接口的对象</li><li>可迭代对象的原生语言特性<ul><li>for-of循环</li><li>数组解构</li><li>扩展操作符</li><li>Array.from()</li><li>创建集合</li><li>创建映射</li><li>Promise.all()接收由期约组成的可迭代对象</li><li>Promise.race()接收由期约组成的可迭代对象</li><li>yield*操作符，在生成器中使用</li></ul></li><li>迭代器协议：next()在可迭代对象中遍历数据，成功调用返回IteratorResult对象，这个对象包含value和done属性，持续调用next()，直到value为undefined且done为true，后面始终重复<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="7-3-生成器"><a href="#7-3-生成器" class="headerlink" title="7.3 生成器"></a>7.3 生成器</h3><ol start="4"><li>生成器：函数名称前加一个型号（*）表示它是一个生成器，箭头函数不能定义生成器函数；yield关键字可以让生成器停止和开始执行，而给关键字加星号表示继续迭代<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">func1</span>(<span class="params">...nums</span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;--func1--&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span>* nums;</span><br><span class="line">  <span class="keyword">yield</span>* <span class="title function_">func2</span>(<span class="number">101</span>, <span class="number">102</span>);   <span class="comment">// func2() 返回的函数参数也可以迭代</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;--end--&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">func2</span>(<span class="params">...nums</span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;--func2--&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> nums;</span><br><span class="line">  <span class="keyword">yield</span>* nums;</span><br><span class="line">  <span class="keyword">yield</span>* <span class="string">&#x27;对不起&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span>* <span class="title function_">func3</span>(<span class="string">&#x27;幽蓝&#x27;</span>, <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">func3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;--func3--&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span>* <span class="variable language_">arguments</span>;   <span class="comment">// arguments也是可迭代对象</span></span><br><span class="line">  <span class="keyword">yield</span>* <span class="title function_">funcNoStar</span>(<span class="variable language_">arguments</span>);   <span class="comment">// 函数返回值是可迭代对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">funcNoStar</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [<span class="string">&#x27;--funcNoStar--&#x27;</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    res.<span class="title function_">push</span>(...a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> <span class="title function_">func1</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --func1--</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// --func2--</span></span><br><span class="line"><span class="comment">// [ 101, 102 ]</span></span><br><span class="line"><span class="comment">// 101</span></span><br><span class="line"><span class="comment">// 102</span></span><br><span class="line"><span class="comment">// 对</span></span><br><span class="line"><span class="comment">// 不</span></span><br><span class="line"><span class="comment">// 起</span></span><br><span class="line"><span class="comment">// --func3--</span></span><br><span class="line"><span class="comment">// 幽蓝</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// --funcNoStar--</span></span><br><span class="line"><span class="comment">// 幽</span></span><br><span class="line"><span class="comment">// 蓝</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// --end--</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="第八章-对象、类与面向对象编程"><a href="#第八章-对象、类与面向对象编程" class="headerlink" title="第八章 对象、类与面向对象编程"></a>第八章 对象、类与面向对象编程</h2><h3 id="8-1-理解对象"><a href="#8-1-理解对象" class="headerlink" title="8.1 理解对象"></a>8.1 理解对象</h3><ol><li><p>两种属性：数据属性和访问属性。特性：描述属性的特征，是为了JavaScript引擎的规范定义，不能直接访问<br> 1.1数据属性4个特性</p><ul><li>[[Configurable]]：表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性</li><li>[[Enumerable]]：表示属性是否可以通过for-in循环返回</li><li>[[Writable]]：表示属性的值是否可以被修改</li><li>[[Value]]：包含属性实际的值</li></ul><p> 1.2 访问属性4个特性</p><ul><li>[[Configurable]]：表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把它改为数据属性</li><li>[[Enumerable]]：表示属性是否可以通过for-in循环返回</li><li>[[Get]]：获取函数，在读取属性时调用</li><li>[[Set]]：设置函数，在写入属性时调用</li></ul></li><li><p>定义及读取特性</p><ul><li>Object.defineProperty()</li><li>Object.defineProperties()</li><li>Object.getOwnPropertyDescriptor()</li></ul></li><li><p>合并对象：Object.assign()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dest, src, result;</span><br><span class="line">dest = &#123;&#125;;</span><br><span class="line">src = &#123;<span class="attr">id</span>: <span class="string">&#x27;幽蓝&#x27;</span>&#125;;</span><br><span class="line">result = <span class="title class_">Object</span>.<span class="title function_">assign</span>(dest, src, &#123;<span class="attr">age</span>: <span class="number">9</span>&#125;, &#123;<span class="attr">age</span>: <span class="number">10</span>&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dest === result, src !== result);   <span class="comment">// true true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dest, result);                      <span class="comment">// &#123; id: &#x27;幽蓝&#x27;, age: 10 &#125; &#123; id: &#x27;幽蓝&#x27;, age: 10 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>对象标识及相等判定：Object.is()，改善全等（&#x3D;&#x3D;&#x3D;）问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="literal">true</span>, <span class="number">1</span>),</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">is</span>(&#123;&#125;, &#123;&#125;),</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="string">&#x27;2&#x27;</span>, <span class="number">2</span>));     <span class="comment">// false false false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>, -<span class="number">0</span>),</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">is</span>(-<span class="number">0</span>, <span class="number">0</span>));      <span class="comment">// false true false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>));   <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>对象解构：使用与对象匹配的结构来实现对象属性赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;幽蓝&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">9</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name, age, likeColor = <span class="string">&#x27;blue&#x27;</span>&#125; = p;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age, likeColor);    <span class="comment">// 幽蓝 9 blue</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="8-2-创建对象"><a href="#8-2-创建对象" class="headerlink" title="8.2 创建对象"></a>8.2 创建对象</h3><ol><li><p>工厂模式：虽然可以解决创建多个类似对象的问题，但没有解决对象标识问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name, age, job</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">  o.<span class="property">name</span> = name;</span><br><span class="line">  o.<span class="property">age</span> = age;</span><br><span class="line">  o.<span class="property">job</span> = job;</span><br><span class="line">  o.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title function_">createPerson</span>(<span class="string">&#x27;幽蓝&#x27;</span>, <span class="number">9</span>, <span class="string">&#x27;Software Engineer&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title function_">createPerson</span>(<span class="string">&#x27;金涛&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;coach&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>构造函数模式：构造函数应该以大写字母开头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name, age, job)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;幽蓝&#x27;</span>, <span class="number">9</span>, <span class="string">&#x27;Software Engineer&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;金涛&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;coach&#x27;</span>);</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">sayName</span>();   <span class="comment">// 幽蓝</span></span><br><span class="line">p2.<span class="title function_">sayName</span>();   <span class="comment">// 金涛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// p1 p2 分别保存着Person的一个不同的实例，这两个对象都有一个constructor属性，该属性指向Person</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">constructor</span>);  <span class="comment">// function Person(name, age, job) &#123;...</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1 <span class="keyword">instanceof</span> <span class="title class_">Object</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1 <span class="keyword">instanceof</span> <span class="title class_">Person</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p> 2.1 这种方法会经历5个步骤</p><ul><li>在内存中创建一个新对象</li><li>这个新对象内部的[[Prototype]]特性被赋值为构造函数的 prototype属性</li><li>构造函数内部的this被赋值为这个新对象(即this指向新对象)</li><li>执行构造函数内部的代码(给新对象添加属性)</li><li>如果构造函数返回非空对象，则返回该对象;否则，返回刚创建的新对象</li></ul><p> 2.2 构造函数的问题：每个方法会在每个实例上创建一遍<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">sayName</span> == p2.<span class="property">sayName</span>);    <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p></li><li><p>原型模式：每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象（函数的原型对象），这个对象包含可以由该类型的所有实例共享的属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">job</span> = <span class="string">&#x27;student&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">sayName</span> === p2.<span class="property">sayName</span>);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p> 3.1 理解原型</p><ul><li>只要创建一个函数，就会按照特定的规则为这个函数创建一个prototype属性(指向原型对象)</li><li>默认所有原型对象自动获得一个名为constructor的属性，指向与之关联的构造函数</li><li>调用构造函数创建新实例后，实例将有一个__proto__属性，指向构造函数的原型对象，指针叫[[Prototype]]，默认原型指向Object</li><li>实例与构造函数之间没有直接关系</li><li>读取属性：搜索先从对象实例本身开始，如果没找到，搜索原型对象</li><li>使用isPrototype()来检测构造函数和实例之间是否有关系</li><li>使用hasOwnProperty()来检测属性存在于实例中还是原型中</li><li>原型和in操作符 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in操作符通过实例或原型访问到属性时返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> p1);    <span class="comment">// true   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举属性</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> p1) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(prop);    <span class="comment">// name age job sayName</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.keys 返回一个所有元素为字符串的数组</span></span><br><span class="line">p1.<span class="property">name</span> = <span class="string">&#x27;幽蓝&#x27;</span>;</span><br><span class="line">p1.<span class="property">age</span> = <span class="number">9</span>;</span><br><span class="line">p1.<span class="property">sayHello</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(p1))    <span class="comment">// [ &#x27;name&#x27;, &#x27;age&#x27;, &#x27;sayHello&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.getOwnPropertyNames() 返回所有实例属性，无论是否可以枚举</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>));   <span class="comment">// [ &#x27;constructor&#x27;, &#x27;name&#x27;, &#x27;age&#x27;, &#x27;job&#x27;, &#x27;sayName&#x27; ]</span></span><br></pre></td></tr></table></figure></li><li>用对象字面量重写原型对象 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: <span class="title class_">Person</span>,    <span class="comment">// 这里重写了prototype，不再默认有constructor属性</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;幽蓝&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">9</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="8-3-继承"><a href="#8-3-继承" class="headerlink" title="8.3 继承"></a>8.3 继承</h3><ol><li><p>JavaScript中使用最多的继承模式：组合继承，融合原形链和构造函数的优点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);         <span class="comment">// 借用构造函数</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();  <span class="comment">// 原型链</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SubType</span>;</span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;幽蓝&#x27;</span>, <span class="number">9</span>);</span><br><span class="line">instance.<span class="title function_">sayName</span>();   <span class="comment">// 幽蓝</span></span><br><span class="line">instance.<span class="title function_">sayAge</span>();    <span class="comment">// 9</span></span><br></pre></td></tr></table></figure></li><li><p>确定原型和实例的关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance <span class="keyword">instanceof</span> <span class="title class_">SuperType</span>);   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(instance));   <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>原型式继承、寄生式继承、寄生组合式继承<br>task</p><h3 id="8-4-类"><a href="#8-4-类" class="headerlink" title="8.4 类"></a>8.4 类</h3></li><li><p>class类名的首字母要大写；类不能声明提升；类是块级作用域</p></li><li><p>constructor关键字：定义块内部创建类的构造函数，用new调用类的构造函数操作</p><ul><li>在内存中创建一个新对象</li><li>这个新对象内部的[[Prototype]]指针被赋值为构造函数的prototype属性</li><li>构造函数内部的this被赋值为这个新对象(即this指向新对象)</li><li>执行构造函数内部的代码(给新对象添加属性)</li><li>如果构造函数返回非空对象，则返回该对象;否则，返回刚创建的新对象</li></ul></li><li><p>类构造函数与构造函数区别：调用类构造函数必须用new操作符；调用普通构造函数不用new操作符，以全局this作为内部对象</p></li><li><p>原型方法与访问器：实例间共享方法，类定义语法把在类块中定义的方法作为原型方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">locate</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;instance&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">locate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;prototype&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.<span class="title function_">locate</span>();                   <span class="comment">// instance</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">locate</span>();    <span class="comment">// prototype</span></span><br></pre></td></tr></table></figure></li><li><p>类继承：extends关键字，继承任何拥有[[Construct]]和原型的对象；super关键字引用它们的原型，super只能使用在派生类构造函数和静态方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello，我是父类&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ulan</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, job</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">sayHello</span>();   <span class="comment">// 调用父类方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello，我是幽蓝&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ul = <span class="keyword">new</span> <span class="title class_">Ulan</span>(<span class="string">&#x27;幽蓝&#x27;</span>, <span class="number">9</span>, <span class="string">&#x27;software engineer&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ul);    <span class="comment">// Ulan &#123; name: &#x27;幽蓝&#x27;, age: 9, job: &#x27;software engineer&#x27; &#125;</span></span><br><span class="line">ul.<span class="title function_">sayHello</span>();</span><br><span class="line"><span class="comment">// hello，我是父类</span></span><br><span class="line"><span class="comment">// hello，我是幽蓝</span></span><br></pre></td></tr></table></figure></li><li><p>静态方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello，我是父类&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello，我是静态父类&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ulan</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 方法相同，子类覆盖父类</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello，我是幽蓝&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">sayHello</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello，我是静态幽蓝&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ul = <span class="keyword">new</span> <span class="title class_">Ulan</span>();</span><br><span class="line">ul.<span class="title function_">sayHello</span>();    <span class="comment">// hello，我是幽蓝</span></span><br><span class="line"><span class="title class_">Ulan</span>.<span class="title function_">sayHello</span>();</span><br><span class="line"><span class="comment">// hello，我是静态父类</span></span><br><span class="line"><span class="comment">// hello，我是静态幽蓝</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="第九章-代理与反射"><a href="#第九章-代理与反射" class="headerlink" title="第九章 代理与反射"></a>第九章 代理与反射</h2><h3 id="9-1-代理基础"><a href="#9-1-代理基础" class="headerlink" title="9.1 代理基础"></a>9.1 代理基础</h3><ol><li><p>创建Proxy构造函数，接收两个参数：目标对象和处理程序对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;幽蓝&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">id</span>, proxy.<span class="property">id</span>);   <span class="comment">// 幽蓝 幽蓝</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标属性赋值会反映到两个对象上</span></span><br><span class="line">target.<span class="property">id</span> = <span class="string">&#x27;ulan&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">id</span>, proxy.<span class="property">id</span>);   <span class="comment">// ulan ulan</span></span><br><span class="line"><span class="comment">// 代理属性赋值会反映到两个对象上</span></span><br><span class="line">proxy.<span class="property">id</span> = <span class="string">&#x27;cat&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">id</span>, proxy.<span class="property">id</span>);   <span class="comment">// cat cat</span></span><br></pre></td></tr></table></figure></li><li><p>get()捕获器：会在获取属性值的操作中被调用</p><ul><li>target：目标对象</li><li>property：引用的目标对象上的字符串键属性</li><li>receiver：代理对象或继承代理对象的对象</li></ul></li><li><p>get捕获器不变式：如果target.property不可写且不可配置，处理程序返回的值必须与target.property匹配；如果target.property不可配置且[[Get]]特性为undefined，处理程序的返回值也必须是undefined</p></li><li><p>revocable()：撤销代理对象与目标对象的关联</p></li><li><p>状态标记：反射方法返回称作”状态标记”的布尔值，表示要执行的操作是否成功</p></li></ol><h3 id="9-2-代理捕获器与反射方法"><a href="#9-2-代理捕获器与反射方法" class="headerlink" title="9.2 代理捕获器与反射方法"></a>9.2 代理捕获器与反射方法</h3><ol start="6"><li>set()捕获器：会在设置属性值的操作中被调用<ul><li>target：目标对象</li><li>property：引用的目标对象上的字符串键属性</li><li>value：要赋给属性的值</li><li>receiver：接收最初赋值的对象</li></ul></li><li>set捕获器不变式：如果target.property不可写且不可配置，则不能修改目标属性的值；如果target.property不可配置且[[Set]]特性为undefined，则不能修改目标属性的值</li><li>其他捕获器<ul><li>has()捕获器会在in操作符中被调用</li><li>defineProperty()捕获器会在Object.defineProperty()中被调用</li><li>getOwnPropertyDescriptor()捕获器会在Object.getOwnPropertyDescriptor()中被调用</li><li>deleteProperty()捕获器会在delete操作符中被调用</li><li>ownKeys()捕获器会在Object.keys()及类似方法中被调用</li><li>getPrototypeOf()捕获器会在Object.getPrototypeOf()中被调用</li><li>setPrototypeOf()捕获器会在Object.setPrototypeOf()中被调用</li><li>isExtensible()捕获器会在Object.isExtensible()中被调用</li><li>preventExtensions()捕获器会在Object.preventExtensions()中被调用</li><li>apply()捕获器会在调用函数时中被调用</li><li>construct()捕获器会在new操作符中被调用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">name</span>: <span class="string">&#x27;幽蓝&#x27;</span>, <span class="attr">age</span>: <span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> personProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> target[key].<span class="title function_">toUpperCase</span>();   <span class="comment">// 获取name值并返回大写后的值</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      target[key] = value.<span class="title function_">trim</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">personProxy.<span class="property">name</span> = <span class="string">&#x27;ulan&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personProxy.<span class="property">name</span>);    <span class="comment">// ULAN</span></span><br><span class="line"></span><br><span class="line">personProxy.<span class="property">love</span> = <span class="string">&#x27;     I love cat     &#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personProxy.<span class="property">love</span>);    <span class="comment">// I LOVE CAT</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>, person.<span class="property">age</span>);   <span class="comment">// ulan 9</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="9-3-代理模式"><a href="#9-3-代理模式" class="headerlink" title="9.3 代理模式"></a>9.3 代理模式</h3><ol start="9"><li>跟踪属性访问、隐藏属性、属性验证、函数与构造函数参数验证、数据绑定与可观察对象</li></ol><h2 id="第十章-函数"><a href="#第十章-函数" class="headerlink" title="第十章 函数"></a>第十章 函数</h2><h3 id="10-1-箭头函数"><a href="#10-1-箭头函数" class="headerlink" title="10.1 箭头函数"></a>10.1 箭头函数</h3><ol><li>箭头函数实例化，建议参数不管有多少加()，花括号也加上{}；箭头函数不适用场景：arguments、super、new.target和构造函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">5</span>, <span class="number">8</span>));   <span class="comment">// 13</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ints = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints.<span class="title function_">map</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123; <span class="keyword">return</span> i + <span class="number">1</span>; &#125;));    <span class="comment">// [2,3,4]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-3-理解参数"><a href="#10-3-理解参数" class="headerlink" title="10.3 理解参数"></a>10.3 理解参数</h3><ol start="2"><li>函数的参数在内部表现为一个数组，接收参数就是在接收数组；非箭头函数可在内部访问arguments对象，arguments对象是一个类数组对象，可用中括号语法访问其中的元素(第一个参数是arguments[0]，第二个参数是arguments[1])，函数的参数只是为了方便才写出来的，并不是必须写出来的<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>], <span class="variable language_">arguments</span>[<span class="number">1</span>]);    <span class="comment">// hello world</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="10-5-默认参数值"><a href="#10-5-默认参数值" class="headerlink" title="10.5 默认参数值"></a>10.5 默认参数值</h3><ol start="3"><li><p>参数后面用&#x3D;可以为参数赋一个默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">p</span>(<span class="params">name = <span class="string">&#x27;张三&#x27;</span>, age = <span class="number">18</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`个人信息： <span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">p</span>());   <span class="comment">// 个人信息： 张三 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">p</span>(<span class="string">&#x27;李四&#x27;</span>));   <span class="comment">// 个人信息： 李四 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">p</span>(<span class="string">&#x27;幽蓝&#x27;</span>, <span class="number">9</span>));    <span class="comment">// 个人信息： 幽蓝 9</span></span><br></pre></td></tr></table></figure></li><li><p>暂时性死区：前面定义的参数不能引用后面定义的参数；参数也有自己的作用域，它们不能引用函数体的作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">name = age, age = <span class="number">9</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`名字：<span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>();    <span class="comment">// ReferenceError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 作用域链先从自己身上找，找不到再向外找，直到全局作用域找不到返回错误</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">name = <span class="string">&#x27;张三&#x27;</span>, age = getAge</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> getAge = <span class="number">18</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`个人信息：<span class="subst">$&#123;name&#125;</span>,&#123;age&#125;`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">b</span>();    <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-6-参数扩展与收集"><a href="#10-6-参数扩展与收集" class="headerlink" title="10.6 参数扩展与收集"></a>10.6 参数扩展与收集</h3><ol start="5"><li>扩展操作符：对可迭代对象以一个参数传入，然后进行拆分，最后返回每个值在单独传入<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">    sum += <span class="variable language_">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSum</span>(arr));                     <span class="comment">// 01,2,3,4,10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSum</span>(...arr));                  <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSum</span>(<span class="number">1</span>, ...arr, ...[<span class="number">4</span>, <span class="number">5</span>]));    <span class="comment">// 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSum</span>(...[<span class="number">2</span>, <span class="number">3</span>]));               <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-9-函数内部"><a href="#10-9-函数内部" class="headerlink" title="10.9 函数内部"></a>10.9 函数内部</h3><ol start="6"><li>谁调用this，this就指向谁；箭头函数的this指向箭头函数的上下文<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">King</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">royaltyName</span> = <span class="string">&#x27;Henry&#x27;</span>;</span><br><span class="line">  <span class="comment">// this 引用 King 的实例</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">royaltyName</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Queen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">royaltyName</span> = <span class="string">&#x27;Elizabeth&#x27;</span>;</span><br><span class="line">  <span class="comment">// this 引用 window 对象</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">royaltyName</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">King</span>();  <span class="comment">// Henry</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Queen</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-10-函数属性与方法"><a href="#10-10-函数属性与方法" class="headerlink" title="10.10 函数属性与方法"></a>10.10 函数属性与方法</h3><ol start="7"><li><p>apply()和call()强大的地方并不是给函数传参，而是控制函数体内this值的能力；两个方法的功能一样，区别在怎么给调用的函数传参更方便</p><ul><li>apply()：第一个参数是函数内this值，第二个参数是Array的实例，也可以是arguments对象</li><li>call()：第一个参数是函数内this值，第二个参数是将参数一个一个地列出来<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> sum.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> sum.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [num1, num2]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> sum.<span class="title function_">call</span>(<span class="variable language_">this</span>, num1, num2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">a</span>(<span class="number">10</span>, <span class="number">10</span>));   <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">b</span>(<span class="number">10</span>, <span class="number">10</span>));   <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">c</span>(<span class="number">10</span>, <span class="number">10</span>));   <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>bind()：创建一个新的函数实例，其this值会被绑定到传给bind()的对象上</p></li></ol><h3 id="10-12-递归"><a href="#10-12-递归" class="headerlink" title="10.12 递归"></a>10.12 递归</h3><ol start="9"><li>arguments.callee指向正在执行的函数的指针，因此可以在函数内部递归调用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * <span class="variable language_">arguments</span>.<span class="title function_">callee</span>(num - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = factorial;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">factorial</span>(<span class="number">5</span>));    <span class="comment">// 120, 5*4*3*2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">a</span>(<span class="number">4</span>));            <span class="comment">// 24, 4*3*2</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-13-尾调用优化"><a href="#10-13-尾调用优化" class="headerlink" title="10.13 尾调用优化"></a>10.13 尾调用优化</h3><ol start="10"><li>尾调用优化的条件<ul><li>代码在严格模式下执行</li><li>外部函数的返回值是对尾调用函数的调用</li><li>尾调用函数返回后不需要执行额外的逻辑</li><li>尾调用函数不是引用外部函数作用域中自由变量的闭包</li></ul></li></ol><h3 id="10-14-闭包"><a href="#10-14-闭包" class="headerlink" title="10.14 闭包"></a>10.14 闭包</h3><ol start="11"><li><p>闭包指的是引用另一个函数作用域中变量的函数</p></li><li><p>在调用一个函数时，会为这个函数调用创建一个执行上下文，并创建一个作用域链。然后用arguments和其他命名参数来初始化这个函数的活动对象。外部函数的活动对象是内部函数作用域链上的第二个对象。这个作用域链一直向外串起了所有包含函数的活动对象，直到全局执行上下文才终止</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最外面是作用域链上的第三个对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;        <span class="comment">// outer函数是作用域链上的第二个对象</span></span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&#x27;幽蓝&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="comment">// 匿名函数是作用域链上的第一个对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inner = <span class="title function_">outer</span>();</span><br><span class="line"><span class="title function_">inner</span>();        <span class="comment">// 幽蓝</span></span><br><span class="line">inner = <span class="literal">null</span>;  <span class="comment">// 解除对outer内部的匿名函数的引用，以便释放内存</span></span><br></pre></td></tr></table></figure></li><li><p>匿名函数中的this在非严格模式下等于window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;The Window&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;My Object&#x27;</span>,</span><br><span class="line">  <span class="title function_">getNameFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// The Window</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-16-私有变量"><a href="#10-16-私有变量" class="headerlink" title="10.16 私有变量"></a>10.16 私有变量</h3><ol start="14"><li><p>任何定义在函数或块中的变量，都可以认为是私有变量</p></li><li><p>特权方法：能够访问函数私有变量（及私有函数）的公有方法，缺点是每个实例都会重新创建一遍新方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyObject</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 私有变量和私有函数</span></span><br><span class="line">  <span class="keyword">let</span> privateVariable = <span class="string">&#x27;幽蓝&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">privateFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;_(:з」∠)_&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 特权方法</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">publicMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(privateVariable);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">privateFunction</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="title class_">MyObject</span>();</span><br><span class="line">o.<span class="title function_">publicMethod</span>();   <span class="comment">// 幽蓝 _(:з」∠)_</span></span><br><span class="line">o.<span class="title function_">privateFunction</span>();    <span class="comment">// TypeError: o.privateFunction is not a function at Object</span></span><br></pre></td></tr></table></figure></li><li><p>静态私有变量：通过使用私有作用域定义私有变量和函数来实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 私有变量和私有函数</span></span><br><span class="line">  <span class="keyword">let</span> privateVariable = <span class="string">&#x27;幽蓝&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">privateFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Σ（・□・；）&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不使用关键字声明的变量会创建在全局作用域中</span></span><br><span class="line">  <span class="title class_">MyObject</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 公有和特权方法</span></span><br><span class="line">  <span class="title class_">MyObject</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">publicMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(privateVariable);</span><br><span class="line">    <span class="title function_">privateFunction</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="title class_">MyObject</span>();</span><br><span class="line">o.<span class="title function_">publicMethod</span>();   <span class="comment">// 幽蓝 Σ（・□・；）</span></span><br><span class="line">o.<span class="title function_">privateFunction</span>();    <span class="comment">// TypeError: o.privateFunction is not a function at Object</span></span><br></pre></td></tr></table></figure></li><li><p>模块模式：创建一个要通过匿名函数返回的对象字面量，这个对象字面量中只包含可以公开访问的属性和方法</p></li></ol><h2 id="第十一章-期约与异步函数"><a href="#第十一章-期约与异步函数" class="headerlink" title="第十一章 期约与异步函数"></a>第十一章 期约与异步函数</h2><h3 id="11-1-异步编程"><a href="#11-1-异步编程" class="headerlink" title="11.1 异步编程"></a>11.1 异步编程</h3><ol><li>同步行为对应内存中顺序执行的处理器指令，每条指令都会严格按照它们出现的顺序来执行，而每条指令执行后也能立即获得存储在系统本地（如寄存器或系统内存）的信息</li><li>异步行为是为了优化因计算量大而时间长的操作，行为类似于系统中断，即当前进程外部的实体可以触发代码执行；早期支持定义回调函数来表明异步操作完成。串联多个异步操作是一个常见的问题，通常需要深度嵌套(俗称“回调地狱”)来解决</li></ol><h3 id="11-2-Promise期约"><a href="#11-2-Promise期约" class="headerlink" title="11.2 Promise期约"></a>11.2 Promise期约</h3><ol start="3"><li><p>创建Promise构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 男人和女人准备结婚，他们打算结婚前要个孩子</span></span><br><span class="line"><span class="comment">// 如果女人怀孕了，成功状态返回孩子他爹，失败状态返回老公</span></span><br><span class="line"><span class="comment">// 不论是否怀孕，最终都会结婚</span></span><br><span class="line"><span class="keyword">const</span> isPregnant = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (isPregnant) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">`孩子他爹`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">`老公`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`男人成为了<span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`男人成为了<span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`男人和女人最终结婚了`</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>Promise是一个有状态的对象，状态是私有的，不能直接通过js检测到，也不能被外部js修改，从而隔离外部同步代码；状态可能处于以下3种</p><ul><li>待定（pending）</li><li>成功（fulfilled，也称resolve）</li><li>失败（reject）</li></ul></li><li><p>Promise实例方法</p><ul><li>then()：实现了Thenable接口，接收两个参数onResolved处理程序和onRejected处理程序</li><li>catch()：添加拒绝处理程序，接收一个参数onRejected处理程序</li><li>finally()：添加onFinally处理程序，解决或拒绝状态时都会执行</li></ul></li><li><p>两个静态方法：Promise.all()和 Promise.race()</p><ul><li>Promise.all()：接收多个Promise对象，全部对象状态成功，all才会成功，其中一个状态失败，all才会失败，最终返回一个数组</li><li>Promise.race()：接收多个Promise对象，第一个对象状态成功，race才会成功，第一个对象状态失败，race才会失败<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等待多少毫秒变化状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">delay</span> = ms =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="title function_">delay</span>(<span class="number">1000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p1 完成了&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;p1&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title function_">delay</span>(<span class="number">2000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p2 完成了&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;p2&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pAll = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2]);</span><br><span class="line">pAll.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// p1 完成了</span></span><br><span class="line"><span class="comment">// p2 完成了</span></span><br><span class="line"><span class="comment">// [ &#x27;p1&#x27;, &#x27;p2&#x27; ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pRace = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2]);</span><br><span class="line">pRace.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// p1 完成了</span></span><br><span class="line"><span class="comment">// p1</span></span><br><span class="line"><span class="comment">// p2 完成了</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="11-3-异步函数"><a href="#11-3-异步函数" class="headerlink" title="11.3 异步函数"></a>11.3 异步函数</h3><ol start="7"><li>async关键字用于声明异步函数；await关键字可以暂停异步函数代码的执行，等待Promise解决<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">start</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">start</span>();</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="第十二章-BOM"><a href="#第十二章-BOM" class="headerlink" title="第十二章 BOM"></a>第十二章 BOM</h2><h3 id="12-1-window对象"><a href="#12-1-window对象" class="headerlink" title="12.1 window对象"></a>12.1 window对象</h3><ol><li><p>screenLeft和screenTop属性，表示窗口相对于屏幕左侧和顶部的位置</p></li><li><p>moveTo()接收要移动到的新位置的绝对坐标x和y；而moveBy()则接收相对当前位置在两个方向上移动的像素数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把窗口移动到左上角</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">moveTo</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把窗口向下移动100像素</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">moveBy</span>(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把窗口移动到坐标位置(200, 300)</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">moveTo</span>(<span class="number">200</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把窗口向左移动50像素</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">moveBy</span>(-<span class="number">50</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>窗口大小</p><ul><li>outerWidth和outerHeight：浏览器窗口自身的大小</li><li>innerWidth和innerHeight：浏览器窗口中页面视口的大小</li><li>document.documentElement.clientWidth和document.documentElement.clientHeight：页面视口的宽度和高度</li><li>resizeTo()接收新的宽度和高度值；resizeBy()接收宽度和高度要缩放多少<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缩放到100×100</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">resizeTo</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩放到200×150</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">resizeBy</span>(<span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩放到300×300</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">resizeTo</span>(<span class="number">300</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>视口位置</p><ul><li>scroll() 、scrollTo()表示要滚动到的坐标</li><li>scrollBy() 表示要滚动的距离<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相对于当前视口向下滚动100像素</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollBy</span>(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相对于当前视口向右滚动40像素</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollBy</span>(<span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滚动到页面左上角</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滚动到距离屏幕左边及顶边各100像素的位置</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>window.open()：导航到指定URL，也可以用于打开新浏览器窗口接收4个参数:</p><ul><li>要加载的URL</li><li>目标窗口</li><li>特性字符串</li><li>新窗口在浏览器历史记录中是否替代当前加载页面的布尔值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与&lt;a href=&quot;http://www.wrox.com&quot; target=&quot;topFrame&quot;/&gt;相同</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;http://www.wrox.com/&quot;</span>, <span class="string">&quot;topFrame&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>定时器</p><ul><li>setTimeout()指定在一定时间后执行某些代码；clearTimeout()可以取消超时任务，任务执行后再调用clearTimeout()没有效果</li><li>setInterval()指定每隔一段时间执行某些代码；clearInterval()可以取消循环定时，如果不设置，定时任务会一直执行到页面卸载<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>), <span class="number">2000</span>);</span><br><span class="line"><span class="comment">// hi</span></span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>, max = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> incrementNumber = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  num++;</span><br><span class="line">  <span class="keyword">if</span> (num === max) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(intervalId);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;终止&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> intervalId = <span class="built_in">setInterval</span>(incrementNumber, <span class="number">500</span>);</span><br><span class="line"><span class="comment">// ...5秒后</span></span><br><span class="line"><span class="comment">// 终止</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="12-2-location对象"><a href="#12-2-location对象" class="headerlink" title="12.2 location对象"></a>12.2 location对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给属性赋值命令浏览器进行页面跳转</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&#x27;https://github.com/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新加载页面，参数true表示强制从服务器强制加载</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h3 id="12-3-navigator对象"><a href="#12-3-navigator对象" class="headerlink" title="12.3 navigator对象"></a>12.3 navigator对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器版本</span></span><br><span class="line">navigator.<span class="property">appVersion</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户代理</span></span><br><span class="line">navigator.<span class="property">userAgent</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作系统</span></span><br><span class="line">navigator.<span class="property">platform</span>;</span><br></pre></td></tr></table></figure><h3 id="12-5-history对象"><a href="#12-5-history对象" class="headerlink" title="12.5 history对象"></a>12.5 history对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">history.<span class="title function_">back</span>();     <span class="comment">// 后退一页</span></span><br><span class="line">history.<span class="title function_">forward</span>();  <span class="comment">// 前进一页</span></span><br><span class="line"></span><br><span class="line">history.<span class="title function_">go</span>(-<span class="number">1</span>); <span class="comment">// 后退一页</span></span><br><span class="line">history.<span class="title function_">go</span>(<span class="number">1</span>);  <span class="comment">// 前进一页</span></span><br></pre></td></tr></table></figure><h2 id="第十三章-客户端检测"><a href="#第十三章-客户端检测" class="headerlink" title="第十三章 客户端检测"></a>第十三章 客户端检测</h2><h3 id="13-2-用户代理检测"><a href="#13-2-用户代理检测" class="headerlink" title="13.2 用户代理检测"></a>13.2 用户代理检测</h3><ol><li>浏览器核心<ul><li>Firefox的渲染引擎是Gecko</li><li>Safari的渲染引擎是WebKit</li><li>Chrome的渲染引擎是Blink，使用V8作为JavaScript引擎</li></ul></li></ol><h3 id="13-3-软件与硬件检测"><a href="#13-3-软件与硬件检测" class="headerlink" title="13.3 软件与硬件检测"></a>13.3 软件与硬件检测</h3><ol start="2"><li>浏览器元数据<ul><li>Geolocation API：查询宿主系统并尽可能精确地返回设备的位置信息</li><li>Connection State：通过navigator.onLine属性来确定浏览器的联网状态</li><li>NetworkInformation API：同上面一样，用来确定浏览器联网状态，通过navigator.connection属性使用</li><li>navigator.hardwareConcurrency：返回浏览器支持的逻辑处理器核心数量</li><li>navigator.deviceMemory：返回设备大致的系统内存大小</li></ul></li></ol><h2 id="第十四章-DOM"><a href="#第十四章-DOM" class="headerlink" title="第十四章 DOM"></a>第十四章 DOM</h2><ol><li><p>nodeType属性用来区分不同类型的节点</p><ul><li>值为1：元素节点</li><li>值为3：文本节点</li><li>值为9：Document节点</li></ul></li><li><p>访问元素节点常用方法</p><ul><li>document.getElementById()：通过id得到元素</li><li>document.getElementsByTagName()：通过标签名得到元素数组</li><li>document.getElementsByClassName()：通过类名得到元素数组</li><li>document.querySelector()：通过选择器得到元素</li><li>document.querySelectorAll()：通过选择器得到元素数组<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;spec&quot;</span>&gt;</span>456<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>789<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> spec = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;spec&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> p = box1.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;p&#x27;</span>);           <span class="comment">// [p, p.spec, p]</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> theP = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#box1 .spec&#x27;</span>); <span class="comment">// &lt;p class=&quot;spec&quot;&gt;456&lt;/p&gt;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> thePAll = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#box1 p&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(thePAll[<span class="number">2</span>]);  <span class="comment">// &lt;p&gt;789&lt;/p&gt;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>节点关系</p><ul><li>parentNode：父节点</li><li>children：子节点</li><li>firstElementChild：第一个子节点</li><li>lastElementChild：最后一个子节点</li><li>previousElementSibling：上一个兄弟节点</li><li>nextElementSibling：下一个兄弟节点<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;spec&quot;</span>&gt;</span>456<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>789<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> spec = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;spec&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box1.<span class="property">children</span>);                <span class="comment">// [p, p.spec, p]</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box1.<span class="property">firstElementChild</span>);       <span class="comment">// &lt;p&gt;123&lt;/p&gt;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box1.<span class="property">lastElementChild</span>);        <span class="comment">// &lt;p&gt;789&lt;/p&gt;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(spec.<span class="property">previousElementSibling</span>);  <span class="comment">// &lt;p&gt;123&lt;/p&gt;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(spec.<span class="property">nextElementSibling</span>);      <span class="comment">// &lt;p&gt;789&lt;/p&gt;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>改变元素节点中的内容</p><ul><li>innerHTML：以HTML语法设置节点中的内容</li><li>innerText：以纯文本形式设置节点中的内容<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  let box1 = document.getElementById(&#x27;box1&#x27;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  let box2 = document.getElementById(&#x27;box2&#x27;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  box1.innerHTML = &#x27;<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&#x27;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  box2.innerText = &#x27;<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&#x27;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>改变元素节点的CSS样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;不存在的图片&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pic&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> pic = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pic&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> link = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  box1.<span class="property">style</span>.<span class="property">bacgroudColor</span> = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  box1.<span class="property">style</span>.<span class="property">bacgroudImage</span> = <span class="string">&#x27;url(images/2.jpg)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  box1.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&#x27;32px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 修改图片路径</span></span></span><br><span class="line"><span class="language-javascript">  pic.<span class="property">src</span> = <span class="string">&#x27;images/3.jpg&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 修改跳转链接</span></span></span><br><span class="line"><span class="language-javascript">  link.<span class="property">href</span> = <span class="string">&#x27;diyulan.me&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自定义属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  box1.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-n&#x27;</span>, <span class="number">10</span>);    <span class="comment">// &lt;div id=&quot;box1&quot; data-n=&quot;10&quot;&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> getDIY = box1.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-n&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(getDIY);    <span class="comment">// 10</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建节点和移动节点</p><ul><li>document.createElement()：创建tagname的HTML元素，并没有挂载到DOM树上</li><li>appendChild()：可以将createElement()挂载到父节点内，成为父节点的最后一个子节点</li><li>insertBefore()：可以将createElement()挂载到父节点内，第二个参数决定挂载位置<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落0<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;move1&quot;</span>&gt;</span>我是段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;move2&quot;</span>&gt;</span>我是段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是老油条<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> box2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> moveP1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;move1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> moveP2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;move2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> ps1 = box1.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> ps2 = box2.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 创建节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> createP1 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> createP2 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  createP1.<span class="property">innerText</span> = <span class="string">&#x27;我是新来的&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  createP2.<span class="property">innerText</span> = <span class="string">&#x27;我喜欢当第一&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 挂载节点</span></span></span><br><span class="line"><span class="language-javascript">  box1.<span class="title function_">appendChild</span>(createP1);</span></span><br><span class="line"><span class="language-javascript">  box1.<span class="title function_">insertBefore</span>(createP2, ps1[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 移动节点</span></span></span><br><span class="line"><span class="language-javascript">  box2.<span class="title function_">appendChild</span>(moveP1);</span></span><br><span class="line"><span class="language-javascript">  box2.<span class="title function_">insertBefore</span>(moveP2, ps2[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>克隆节点：参数是一个布尔值，表示是否深克隆，如果为true则节点的所有后代节点都会克隆，如果为false则只克隆节点本身</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>可乐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> box2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// ul是一个类数组，就算只有一个ul标签也要写[0]</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> theUl = box1.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;ul&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 克隆节点，并添加到box2</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> newUl = theUl.<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">  box2.<span class="title function_">appendChild</span>(newUl);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>删除节点：只能由父元素来删除子节点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> delP = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;delete&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  box1.<span class="title function_">removeChild</span>(delP);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="第十五章-DOM扩展"><a href="#第十五章-DOM扩展" class="headerlink" title="第十五章 DOM扩展"></a>第十五章 DOM扩展</h2><h3 id="15-1-Selectors-API"><a href="#15-1-Selectors-API" class="headerlink" title="15.1 Selectors API"></a>15.1 Selectors API</h3><ol><li>matches()：接收一个CSS选择符参数，如果元素匹配返回true，否则返回false</li></ol><h3 id="15-3-HTML5"><a href="#15-3-HTML5" class="headerlink" title="15.3 HTML5"></a>15.3 HTML5</h3><ol start="2"><li>推荐id选择器负责JS，class选择器负责CSS<ul><li>classList.add()：class选择器内添加值</li><li>classList.remove()：class选择器内删除值<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  let box1 = document.getElementById(&#x27;box1&#x27;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  box1.classList.add(&#x27;hi&#x27;);         // <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  box1.classList.add(&#x27;hello&#x27;);      // <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hi hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  box1.classList.remove(&#x27;hi&#x27;);      // <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="第十六章-DOM2和DOM3"><a href="#第十六章-DOM2和DOM3" class="headerlink" title="第十六章 DOM2和DOM3"></a>第十六章 DOM2和DOM3</h2><h3 id="16-2-样式"><a href="#16-2-样式" class="headerlink" title="16.2 样式"></a>16.2 样式</h3><ol><li>CSS属性名使用连字符表示法；JS中这些属性必须转换为驼峰大小写形式</li></ol><table><thead><tr><th>CSS属性</th><th>JS属性</th></tr></thead><tbody><tr><td>background-image</td><td>style.backgroundImage</td></tr><tr><td>color</td><td>style.color</td></tr><tr><td>display</td><td>style.display</td></tr><tr><td>font-family</td><td>style.fontFamily</td></tr></tbody></table><h2 id="第十七章-事件"><a href="#第十七章-事件" class="headerlink" title="第十七章 事件"></a>第十七章 事件</h2><h3 id="17-1-事件流"><a href="#17-1-事件流" class="headerlink" title="17.1 事件流"></a>17.1 事件流</h3><ol><li>事件冒泡：从最具体的元素(文档树中最深的节点)开始触发，然后向上传播至没有那么具体的元素(文档)</li><li>事件捕获：最不具体的节点应该最先收到事件，而最具体的节点应该最后收到事件</li><li>DOM事件流分3个阶段：事件捕获、到达目标和事件冒泡</li></ol><h3 id="17-2-事件处理程序"><a href="#17-2-事件处理程序" class="headerlink" title="17.2 事件处理程序"></a>17.2 事件处理程序</h3><ol start="4"><li><p>事件处理程序：用户或浏览器执行的某种动作，比如单击、加载、鼠标悬停等事件，为响应事件而调用相关函数；事件处理程序的名字以”on”开头</p></li><li><p>DOM0事件处理程序，以这种方式添加的事件处理程序会在事件流的冒泡阶段被处理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 绑定事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myBtn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);  <span class="comment">// &quot;myBtn&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 移除事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">  btn.<span class="property">onclick</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>DOM2事件处理程序</p><ul><li>addEventListener()：接收3个参数：事件名、事件处理函数和一个布尔值，true表示在捕获阶段调用事件处理程序，false(默认值)表示在冒泡阶段调用事件处理程序</li><li>removeEventListener()：通过addEventListener()添加的事件处理程序只能使用removeEventListener()来移除；addEventListener()添加的匿名函数无法移除<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myBtn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>); <span class="comment">// &quot;myBtn&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 多个事件处理程序以添加顺序来触发</span></span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello world!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>IE事件处理程序，以这种方式添加的事件处理程序会在事件流的冒泡阶段被处理</p><ul><li>attachEvent()和detachEvent()：这两个方法接收两个同样的参数：事件处理程序的名字和事件处理函数<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myBtn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">attachEvent</span>(<span class="string">&quot;onclick&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === <span class="variable language_">window</span>);   <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="17-3-事件对象"><a href="#17-3-事件对象" class="headerlink" title="17.3 事件对象"></a>17.3 事件对象</h3><ol start="8"><li>在DOM中发生事件时，所有相关信息都会被收集并存储在一个名为event的对象中。这个对象包含了一些基本信息，比如导致事件的元素、发生的事件类型，以及可能与特定事件相关的任何其他数据</li><li>属性方法<ul><li>bubbles：表示事件是否冒泡</li><li>cancelable：表示是否可以取消事件的默认行为</li><li>currentTarget：当前事件处理程序所在的元素</li><li>defaultPrevented：true表示已经调用preventDefault()方法(DOM3Events中新增)</li><li>detail：事件相关的其他信息</li><li>eventPhase：表示调用事件处理程序的阶段：1代表捕获阶段，2代表到达目标，3代表冒泡阶段</li><li>preventDefault()：用于取消事件的默认行为。只有cancelable为true才可以调用这个方法</li><li>stopImmediatePropagation()：用于取消所有后续事件捕获或事件冒泡，并阻止调用任何后续事件处理程序(DOM3Events中新增)</li><li>stopPropagation()：用于取消所有后续事件捕获或事件冒泡。只有bubbles为true才可以调用这个方法</li><li>target：事件目标</li><li>trusted：true表示事件是由浏览器生成的。false表示事件是开发者通过JavaScript创建的(DOM3Events中新增)</li><li>type：被触发的事件类型</li><li>View：与事件相关的抽象视图。等于事件所发生的window对象</li></ul></li></ol><h3 id="17-4-事件类型"><a href="#17-4-事件类型" class="headerlink" title="17.4 事件类型"></a>17.4 事件类型</h3><ol start="10"><li>DOM3事件类型：用户界面事件、焦点事件、鼠标事件、滚轮事件、输入事件、键盘事件、合成事件</li></ol><h3 id="17-5-内存与性能"><a href="#17-5-内存与性能" class="headerlink" title="17.5 内存与性能"></a>17.5 内存与性能</h3><ol start="11"><li>事件委托：可利用事件冒泡，只使用一个事件处理程序来管理一种类型的事件<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;myLinks&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;goGithub&quot;</span>&gt;</span>去GitHub社区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>做点什么<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;sayName&quot;</span>&gt;</span>说名字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myLinks&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  list.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> target = event.<span class="property">target</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">switch</span>(target.<span class="property">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">case</span> <span class="string">&quot;goGithub&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">        location.<span class="property">href</span> = <span class="string">&quot;https://github.com&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">case</span> <span class="string">&quot;doSomething&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&quot;我更改了文档的标题&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">case</span> <span class="string">&quot;sayName&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;幽蓝&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125; &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="17-6-模拟事件"><a href="#17-6-模拟事件" class="headerlink" title="17.6 模拟事件"></a>17.6 模拟事件</h3><ol start="12"><li>创建模拟事件：document.createEvent()方法创建一个event对象，参数接收一个创建事件类型的字符串</li><li>模拟鼠标事件：initMouseEvent()方法，用于为新对象指定鼠标的特定信息</li><li>模拟键盘事件：initKeyboardEvent()方法，用于为新对象指定键盘的特定信息</li><li>模拟其他事件：initEvent()方法</li></ol><h2 id="第十八章-动画与Canvas图形"><a href="#第十八章-动画与Canvas图形" class="headerlink" title="第十八章 动画与Canvas图形"></a>第十八章 动画与Canvas图形</h2><h3 id="18-1-使用requestAnimationFrame"><a href="#18-1-使用requestAnimationFrame" class="headerlink" title="18.1 使用requestAnimationFrame"></a>18.1 使用requestAnimationFrame</h3><ol><li>requestAnimationFrame()：告诉浏览器要执行动画了，浏览器可以通过最优方式确定重绘的时序</li><li>cancelAnimationFrame()：取消重绘任务<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> requestID = <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Repaint!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">cancelAnimationFrame</span>(requestID);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="18-2-基本的画布功能"><a href="#18-2-基本的画布功能" class="headerlink" title="18.2 基本的画布功能"></a>18.2 基本的画布功能</h3><ol start="3"><li>canvas标签设置宽高，默认画布不可见<ul><li>getContext()：参数”2d”，表示获取2D上下文对象</li><li>toDataURL()：导出&lt;canvas&gt;元素上的图像</li><li>fillStyle：设置填充颜色</li><li>strokeStyle：设置边框颜色</li><li>fillRect：绘制一个填充的矩形</li><li>strokeRect：绘制一个边框的矩形</li><li>clearRect：设置透明像素擦除一个矩形区域<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;drawing&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> drawing = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;drawing&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> ctx = drawing.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;#95e1d3&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;#b83b5e&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">fillRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">50</span>);</span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">strokeRect</span>(<span class="number">30</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">50</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 擦除一个钜形区域</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// ctx.clearRect(10, 10, 50, 50);</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="18-3-2D绘图上下文"><a href="#18-3-2D绘图上下文" class="headerlink" title="18.3 2D绘图上下文"></a>18.3 2D绘图上下文</h3><ol start="4"><li>绘制路径属性&#x2F;方法<ul><li>beginPath()：新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径</li><li>closePath()：闭合路径之后图形绘制命令又重新指向到上下文中</li><li>stroke()：通过线条来绘制图形轮廓</li><li>fill()：通过填充路径的内容区域生成实心的图形</li><li>moveTo()：从一个点到另一个点的移动过程</li><li>lineTo()：绘制一条从当前位置到指定x以及y位置的直线</li><li>arc()：画一个以（x,y）为圆心的以radius为半径的圆弧（圆）</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;drawing&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> drawing = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;drawing&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> ctx = drawing.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 创建路径</span></span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 绘制外圆</span></span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">arc</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">99</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 绘制内圆</span></span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">moveTo</span>(<span class="number">194</span>, <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">arc</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">94</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 绘制分针</span></span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">lineTo</span>(<span class="number">100</span>, <span class="number">15</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 绘制时针</span></span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">lineTo</span>(<span class="number">35</span>, <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 描画路径</span></span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>绘制文本：fillText()和strokeText()</li></ol><h3 id="18-4-WebGL"><a href="#18-4-WebGL" class="headerlink" title="18.4 WebGL"></a>18.4 WebGL</h3><ol start="6"><li>WebGL是画布的3D上下文；WebGL2.0上下文的名字叫”webgl2”，WebGL1.0上下文的名字叫”webgl1”</li></ol><h2 id="第十九章-表单脚本"><a href="#第十九章-表单脚本" class="headerlink" title="第十九章 表单脚本"></a>第十九章 表单脚本</h2><h3 id="19-1-表单基础"><a href="#19-1-表单基础" class="headerlink" title="19.1 表单基础"></a>19.1 表单基础</h3><ol><li><p>preventDefault()：阻止表单提交</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myForm&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  form.<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 阻止表单提交</span></span></span><br><span class="line"><span class="language-javascript">    event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>表单字段：表单元素可以使用elements属性来访问，elements集合是一个有序列表，通过索引位置和name属性来访问</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>点我提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入内容&quot;</span> <span class="attr">name</span>=<span class="string">&quot;textbox1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 取得表单中的第一个字段</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> field1 = form.<span class="property">elements</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 取得表单中名为&quot;textbox1&quot;的字段</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> field2 = form.<span class="property">elements</span>[<span class="string">&quot;textbox1&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 取得字段的数量</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> fieldCount = form.<span class="property">elements</span>.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(field1);      <span class="comment">// &lt;button type=&quot;submit&quot;&gt;点我提交&lt;/button&gt;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(field2);      <span class="comment">// &lt;input type=&quot;text&quot; value=&quot;请输入内容&quot; name=&quot;textbox1&quot;&gt;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fieldCount);  <span class="comment">// 2，只计算表单功能的子标签，div标签不计算在内</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>表单字段的公共属性和方法</p><ul><li>disabled：布尔值，表示表单字段是否禁用</li><li>form：指针，指向表单字段所属的表单。这个属性是只读的</li><li>name：字符串，这个字段的名字</li><li>readOnly：布尔值，表示这个字段是否只读</li><li>tabIndex：数值，表示这个字段在按Tab键时的切换顺序</li><li>type：字符串，表示字段类型，如”checkbox”、”radio”等</li><li>value：要提交给服务器的字段值。对文件输入字段来说，这个属性是只读的，仅包含计算机上某个文件的路径<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;myForm&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit-btn&quot;</span>&gt;</span>点我提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 第一次点击之后禁用提交按钮。通过监听submit事件来实现</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 只有提交按钮才能触发submit事件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myForm&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  form.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> target = event.<span class="property">target</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 取得提交按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> btn = target.<span class="property">elements</span>[<span class="string">&quot;submit-btn&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 禁用提交按钮</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="19-2-文本框编程"><a href="#19-2-文本框编程" class="headerlink" title="19.2 文本框编程"></a>19.2 文本框编程</h3><ol start="4"><li>屏蔽字符，只允许输入数字<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;myForm&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  请输入数字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;textbox&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> text = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;textbox&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  textbox.<span class="title function_">addEventListener</span>(<span class="string">&quot;keypress&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (!<span class="regexp">/\d/</span>.<span class="title function_">test</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(event.<span class="property">charCode</span>)) &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">      event.<span class="property">charCode</span> &gt; <span class="number">9</span> &amp;&amp;</span></span><br><span class="line"><span class="language-javascript">      !event.<span class="property">ctrlKey</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="第二十章-JavaScript-API"><a href="#第二十章-JavaScript-API" class="headerlink" title="第二十章 JavaScript API"></a>第二十章 JavaScript API</h2><ol><li>Atomics API：用于保护代码在多线程内存访问模式下不发生资源争用</li><li>postMessage() API：支持从不同源跨文档发送消息，同时保证安全和遵循同源策略</li><li>Encoding API：用于实现字符串与缓冲区之间的无缝转换(越来越常见的操作)</li><li>File API：提供了发送、接收和读取大型二进制对象的可靠工具</li><li>媒体元素<audio>和<video>拥有自己的API，用于操作音频和视频。并不是每个浏览器都会支持所有媒体格式，使用canPlayType()方法可以检测浏览器支持情况</li><li>拖放 API：支持方便地将元素标识为可拖动，并在操作系统完成放置时给出回应。可以利用它创建自定义可拖动元素和放置目标</li><li>Notifications API：提供了一种浏览器中立的方式，以此向用户展示消通知弹层</li><li>Streams API：支持以全新的方式读取、写入和处理数据</li><li>Timing API：提供了一组度量数据进出浏览器时间的可靠工具</li><li>Web Components API：为元素重用和封装技术向前迈进提供了有力支撑</li><li>Web Cryptography API：让生成随机数、加密和签名消息成为一类特性</li></ol><h2 id="第二十一章-错误处理与调试"><a href="#第二十一章-错误处理与调试" class="headerlink" title="第二十一章 错误处理与调试"></a>第二十一章 错误处理与调试</h2><h3 id="21-2-错误处理"><a href="#21-2-错误处理" class="headerlink" title="21.2 错误处理"></a>21.2 错误处理</h3><ol><li>错误类型<ul><li>InternalError类型的错误会在底层JavaScript引擎抛出异常时由浏览器抛出。例如，递归过多导致了栈溢出。这个类型并不是代码中通常要处理的错误，如果真发生了这种错误，很可能代码哪里弄错了或者有危险了</li><li>EvalError类型的错误会在使用eval()函数发生异常时抛出</li><li>RangeError错误会在数值越界时抛出</li><li>ReferenceError会在找不到对象时发生</li><li>SyntaxError经常在给eval()传入的字符串包含JavaScript语法错误时发生</li><li>TypeError主要发生在变量不是预期类型，或者访问不存在的方法时</li><li>URIError在使用encodeURI()或decodeURI()但传入了格式错误的URI时发生</li></ul></li><li>大多数情况下，最好使用严格相等(&#x3D;&#x3D;&#x3D;)和严格不相等(!&#x3D;&#x3D;)操作符来避免类型转换</li><li>使用 try&#x2F;catch 语句，可以通过更合适的方式对错误做出处理，避免浏览器处理</li></ol><h2 id="第二十二章-处理XML"><a href="#第二十二章-处理XML" class="headerlink" title="第二十二章 处理XML"></a>第二十二章 处理XML</h2><ol><li>DOMParser类型是简单的对象，可以将XML字符串解析为DOM文档</li><li>XMLSerializer类型执行相反操作，将DOM文档序列化为XML字符串</li><li>DOM Level 3新增了针对XPath API的规范。该API可以让JavaScript针对DOM文档执行任何XPath查询并得到不同数据类型的结果</li></ol><h2 id="第二十三章-JSON"><a href="#第二十三章-JSON" class="headerlink" title="第二十三章 JSON"></a>第二十三章 JSON</h2><h3 id="23-1-语法"><a href="#23-1-语法" class="headerlink" title="23.1 语法"></a>23.1 语法</h3><ol><li>JSON作为替代XML的一个方案提出，解决XML冗余和啰唆问题，JSON不属于JavaScript，它们只是拥有相同的语法</li><li>JSON支持3种类型的值<ul><li>简单值：字符串、数值、布尔值和null，特殊值undefined不可以</li><li>对象：第一种复杂数据类型，对象表示有序键&#x2F;值对。每个值可以是简单值，也可以是复杂类型</li><li>数组：第二种复杂数据类型，数组表示通过索引访问的有序列表。数组的值可以是任意类型</li></ul></li><li>JSON与JS区别：JSON字符串必须使用双引号；JSON没有变量、函数或对象实例的概念；JSON的所有记号都只表示结构化数据</li></ol><h3 id="23-2-解析与序列化"><a href="#23-2-解析与序列化" class="headerlink" title="23.2 解析与序列化"></a>23.2 解析与序列化</h3><ol start="4"><li><p>JSON的优势：能解析成可用的JS对象，JS开发者可以非常方便地使用JSON数据</p></li><li><p>JSON对象有两个方法：stringify()和parse()</p><ul><li>JSON.stringify()：能把JavaScript序列化为JSON字符串；值为undefined的任何属性也会被跳过</li><li>JSON.parse()：能把JSON解析为原生JavaScript值；新对象接收解析的值与原对象不是同一个引用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Professional JavaScript&quot;</span>,</span><br><span class="line">  <span class="attr">authors</span>: [</span><br><span class="line">    <span class="string">&quot;Nicholas C. Zakas&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Matt Frisbie&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">edition</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">year</span>: <span class="number">2017</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonText = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(book);</span><br><span class="line"><span class="comment">// &#123;&quot;title&quot;:&quot;Professional JavaScript&quot;,&quot;authors&quot;:[&quot;Nicholas C. Zakas&quot;,&quot;Matt Frisbie&quot;],&quot;edition&quot;:4,&quot;year&quot;:2017&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bookCopy = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonText);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(book === bookCopy); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>过滤结果：JSON.stringify()第二个参数缩进想要的JSON字符串；如果第二参数是函数，还能修改值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonText = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(book, [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;edition&#x27;</span>]);</span><br><span class="line"><span class="comment">// &#123;&quot;title&quot;:&quot;Professional JavaScript&quot;,&quot;edition&quot;:4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonText1 = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(book, <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;authors&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> value.<span class="title function_">join</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;year&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">5000</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;edition&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// &#123;&quot;title&quot;:&quot;Professional JavaScript&quot;,&quot;authors&quot;:&quot;Nicholas C. Zakas,Matt Frisbie&quot;,&quot;year&quot;:5000&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>字符串索引：JSON.stringify()第三个参数控制缩进和空格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每级缩进4个空格</span></span><br><span class="line"><span class="keyword">let</span> jsonText = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(book, <span class="literal">null</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonText);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     &quot;title&quot;: &quot;Professional JavaScript&quot;,</span></span><br><span class="line"><span class="comment">//     &quot;authors&quot;: [</span></span><br><span class="line"><span class="comment">//         &quot;Nicholas C. Zakas&quot;,</span></span><br><span class="line"><span class="comment">//         &quot;Matt Frisbie&quot;</span></span><br><span class="line"><span class="comment">//     ],</span></span><br><span class="line"><span class="comment">//     &quot;edition&quot;: 4,</span></span><br><span class="line"><span class="comment">//     &quot;year&quot;: 2017</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="第二十四章-网络请求与远程资源"><a href="#第二十四章-网络请求与远程资源" class="headerlink" title="第二十四章 网络请求与远程资源"></a>第二十四章 网络请求与远程资源</h2><h3 id="24-1-XMLHttpRequest对象"><a href="#24-1-XMLHttpRequest对象" class="headerlink" title="24.1 XMLHttpRequest对象"></a>24.1 XMLHttpRequest对象</h3><ol><li><p>创建XHR对象<code>let xhr = new XMLHttpRequest();</code></p><ul><li>open()：启动一个请求以备发送；3个参数：请求类型(“get”、”post”等)、请求URL、请求是否异步的布尔值；不会真正发送请求</li><li>send()：发送请求；1个参数：发送的数据；不需要发送数据则必须传入null</li></ul></li><li><p>XHR对象的属性</p><ul><li>responseText：作为响应体返回的文本</li><li>responseXML：如果响应的内容类型是”text&#x2F;xml”或”application&#x2F;xml”，那就是包含响应数据的XML DOM文档</li><li>status：响应的HTTP状态</li><li>statusText：响应的HTTP状态描述</li></ul></li><li><p>HTTP状态码</p><ul><li>2xx，表示成功</li><li>304，表示资源未修改过，是从浏览器缓存中直接拿取的</li></ul></li><li><p>readyState属性</p><ul><li>0：未初始化</li><li>1：启动，已调用open()</li><li>2：发送，已调用send()</li><li>3：接收到部分响应数据</li><li>4：接收到全部响应数据</li><li>readystatechange事件：readystate属性的值由一个值变成另一个值，都会触发readystatechange事件</li><li>onreadystatechange事件处理程序不会收到event对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) || xhr.<span class="property">status</span> === <span class="number">304</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Request was unsuccessful: &quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;example.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>XHR请求</p><ul><li>setRequestHeader()：发送额外的请求头部；接收两个参数：头部字段的名称和值；必须在open()之后、send()之前调用setRequestHeader()</li><li>getResponseHeader()：从XHR对象获取响应头部；传入要获取头部的名称</li><li>getAllResponseHeaders()：返回字符串，通过解析头部字段的输出，可以知道服务器发送的所有头部</li><li>GET请求：向服务器查询某些信息</li><li>POST请求：向服务器发送应该保存的数据</li></ul></li></ol><h3 id="24-3-跨源资源共享"><a href="#24-3-跨源资源共享" class="headerlink" title="24.3 跨源资源共享"></a>24.3 跨源资源共享</h3><ol start="6"><li>CORS：使用自定义的HTTP头部允许浏览器和服务器相互了解，以确实请求或响应应该成功还是失败</li></ol><h3 id="24-4-替代性跨源技术"><a href="#24-4-替代性跨源技术" class="headerlink" title="24.4 替代性跨源技术"></a>24.4 替代性跨源技术</h3><ol start="7"><li><p>图像Ping：只能发送GET请求；无法访问服务器的响应文本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">img.<span class="property">onload</span> = img.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&quot;http://www.example.com/test?name=Nicholas&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>JSONP：两部分组成回调函数和数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleResponse</span>(<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`</span></span><br><span class="line"><span class="string">          You&#x27;re at IP address <span class="subst">$&#123;response.ip&#125;</span>, which is in</span></span><br><span class="line"><span class="string">          <span class="subst">$&#123;response.city&#125;</span>, <span class="subst">$&#123;response.region_name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">script.<span class="property">src</span> = <span class="string">&quot;http://freegeoip.net/json/?callback=handleResponse&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">insertBefore</span>(script, <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">firstChild</span>);</span><br></pre></td></tr></table></figure></li><li><p>Fetch API是作为对XHR对象的一种端到端的替代方案而提出的。这个API提供了优秀的基于期约的结构、更直观的接口，以及对Stream API的最好支持</p></li><li><p>Web Socket是与服务器的全双工、双向通信渠道。与其他方案不同，Web Socket不使用HTTP，而使用了自定义协议，目的是更快地发送小数据块。这需要专用的服务器，但速度优势明显</p></li></ol><h2 id="第二十五章-客户端存储"><a href="#第二十五章-客户端存储" class="headerlink" title="第二十五章 客户端存储"></a>第二十五章 客户端存储</h2><h3 id="25-1-cookie"><a href="#25-1-cookie" class="headerlink" title="25.1 cookie"></a>25.1 cookie</h3><ol><li>每个浏览器限制cookie的数量不同，超过上限浏览器会删除之前设置的cookie<ul><li>每个域不超过20个cookie</li><li>每个域不超过81920字节</li><li>单个cookie不超过4096字节</li></ul></li><li>cookie的构成<ul><li>名称：cookie名不区分大小写，但服务器软件可能会区分大小写</li><li>值：存储在cookie里的字符串值。这个值必须经过URL编码</li><li>域：cookie有效的域</li><li>路径：请求URL中包含这个路径才会把cookie发送到服务器</li><li>过期时间：表示何时删除cookie的时间戳；默认浏览器会话结束后删除所有cookie</li><li>安全标志：设置之后，只在使用SSL安全连接的情况下才会把cookie发送到服务器</li></ul></li><li>cookie的使用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建cookie</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&#x27;name=ulan&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 名或值非英文，写入时需要encodeURIComponent()编码，读取时decodeURIComponent()解码</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">`username=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;幽蓝&#x27;</span>)&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过期时间，默认会话时间指关闭浏览器消失</span></span><br><span class="line"><span class="comment">// expires，值为Data类型，可以指定过期时间</span></span><br><span class="line"><span class="comment">// max-age，值为数字，表示当前时间多少秒后过期，单位是秒</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">`age=9; expires=<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>(</span></span></span><br><span class="line"><span class="subst"><span class="string">  <span class="string">&#x27;2099-01-01 00:00:00&#x27;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">)&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&#x27;job=softwareEngineer; max-age=5&#x27;</span>;  <span class="comment">// 5秒后过期</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">`job=softwareEngineer; max-age=<span class="subst">$&#123;<span class="number">24</span> * <span class="number">3600</span> * <span class="number">7</span>&#125;</span>`</span>;  <span class="comment">// 7天后过期</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除cookie</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&#x27;name=ulan; max-age=0&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="25-2-Web-Storage"><a href="#25-2-Web-Storage" class="headerlink" title="25.2 Web Storage"></a>25.2 Web Storage</h3><ol start="4"><li>Web Storage解决通过客户端存储不需要频繁发送回服务器的数据时使用cookie的问题；localStorage永久存储机制，sessionStorage是跨会话的存储机制</li><li>Storage的实例方法<ul><li>setItem(name, value)：设置给定name的值</li><li>getItem(name)：取得给定name的值，不存在返回null</li><li>removeItem(name)：删除给定name的名&#x2F;值对</li><li>clear()：删除所有值</li><li>key(index)：取得给定数值位置的名称<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;ulan&#x27;</span>);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;19&#x27;</span>);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;job&#x27;</span>, <span class="string">&#x27;softwareEngineer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>));  <span class="comment">// ulan</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;friend&#x27;</span>));  <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除job</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;job&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全删除</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sessionStorage使用基本一样</span></span><br><span class="line">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;friend&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;friend&#x27;</span>);</span><br><span class="line">sessionStorage.<span class="title function_">removeItem</span>(<span class="string">&#x27;friend&#x27;</span>);</span><br><span class="line">sessionStorage.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="25-3-IndexedDB"><a href="#25-3-IndexedDB" class="headerlink" title="25.3 IndexedDB"></a>25.3 IndexedDB</h3><ol start="6"><li>IndexedDB是类似于SQL数据库的结构化数据存储机制。不同的是，IndexedDB存储的是对象，而不是数据表。对象存储是通过定义键然后添加数据来创建的。游标用于查询对象存储中的特定数据，而索引可以针对特定属性实现更快的查询</li></ol><h2 id="第二十六章-模块"><a href="#第二十六章-模块" class="headerlink" title="第二十六章 模块"></a>第二十六章 模块</h2><h3 id="26-1-理解模块模式"><a href="#26-1-理解模块模式" class="headerlink" title="26.1 理解模块模式"></a>26.1 理解模块模式</h3><ol><li>按逻辑分块，各自封装，相互独立，每个块自行决定对外暴露什么，同时自行决定引入执行哪些外部代码</li></ol><h3 id="26-4-使用ES6模块"><a href="#26-4-使用ES6模块" class="headerlink" title="26.4 使用ES6模块"></a>26.4 使用ES6模块</h3><ol start="2"><li>导出与导入</li></ol><ul><li>demo.js文件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;age, fn, p&#125;;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> p = &#123;<span class="attr">name</span>: <span class="string">&#x27;幽蓝&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure></li><li>第一种导入方式，导入部分内容<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;age&#125; <span class="keyword">from</span> <span class="string">&#x27;./demo.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age);  <span class="comment">// 9</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>第二种导入方式，导入全部内容，按对象方式来访问<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> * <span class="keyword">as</span> obj <span class="keyword">from</span> <span class="string">&#x27;./demo.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>); <span class="comment">// 9</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">p</span>.<span class="property">name</span>); <span class="comment">// 幽蓝</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="第二十七章-工作者线程"><a href="#第二十七章-工作者线程" class="headerlink" title="第二十七章 工作者线程"></a>第二十七章 工作者线程</h2><h3 id="27-1-工作者线程简介"><a href="#27-1-工作者线程简介" class="headerlink" title="27.1 工作者线程简介"></a>27.1 工作者线程简介</h3><ol><li>工作者线程的价值所在：允许把主线程的工作转嫁给独立的实体，而不会改变现有的单线程模型</li><li>JavaScript环境实际上是运行在托管操作系统中的虚拟环境。在浏览器中每打开一个页面，就会分配一个它自己的环境；使用工作者线程，浏览器可以在原始页面环境之外再分配一个完全独立的二级子环境。这个子环境不能与依赖单线程交互的API（如DOM）互操作，但可以与父环境并行执行代码</li><li>主要的工作者线程：专用工作者线程、共享工作者线程和服务工作者线程</li></ol><h3 id="27-2-专用工作者线程"><a href="#27-2-专用工作者线程" class="headerlink" title="27.2 专用工作者线程"></a>27.2 专用工作者线程</h3><ol start="4"><li><p>worker实例化</p><ul><li>比如下方html是父环境，多线程计算3次斐波那契数列，可能需要3秒；单线程计算3次斐波那契数列，可能需要9秒<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> worker1 = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;demo1.js&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> worker2 = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;demo2.js&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> worker3 = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;demo3.js&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  worker1.<span class="property">onmessage</span> = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  worker2.<span class="property">onmessage</span> = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  worker3.<span class="property">onmessage</span> = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// fb执行时间: 2616.596923828125 ms</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// worker2</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// fb执行时间: 2623.839111328125 ms</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// worker1</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// fb执行时间: 2625.576904296875 ms</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// worker3</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>demo1.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 斐波那契数列，当成是相当耗时的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fb</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fb</span>(n - <span class="number">1</span>) + <span class="title function_">fb</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;fb执行时间1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">fb</span>(<span class="number">43</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;fb执行时间1&#x27;</span>);</span><br><span class="line">self.<span class="title function_">postMessage</span>(<span class="string">&#x27;worker1&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>demo2.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 斐波那契数列，当成是相当耗时的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fb</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fb</span>(n - <span class="number">1</span>) + <span class="title function_">fb</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;fb执行时间2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">fb</span>(<span class="number">43</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;fb执行时间2&#x27;</span>);</span><br><span class="line">self.<span class="title function_">postMessage</span>(<span class="string">&#x27;worker2&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>demo3.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 斐波那契数列，当成是相当耗时的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fb</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fb</span>(n - <span class="number">1</span>) + <span class="title function_">fb</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;fb执行时间3&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">fb</span>(<span class="number">43</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;fb执行时间3&#x27;</span>);</span><br><span class="line">self.<span class="title function_">postMessage</span>(<span class="string">&#x27;worker3&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Worker对象支持的事件处理程序属性</p><ul><li>onerror：在工作者线程中发生ErrorEvent类型的错误事件时会调用指定给该属性的处理程序</li><li>onmessage：在工作者线程中发生MessageEvent类型的消息事件时会调用指定给该属性的处理程序</li><li>onmessageerror：在工作者线程中发生MessageEvent类型的错误事件时会调用指定给该属性的处理程序</li><li>postMessage()：用于通过异步消息事件向工作者线程发送信息</li><li>terminate()：用于立即终止工作者线程。没有为工作者线程提供清理的机会，脚本会突然停止</li></ul></li></ol><h3 id="27-5-小结"><a href="#27-5-小结" class="headerlink" title="27.5 小结"></a>27.5 小结</h3><ol start="6"><li>工作者线程可以运行异步JavaScript而不阻塞用户界面。这非常适合复杂计算和数据处理，特别是需要花较长时间因而会影响用户使用网页的处理任务。工作者线程有自己独立的环境，只能通过异步消息与外界通信</li><li>工作者线程可以是专用线程、共享线程。专用线程只能由一个页面使用，而共享线程则可以由同源的任意页面共享</li><li>服务工作者线程用于让网页模拟原生应用程序。服务工作者线程也是一种工作者线程，但它们更像是网络代理，而非独立的浏览器线程。可以把它们看成是高度定制化的网络缓存，它们也可以在PWA中支持推送通知</li></ol><h2 id="第二十八章-最佳实践"><a href="#第二十八章-最佳实践" class="headerlink" title="第二十八章 最佳实践"></a>第二十八章 最佳实践</h2><ol><li>可维护性与可读性，不同团队有不同开发规范，入乡随俗</li><li>不要修改不属于你的对象。只有你自己创建的才是你的对象，包括自定义类型和对象字面量</li><li>优化代码，先能走在考虑怎么跑吧？</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>八乡山之旅</title>
      <link href="/archives/7a37d2a6.html"/>
      <url>/archives/7a37d2a6.html</url>
      
        <content type="html"><![CDATA[<p><img src="/img/content_baXiangMountain.webp" alt="友人"></p><p>前阵子搭建完网站想休息一会，正巧朋友问要不要去八乡山，我立马答应了( ^ω^ )<br>听说他们以前骑自行车上山 🚴，看了眼窗外的路，路不仅陡还很远，甚至还开起玩笑问要不要再骑一次，他表示骑到一半开始后悔了😂</p><p>来到山顶，风景极其美丽！明明太阳很大却不热，甚至还有一些冷。上面有凉亭和废弃建筑，不远处还有发电厂，以及不允许进入的军事管辖地。我们走了很长一段路，在某处休息时，看到一只很大的稚鸡飞过，吓了一跳 Σ（・□・；）</p><p>后来想去看瀑布，可惜车子快没油了，只能匆忙下山返程。偶尔跟朋友来一场说走就走的旅行，不管去哪都非常有意思 :)</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>奥睿科拓展坞与M2三星硬盘体验</title>
      <link href="/archives/ea5c78aa.html"/>
      <url>/archives/ea5c78aa.html</url>
      
        <content type="html"><![CDATA[<p>Macbook系统盘256G是真的不够用╮(╯▽╰)╭<br>趁打折期间入了奥睿科拓展坞，里边内置硬盘盒，桌面清爽党狂喜</p><p><img src="/img/content_DDS1.webp" alt="包装盒"></p><p>拆包，扭螺丝，贴散热胶（赠送的）</p><p><img src="/img/content_DDS2.webp" alt="固态贴散热胶"><br><img src="/img/content_DDS3.webp" alt="桌面"></p><p><strong>体验方面：</strong></p><ol><li>M2三星读写600M左右，传输文件400M&#x2F;s，没办法发挥硬盘性能</li><li>解决了macbook接口问题，缺点输入接口只有一个，比方说你没办法用USB口连接电脑</li><li>拓展坞是靠金属散热，没有风扇散热，正常使用是足够的，除非频繁使用温度会飙到50°+</li><li>不知道为什么拓展坞，偶尔会发出“滴滴”声😅，虽说大部分时间很安静就是了</li><li>罗技无线鼠标有时会卡顿，不少网友表示是苹果的锅？</li><li>除了“滴滴”声，鼠标有时卡顿，整体很满意</li></ol><p><strong>Mac罗技无线鼠标卡顿解决方法</strong><br>第一个方案：系统设置改网络服务顺序，蓝牙PAN调到顶，本质上是减少干扰（没用）<br>第二个方案：下载厂家提供的驱动，罗技无线鼠标用的是USB微型接收器，免驱动无蓝牙显示（没用）<br>第三个方案：2.4GWiFi与蓝牙使用的频段产生干扰，无线鼠标卡顿真正原因（有用）</p><ul><li>WiFi设置成5G信号频段，两者互不干扰，但我家的路由器老旧无5G信号频段，下面有另一种解决方法</li><li>电脑接上网线，电脑关闭WiFi连接，注意我是指电脑而不是让你关路由器的WiFi，干扰源消失鼠标自然流畅</li><li>上面太麻烦了，直接上有线鼠标^^</li></ul>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客教程，hexo指令与解决报错，图床</title>
      <link href="/archives/e6a32f0a.html"/>
      <url>/archives/e6a32f0a.html</url>
      
        <content type="html"><![CDATA[<h2 id="我是在哪里学习hexo搭建呢？"><a href="#我是在哪里学习hexo搭建呢？" class="headerlink" title="我是在哪里学习hexo搭建呢？"></a>我是在哪里学习hexo搭建呢？</h2><p>介绍：我是在下方链接中学习，up主讲的很详细，有需要可以看看<br>作者：卷二兔<br>链接：<a href="https://www.bilibili.com/video/BV1aV411p7Bc/?spm_id_from=333.788">https://www.bilibili.com/video/BV1aV411p7Bc/?spm_id_from=333.788</a></p><h2 id="hexo指令"><a href="#hexo指令" class="headerlink" title="hexo指令"></a>hexo指令</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##全部指令在博客根目录下，打开终端输入指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##hexo安装</span></span><br><span class="line">npm install hexo <span class="literal">-g</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##初始化博客</span></span><br><span class="line">hexo init [文件夹名字]</span><br><span class="line"></span><br><span class="line"><span class="comment">##安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">##生成文章页面</span></span><br><span class="line">hexo new 文章标题名</span><br><span class="line"></span><br><span class="line"><span class="comment">##静态页面生成</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment">##本地服务器预览，ctrl+c关闭服务器</span></span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment">##部署到服务器</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="Hexo部署出现err-Error-Spawn-failed"><a href="#Hexo部署出现err-Error-Spawn-failed" class="headerlink" title="Hexo部署出现err: Error: Spawn failed"></a>Hexo部署出现err: Error: Spawn failed</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (C:\Users\myosotis\Desktop\Hexo_blog\node_modules\hexo<span class="literal">-util</span>\lib\spawn.js:<span class="number">51</span>:<span class="number">21</span>)</span><br><span class="line">      at ChildProcess.emit (events.js:<span class="number">315</span>:<span class="number">20</span>)</span><br><span class="line">      at ChildProcess.cp.emit (C:\Users\myosotis\Desktop\Hexo_blog\node_modules\cross<span class="literal">-spawn</span>\lib\enoent.js:<span class="number">34</span>:<span class="number">29</span>)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:<span class="number">277</span>:<span class="number">12</span>) &#123;</span><br><span class="line">    code: <span class="number">128</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></table></figure><p>解决方法一：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##进入站点根目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##删除git提交内容文件夹</span></span><br><span class="line"><span class="built_in">rm</span> <span class="literal">-rf</span> .deploy_git/</span><br><span class="line"></span><br><span class="line"><span class="comment">##执行</span></span><br><span class="line">git config <span class="literal">--global</span> core.autocrlf false</span><br><span class="line"></span><br><span class="line"><span class="comment">##最后</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>解决方法二：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##进入_config.yml文件修改repo</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  repo: <span class="string">&#x27;git@github.com:你的用户名/你的用户名.github.io.git&#x27;</span></span><br><span class="line">  branch: main</span><br><span class="line"></span><br><span class="line"><span class="comment">##进入站点根目录</span></span><br><span class="line">ssh <span class="literal">-T</span> git@github.com</span><br><span class="line"></span><br><span class="line"><span class="comment">##最后</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h2 id="请确认您有正确的访问权限并且仓库存在"><a href="#请确认您有正确的访问权限并且仓库存在" class="headerlink" title="请确认您有正确的访问权限并且仓库存在"></a>请确认您有正确的访问权限并且仓库存在</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf .deploy_git</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="一大堆Error报错、4000端口被占用"><a href="#一大堆Error报错、4000端口被占用" class="headerlink" title="一大堆Error报错、4000端口被占用"></a>一大堆Error报错、4000端口被占用</h2><p>解决方法：<br>hexo s本地服务器没有关闭，回到终端ctrl+c关闭服务器<br>如果终端按ctrl+c问题依旧存在，建议重启电脑<br>重启电脑后，4000端口被占用问题基本解决<br>一大堆Error报错没解决，排除是本地服务器问题，你需要查看下报错信息<br>看不懂？你可以复制报错信息到翻译器上:)</p><h2 id="如何确认是否需要图床"><a href="#如何确认是否需要图床" class="headerlink" title="如何确认是否需要图床"></a>如何确认是否需要图床</h2><p>介绍：图床，就是专门用来存放图片的服务器，更多是指提供图片外链的服务，有免费、付费图床</p><p>为什么需要用图床？</p><ol><li>自己服务器硬盘不够用</li><li>自己服务器带宽小，网速慢</li><li>自己没有服务器但是又想分享图片</li><li>不想把图片放到自己服务器</li><li>临时分享图片到其他网站外链</li></ol><blockquote><p>github文件大小，浏览器限制单文件25M，其他限制单文件50M，超过会收到git警告，github阻止超过100M推送<br>github存储库大小，文档似乎没有提到上限，只提到：如果您的仓库过度影响我们的基础架构，您可能会收到来自 GitHub 支持的电子邮件，要求您采取纠正措施</p></blockquote><p>最后谈谈我个人看法，这里是我记录成长分享作品的地方，不在意面向人群，所以我会把图片放在本地上，主要图方便^ ^<br>如果你是面向国内人群，且访问人数非常大，那么最好使用图床，大幅减轻服务器压力，对网站优化非常大。 使用图床你必须考虑稳定性和安全性，你也不想某一天突然不能使用吧？最好是自己搭建图床，其次是付费图床，反正也不贵</p><h2 id="自定义网页避免主题渲染"><a href="#自定义网页避免主题渲染" class="headerlink" title="自定义网页避免主题渲染"></a>自定义网页避免主题渲染</h2><p>有时候想写一些项目展示页面，结果却被主题渲染成文章，预想结果不一样</p><ol><li>source 文件夹下，新建文件夹存放项目展示页面</li><li>博客根目录的配置文件_config.yml 文件里，设置跳过渲染：我选择最后一种<ul><li>单个文件，就写：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## 跳过渲染</span><br><span class="line">skip_render: </span><br><span class="line">  - &quot;xxxx.html&quot;</span><br></pre></td></tr></table></figure></li><li>如果只创建了一个文件夹，要跳过它目录下所有文件的渲染，就写：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## 跳过文件夹下所有子文件夹和文件</span><br><span class="line">skip_render:</span><br><span class="line">  - &quot;baidu/**&quot;</span><br></pre></td></tr></table></figure></li><li>如果父文件夹下还有子文件夹，就写：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## 跳过子文件夹</span><br><span class="line">skip_render: </span><br><span class="line">  - &quot;文件夹名/子文件夹名/*&quot;</span><br></pre></td></tr></table></figure></li><li>或更简单粗暴的方式：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## 跳过文件夹下所有子文件夹和文件</span><br><span class="line">skip_render: </span><br><span class="line">  - &quot;文件夹名/**&quot;  </span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/4a17b156.html"/>
      <url>/archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
